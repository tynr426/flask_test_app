1
00:00:10,510 --> 00:00:17,140
Welcome to Stanford CS193P,this is winter quarter 2015.

2
00:00:17,140 --> 00:00:21,710
And we're gonna dive right in today to some brief slide work.

3
00:00:22,720 --> 00:00:28,350
This people at Stanford, you've got a document that describe, describes all the grading and all that stuff

4
00:00:28,350 --> 00:00:32,120
so I'm not gonna go over that in lecture like I often do to start the quarter.

5
00:00:33,660 --> 00:00:36,290
Instead I'm gonna talk a little bit about, what this class is about.

6
00:00:37,560 --> 00:00:42,060
Brief mention of the prerequisites cuz they're pretty important in this class.

7
00:00:42,070 --> 00:00:44,870
Then just the quickest overview of iOS.

8
00:00:44,870 --> 00:00:49,500
I'm gonna assume that anyone who is here or is watching this, knows what that is.

9
00:00:49,510 --> 00:00:51,600
And then, we're gonna dive right into a big old demo.

10
00:00:51,610 --> 00:00:54,770
It's gonna be a two-day thing, where I'm really going to try and

11
00:00:54,780 --> 00:00:57,380
introduce you to Xcode and the development environment and

12
00:00:57,380 --> 00:01:01,810
this language Swift, that you're gonna have to learn to develop for iOS.

13
00:01:02,850 --> 00:01:04,120
All right, so what is this class about?

14
00:01:04,120 --> 00:01:06,450
It's about building cool apps, as we know.

15
00:01:06,450 --> 00:01:09,090
Why are these iOS apps so cool?

16
00:01:09,090 --> 00:01:11,960
Well, because the device you're gonna run them on is in your pocket or

17
00:01:11,960 --> 00:01:14,220
in your backpack.

18
00:01:14,230 --> 00:01:16,490
Either, if you write an app, you can just pull it out and show your friends and

19
00:01:16,500 --> 00:01:20,530
it's highly networked and incredible graphics with animation.

20
00:01:20,530 --> 00:01:24,600
It's just cool all the way around and I think you guys all know that or you wouldn't be here.

21
00:01:24,600 --> 00:01:28,370
But you're also gonna learn in this class a lot of real life Object-Oriented Programming.

22
00:01:28,370 --> 00:01:32,570
You're taking a lot of other classes here at Stanford on things like graphics, and

23
00:01:32,580 --> 00:01:39,710
networking, and databases, and maybe animation. Things like that.

24
00:01:39,710 --> 00:01:42,580
And we're gonna is kinda tie that all together into a real world class.

25
00:01:42,580 --> 00:01:44,050
'Kay? You're gonna get to see all this stuff.

26
00:01:44,050 --> 00:01:46,890
Now, you know, it's gonna be kind of a survey course in that,

27
00:01:46,890 --> 00:01:52,460
I can't go too deep into networking. I can't go too deep into databases.

28
00:01:52,460 --> 00:01:56,360
I can't go too deep into animation, but you'll get to see it all in a really real

29
00:01:56,360 --> 00:01:59,560
world environment, where people out there building apps using that technology.

30
00:01:59,570 --> 00:02:04,940
For some of you who haven't seen that before that'll be a big bonus of this class, I think.

31
00:02:06,240 --> 00:02:07,970
The prerequisites of this class.

32
00:02:07,970 --> 00:02:11,710
Number one thing is you have to be a pretty strong Object-Oriented programmer.

33
00:02:11,710 --> 00:02:14,010
If you're not a strong Object-Oriented programmer, and

34
00:02:14,010 --> 00:02:18,010
you hit this class, you're probably gonna go under water, pretty quick.

35
00:02:18,020 --> 00:02:22,180
Okay? I'm gonna assume you know, everything about Object-Oriented Programming.

36
00:02:22,190 --> 00:02:26,650
iOS is a completely Object-Oriented Programming envir, development environment.

37
00:02:26,650 --> 00:02:28,850
I just don't mean I'm not just talking about the language is Object-Oriented.

38
00:02:28,860 --> 00:02:31,860
But the entire design of it the way you use it if you're not

39
00:02:31,860 --> 00:02:33,960
comfortable with things like subclassing and

40
00:02:33,960 --> 00:02:37,930
stuff like that then you're just really gonna be behind the curve.

41
00:02:37,930 --> 00:02:42,230
In iOS so at Stanford here that means CS16A and B or

42
00:02:42,240 --> 00:02:47,340
CS16X, and then you know, CS107, while it's not really Object-Oriented course,

43
00:02:47,340 --> 00:02:49,740
at least it's a heavy duty programming course.

44
00:02:49,740 --> 00:02:52,610
CS108 is a great Object-Oriented course so

45
00:02:52,610 --> 00:02:55,910
if you have, if you've taken CS108 you'll probably, be really well prepped.

46
00:02:55,920 --> 00:03:00,550
110, again not really too much an Object-Oriented program but

47
00:03:00,550 --> 00:03:03,050
good programming course cuz there's a lot of programming in this class,

48
00:03:03,050 --> 00:03:05,150
in fact, all the work in this class is programming.

49
00:03:05,160 --> 00:03:08,390
You will not have, a little bit of reading the first couple of weeks just to

50
00:03:08,390 --> 00:03:12,290
kinda learn this new language, but it's almost all programming after that all

51
00:03:12,300 --> 00:03:14,460
the way til the end, including your final project.

52
00:03:14,460 --> 00:03:17,800
So if you're not really comfortable with all these terms,

53
00:03:17,800 --> 00:03:21,670
this Object-Oriented terms or if you're just not really comfortable with

54
00:03:21,670 --> 00:03:26,170
writing big programs then this class will definitely be a challenge for you.

55
00:03:27,840 --> 00:03:30,680
okay, so what's in iOS, what are the parts of it?

56
00:03:30,680 --> 00:03:34,080
You know, it's ha, it's such a big system, it's got so much in it.

57
00:03:34,080 --> 00:03:38,250
It's impossible for me to, like, encapsulate it into a small little summary but.

58
00:03:38,250 --> 00:03:42,650
I do have this slide right here that divides it into these four layers.

59
00:03:42,660 --> 00:03:46,760
These four layers are approximately down near the hardware at the bottom.

60
00:03:46,760 --> 00:03:48,960
Up near the user at the top. Okay?

61
00:03:48,960 --> 00:03:52,280
So at the bottom, so

62
00:03:52,280 --> 00:03:55,600
a lot of people don't realize that iOS is basically a Unix-based operating system.

63
00:03:55,600 --> 00:04:01,550
'Kay? It's very similar shares a lot of the core of Mac OS X. Okay?

64
00:04:01,560 --> 00:04:03,910
Now, it's certainly optimized for mobile devices, which have

65
00:04:03,910 --> 00:04:08,740
battery restrictions and things like that, but that is basically what it is.

66
00:04:08,750 --> 00:04:11,510
And so down at that layer you've got sockets, and

67
00:04:11,510 --> 00:04:15,120
you've got you know, permissions, and things like that,

68
00:04:15,120 --> 00:04:19,190
that have to be near the oh you know, hardware to, to work properly.

69
00:04:19,190 --> 00:04:23,490
But above that there's kind of an Object-Oriented layer that lets you get at

70
00:04:23,490 --> 00:04:26,730
a lot of that stuff using Object-Oriented Programming.

71
00:04:26,730 --> 00:04:30,230
'Kay? And this stuff is not UI oriented it's

72
00:04:30,230 --> 00:04:34,170
more kind of accessing the hardware through Object-Oriented Programming or

73
00:04:34,170 --> 00:04:36,370
accessing networking through Object-Oriented Programming but

74
00:04:36,370 --> 00:04:39,300
it's a big layer there and so we will spend a fair amount of

75
00:04:39,310 --> 00:04:44,980
time in this layer because we need those primitives to build at the higher layers.

76
00:04:44,980 --> 00:04:48,450
Then, there's this whole layer, which I wish we had more time to spend on.

77
00:04:48,450 --> 00:04:50,250
We only get ten weeks in this whole class.

78
00:04:50,250 --> 00:04:54,650
It goes by so fast, you'll be amazed, as you're probably, used to with your Stanford courses.

79
00:04:55,750 --> 00:04:58,090
But there's a whole media layer here, both for

80
00:04:58,090 --> 00:05:02,060
static images, as you know, JPEG and things like that.

81
00:05:02,060 --> 00:05:07,700
And video both capturing video, editing video, all that.

82
00:05:07,700 --> 00:05:13,700
Incredible audio, the frameworks on this device for doing 3D audio for games and all that.

83
00:05:13,700 --> 00:05:16,670
I get to, unfortunately I get to very little of this layer.

84
00:05:16,670 --> 00:05:20,870
But I'll try to let you know, that it's in there and then you'll know to go out and

85
00:05:20,880 --> 00:05:23,940
seek out, if you're building a very audio intensive app or

86
00:05:23,950 --> 00:05:26,480
video intensive app, you'll seek out that layer.

87
00:05:26,480 --> 00:05:32,750
But we'll spend the vast majority of our time at the Cocoa Touch layer.

88
00:05:32,750 --> 00:05:35,320
So the Cocoa Touch layer, that's where the buttons and

89
00:05:35,320 --> 00:05:38,890
sliders and things like that are it's the layer,

90
00:05:38,890 --> 00:05:43,030
where you're gonna build the interactivity with your end user.

91
00:05:43,030 --> 00:05:47,930
And so, that's where we probably spend 70 plus percent of our time in the Cocoa Touch layer.

92
00:05:47,930 --> 00:05:50,270
And this is a very powerful layer.

93
00:05:50,270 --> 00:05:54,800
You know, you've seen things like the maps app on the phone.

94
00:05:54,810 --> 00:05:58,340
There's basically, an object that does almost the entire maps app, that you can

95
00:05:58,340 --> 00:06:01,480
just drop right into your program, and now you have maps in your program.

96
00:06:01,480 --> 00:06:04,050
Same thing with web browser.

97
00:06:04,050 --> 00:06:06,610
If you wanna put web browsing in your app, it's just boom, pop an object in there,

98
00:06:06,620 --> 00:06:08,650
call a couple methods and in your, on your way.

99
00:06:08,650 --> 00:06:13,590
So very powerful, very high level in there's a lot going on in there and

100
00:06:13,590 --> 00:06:16,190
that's where we will spend most of our time, 'kay?

101
00:06:16,190 --> 00:06:19,830
And by the way, if you have any questions I try to glance up, so

102
00:06:19,830 --> 00:06:21,490
the bright lights over there sometimes in my way,

103
00:06:21,500 --> 00:06:25,300
but, shout out or you know, otherwise get my attention.

104
00:06:25,300 --> 00:06:28,100
If you feel free to interrupt.

105
00:06:28,100 --> 00:06:31,300
Then there's the development platform itself.'Kay?

106
00:06:31,300 --> 00:06:32,800
With the tools we use to build these iOS apps.

107
00:06:32,810 --> 00:06:34,970
What's in that?

108
00:06:34,970 --> 00:06:39,040
Well, it's all pretty much now been funneled into this one application called Xcode 6.

109
00:06:39,050 --> 00:06:42,410
There are some little adjuncts that it calls out to but

110
00:06:42,420 --> 00:06:45,280
Xcode 6 is everything, it's your code editor,

111
00:06:45,280 --> 00:06:50,020
it's your compiler, your debugger all of that in one, pretty awesome app.

112
00:06:50,020 --> 00:06:54,390
And so we'll be learning all about Xcode 6 in this class, and

113
00:06:54,390 --> 00:06:59,360
that's where you'll be spend all your time developing, you're not gonna be at

114
00:06:59,360 --> 00:07:04,330
a terminal typing in Emacs or something, you're gonna be in Xcode 6.

115
00:07:04,330 --> 00:07:08,870
Languages I have there's actually, two languages in iOS now.

116
00:07:08,870 --> 00:07:12,040
There are peers that you can pretty much use either one.

117
00:07:12,040 --> 00:07:14,070
One of them is called Objective-C,

118
00:07:14,080 --> 00:07:17,710
that's the language that iOS was originally developed for.

119
00:07:17,710 --> 00:07:22,550
It's a language been around a long time, probably 30 years it's been around or 25

120
00:07:22,550 --> 00:07:27,120
to 30 years that's it's actually been used to build stuff that's on the Mac today.

121
00:07:27,120 --> 00:07:32,190
So, it's very mature language but it's also 25, 30 years old.

122
00:07:32,190 --> 00:07:36,960
And so Apple last summer introduced a completely new language called Swift, and

123
00:07:36,960 --> 00:07:40,660
Swift, you can do pretty much everything in iOS with Swift

124
00:07:40,670 --> 00:07:45,170
that's the language we're gonna learn because it's a modern language.

125
00:07:45,170 --> 00:07:48,700
Apple did a great job of kind of, building all the best stuff of

126
00:07:48,710 --> 00:07:52,340
all the languages that have been invented over the last, you know,

127
00:07:52,340 --> 00:07:57,680
25 years of this especially the last five or ten years into this language.

128
00:07:57,680 --> 00:08:02,980
It's very concise it's a very type safe language but has type inference and a lot

129
00:08:02,990 --> 00:08:06,990
of things that make it so that you get the best of both worlds by having type safety-

130
00:08:06,990 --> 00:08:11,290
And not have to be constantly over specifying everything.

131
00:08:11,290 --> 00:08:14,660
So we're gonna go Swift only, I'm not even gonna really talk about Objective-C,

132
00:08:14,660 --> 00:08:16,400
I just don't have time to do both languages.

133
00:08:16,400 --> 00:08:19,780
Yeah. >>

134
00:08:23,170 --> 00:08:26,270
>> Yeah, so the question is if I'm going out into the world to do

135
00:08:26,270 --> 00:08:29,240
iOS development in the real world for real companies.

136
00:08:29,240 --> 00:08:30,910
Am I probably, gonna have to learn Objective-C?

137
00:08:30,910 --> 00:08:34,040
And the answer is it depends on the company you're at.

138
00:08:34,050 --> 00:08:36,010
Probably in the short term, yes.

139
00:08:36,010 --> 00:08:39,920
But as the time goes by probably, more and more people switch to siff, Swift.

140
00:08:39,920 --> 00:08:43,490
The good thing is the underlying iOS

141
00:08:43,490 --> 00:08:45,920
APIs are exactly the same for both, its just the syntax-

142
00:08:45,920 --> 00:08:49,160
Of the language a little bit

143
00:08:49,160 --> 00:08:52,390
about how the language approaches calling the API is slightly different, but any,

144
00:08:52,400 --> 00:08:54,730
everything that you learn in here about the underlying,

145
00:08:54,730 --> 00:08:57,630
lying parts of iOS will totally work in Objective-C.

146
00:08:57,630 --> 00:08:59,570
All the methods are the same you know,

147
00:08:59,570 --> 00:09:00,930
it's just the syntax is a little different.

148
00:09:00,940 --> 00:09:02,540
So, don't feel too bad about not

149
00:09:02,540 --> 00:09:05,270
learning both languages, and once you've learned this language,

150
00:09:05,270 --> 00:09:07,910
learning Objective-C is gonna be pretty easy, too.

151
00:09:07,910 --> 00:09:11,810
So. Good question though. All right.

152
00:09:11,810 --> 00:09:14,610
Of course iOS is filled with tons of frameworks.

153
00:09:14,610 --> 00:09:18,320
Frameworks are libraries, basically, of objects that you use,

154
00:09:18,320 --> 00:09:20,980
as building blocks to build your application.

155
00:09:20,990 --> 00:09:23,320
And we are going to be covering them.

156
00:09:23,320 --> 00:09:25,190
UIKit is the main one.

157
00:09:25,190 --> 00:09:27,820
It's got most of the user interface stuff in it.

158
00:09:27,830 --> 00:09:32,260
Foundation is that most the Core Service layer that I was talking about,

159
00:09:32,260 --> 00:09:37,070
and but there's tons of other ones, Core Motion for doing the, the device moving

160
00:09:37,070 --> 00:09:42,070
around, you know, gyro and accelerometer, Core Data for Object-Oriented database.

161
00:09:42,070 --> 00:09:44,960
Things like that.

162
00:09:44,960 --> 00:09:47,840
So I'll get to, as many as those as I can, especially the big ones.

163
00:09:47,840 --> 00:09:50,840
But there's just way too many to cover in ten weeks.

164
00:09:51,850 --> 00:09:58,180
And finally we I, I put this, as a first class thing with all the rest, as a design strategy MVC.

165
00:09:58,190 --> 00:10:01,120
I think, I usually ask, I'll all ask this year, too.

166
00:10:01,120 --> 00:10:05,360
How many people have used MVC in some other class?

167
00:10:05,360 --> 00:10:07,190
See, so it's half of you.

168
00:10:07,190 --> 00:10:09,690
So I'll be teaching MVC, as if you don't know it, so

169
00:10:09,700 --> 00:10:11,590
if you don't know it don't worry.

170
00:10:11,600 --> 00:10:15,630
But MVC is a way of designing your application so that it's a little more

171
00:10:15,630 --> 00:10:21,140
debuggable, reusable understandable to you and to anyone reading your code.

172
00:10:21,140 --> 00:10:25,270
And iOS was designed with MVC from the start.

173
00:10:25,280 --> 00:10:28,210
So it's just integral part to building an iOS.

174
00:10:28,210 --> 00:10:33,450
Now, I'm gonna do the demo today, and on Wednesday I'm kinda not gonna follow MVC.

175
00:10:33,450 --> 00:10:37,920
But then next Monday we're gonna apply MVC to the demo I'm doing today and

176
00:10:37,920 --> 00:10:41,420
Wednesday, so you're gonna get the full MVC treatment there.

177
00:10:41,420 --> 00:10:45,260
And I'll be having some slides on MVC on Wednesday to prepare you for next Monday.

178
00:10:46,830 --> 00:10:49,690
Okay? All right, so here's the demo.

179
00:10:49,700 --> 00:10:53,930
The demo I'm gonna do, is something I actually did a few years ago that really works well-

180
00:10:53,930 --> 00:10:55,970
With Swift, which is a calculator.

181
00:10:55,970 --> 00:10:57,370
So, we're gonna build this calculator.

182
00:10:57,370 --> 00:11:00,500
And we're gonna build it from scratch, all the way.

183
00:11:00,510 --> 00:11:04,540
And I like to do my demos, where I only type in stuff, I don't copy and

184
00:11:04,540 --> 00:11:06,910
paste big chunks of code in or whatever.

185
00:11:06,910 --> 00:11:09,810
I know, I'd see a lot of laptops open, a lot of people like to try and

186
00:11:09,810 --> 00:11:12,730
follow along with me.

187
00:11:12,730 --> 00:11:15,650
I'm a fast typer, but usually in most demos you can keep, keep up if you want.

188
00:11:15,650 --> 00:11:20,420
I don't recommend it necessarily, or certainly I don't require it.

189
00:11:20,420 --> 00:11:28,400
I am going to, you, you'll be able to go back and watch this particular demo on video.

190
00:11:28,400 --> 00:11:30,530
Even Stanford people will be able to do that.

191
00:11:30,530 --> 00:11:34,800
Because your first assignment is gonna be to reproduce what I do.

192
00:11:34,800 --> 00:11:37,040
'Kay? That is 90% of your first assignment.

193
00:11:37,040 --> 00:11:40,270
Reproduce what I'm gonna do, today and on Wednesday.

194
00:11:40,270 --> 00:11:42,940
So I'm not gonna post the code because I want you to go through the experience of

195
00:11:42,940 --> 00:11:45,610
typing the code in, and if you watch in on video,

196
00:11:45,610 --> 00:11:51,210
watching what I do again, and and typing it all in. 'Kay?

197
00:11:51,220 --> 00:11:56,340
And I'll explain that all on Wednesday. Okay?

198
00:11:56,340 --> 00:11:58,220
So, I put on the slide a bunch of things that I'm gonna cover, but I'm not gonna go

199
00:11:58,220 --> 00:12:01,620
over it in advance, I'm just gonna sit, sit and soon I'll start doing it.

200
00:12:01,630 --> 00:12:04,490
So any questions before I dive in here?

201
00:12:04,500 --> 00:12:08,400
I know we're gonna little fast, but I wanna maximize your learning time.

202
00:12:11,870 --> 00:12:12,770
Direct of what?

203
00:12:14,700 --> 00:12:18,140
So the question is, which Xcode should we use, should you use?

204
00:12:18,140 --> 00:12:20,810
Well, you should just use the one on the Mac App Store.

205
00:12:20,810 --> 00:12:23,240
So, just go to the Mac App Store, it's free.

206
00:12:23,240 --> 00:12:25,480
Use the one there, whatever the latest one is.

207
00:12:25,480 --> 00:12:28,610
If a new one comes out in the quarter, well, let's all switch over to it.

208
00:12:28,620 --> 00:12:30,620
Okay, let's just always be using the latest Xcode.

209
00:12:30,620 --> 00:12:31,350
'Kay any-

210
00:12:32,620 --> 00:12:35,620
Not. We're not gonna using a beta or anything like that.

211
00:12:35,620 --> 00:12:37,390
We'll just use whatever the currently published Xcode is.

212
00:12:38,990 --> 00:12:41,740
Okay.

213
00:12:41,740 --> 00:12:44,490
So, I'm going to start this demo actually by launching Xcode.

214
00:12:44,500 --> 00:12:50,660
So, here it is, right here. Xcode.

215
00:12:50,670 --> 00:12:53,270
And when you launch Xcode, let's hide others here.

216
00:12:53,270 --> 00:12:55,140
You're gonna get this splash screen and

217
00:12:55,140 --> 00:12:58,370
on this splash screen on the right, this is gonna be all your projects.

218
00:12:58,370 --> 00:13:00,710
Now, since it's the beginning of the quarter, we don't have any projects yet,

219
00:13:00,710 --> 00:13:04,040
but they'll all be listed here, so as the quarter goes by this will fill up.

220
00:13:04,050 --> 00:13:07,280
You can turn this splash screen off, if you don't like it by the way.

221
00:13:07,280 --> 00:13:10,820
This splash screen also lets us do things like playgrounds and

222
00:13:10,820 --> 00:13:13,250
a source code management right down here.

223
00:13:13,250 --> 00:13:15,020
We're not gonna be doing that for a while.

224
00:13:15,020 --> 00:13:16,850
We're gonna be focusing on this option, right here.

225
00:13:16,860 --> 00:13:18,760
Create a new Xcode project.

226
00:13:18,760 --> 00:13:23,740
If you don't have the splash screen, you can go to File > New > Project. Kay.

227
00:13:23,740 --> 00:13:25,030
Same thing, those both the same thing.

228
00:13:25,030 --> 00:13:28,460
So I'm gonna click right here on Create a new project.

229
00:13:28,470 --> 00:13:31,600
When I create a new project, it wants to know what kind of project you want to create,

230
00:13:31,600 --> 00:13:38,490
because Xcode is actually used on Mac OS X and to build frameworks and all that stuff.

231
00:13:38,490 --> 00:13:41,070
But we're always gonna be building iOS Applications.

232
00:13:41,080 --> 00:13:43,380
And in fact, we're always gonna use this template right here,

233
00:13:43,380 --> 00:13:47,230
Single View Application.'Kay?

234
00:13:47,230 --> 00:13:49,680
That's kind of your basic MVC starter application and

235
00:13:49,690 --> 00:13:53,720
we're gonna build very complicated apps out of that, but we're gonna start here,

236
00:13:53,720 --> 00:13:55,590
so you always click on that one.

237
00:13:55,590 --> 00:13:58,520
Then it wants to know what you want to call your app, and

238
00:13:58,530 --> 00:14:04,630
we're building a calculator, so we're gonna call our app, Calculator.'Kay?

239
00:14:04,630 --> 00:14:06,660
This organization name doesn't really matter that's just gonna appear in

240
00:14:06,670 --> 00:14:10,330
copyright notice and the code that you write at the top in a comment so

241
00:14:10,340 --> 00:14:12,290
don't worry about that.

242
00:14:12,290 --> 00:14:14,240
But this organization identifier that is very important.

243
00:14:14,240 --> 00:14:19,230
'Kay, this uniquely identifies you. Okay?

244
00:14:19,230 --> 00:14:20,840
So that on the next line we can you just,

245
00:14:20,850 --> 00:14:23,950
new uniquely idefy, identify your calculator.

246
00:14:23,950 --> 00:14:26,210
So here if your a Stanford student,

247
00:14:26,220 --> 00:14:31,490
you'll wanna use this reverse DNS notation here edu.stanford.cs1983p.

248
00:14:31,490 --> 00:14:36,660
And instead of instructor there, you wanna put your SU net ID.'Kay?

249
00:14:36,660 --> 00:14:37,920
Cuz nobody else has that but you.

250
00:14:37,930 --> 00:14:39,860
And that'll uniquely identify you.

251
00:14:40,900 --> 00:14:44,200
As I said, we're using Swift not Objective-C.

252
00:14:44,200 --> 00:14:49,270
And we're gonna build an app that works be, equally well on iPad and iPhone,

253
00:14:49,270 --> 00:14:51,500
that's called a universal app.

254
00:14:51,500 --> 00:14:54,200
You can pick to develop for only one or the other.

255
00:14:54,210 --> 00:14:56,740
But we are going to go Universal here.

256
00:14:56,740 --> 00:15:00,240
We're not gonna really be doing the iPad part of it for a couple weeks.

257
00:15:00,250 --> 00:15:04,350
But it is our intent to eventually build an app that works on both.

258
00:15:04,350 --> 00:15:06,180
Okay we're not going to be using Core Data,

259
00:15:06,180 --> 00:15:09,320
that's object oriented database stuff so you just leave that unchecked.

260
00:15:09,320 --> 00:15:13,990
And now it's asking where we want to save it, I strongly recommend saving in your

261
00:15:13,990 --> 00:15:18,990
home directory, this is my home directory here in a folder called Developer, okay?

262
00:15:19,000 --> 00:15:22,000
You could put other folders in here if you want to arrange it more,

263
00:15:22,000 --> 00:15:25,100
but home directory Developer, I highly recommend that.

264
00:15:25,100 --> 00:15:28,270
Source Control, we will be talking about that at some point in the quarter but

265
00:15:28,270 --> 00:15:30,140
we're not gonna do it right off the bat here so

266
00:15:30,140 --> 00:15:31,770
you can leave that unchecked as well.

267
00:15:33,040 --> 00:15:37,840
All right, so here's our first project, its been created so

268
00:15:37,840 --> 00:15:43,580
this is Xcode that your seeing right here, this is Xcode's main screen and

269
00:15:43,580 --> 00:15:46,950
the center is really what your working on.

270
00:15:46,950 --> 00:15:51,020
The left is, area here, is called the navigator, and the navigator you,

271
00:15:51,020 --> 00:15:54,820
you use to kind of choose what you're working on but you can also do

272
00:15:54,830 --> 00:15:59,360
things over here like search hough your whole project, that's this little guy.

273
00:15:59,360 --> 00:16:04,830
Look at all your break points maybe, look at previous builds that you've done,

274
00:16:04,840 --> 00:16:09,070
browse your project by class hierarchy, all that stuff.

275
00:16:09,070 --> 00:16:12,310
But we're usually on the left most one here which is just all of the files in

276
00:16:12,310 --> 00:16:17,750
your project which can also can be organized hierarchically like this.

277
00:16:17,750 --> 00:16:19,580
And when you select something here on the left,

278
00:16:19,580 --> 00:16:23,580
the middle will fill up with what that you've selected so.

279
00:16:23,590 --> 00:16:26,590
Here I have the actual project itself selected.

280
00:16:26,590 --> 00:16:28,990
So these are the project settings of which there are tons.

281
00:16:28,990 --> 00:16:31,660
All along the top here you can see tons of settings.

282
00:16:31,660 --> 00:16:34,430
We're, we'll go through them as the quarter goes on and

283
00:16:34,430 --> 00:16:37,100
you've already seen some of them like the bundle identifier there and

284
00:16:37,100 --> 00:16:38,700
the fact this is a universal app.

285
00:16:38,700 --> 00:16:41,030
We're not going to talk about anymore of this today,

286
00:16:41,030 --> 00:16:42,800
this project settings business.

287
00:16:42,800 --> 00:16:45,100
We're gonna focus here on some of these files.

288
00:16:45,100 --> 00:16:47,400
And even some of these files, like this AppDelegate,

289
00:16:47,410 --> 00:16:50,840
I'm just gonna move that down to Supporting Files to get it out of the way.

290
00:16:50,840 --> 00:16:53,080
Same things with these image assets,

291
00:16:53,080 --> 00:16:56,110
LaunchScreen well get to this later in the quarter.

292
00:16:56,110 --> 00:16:58,280
But I wanna focus on these two files right here.

293
00:16:58,280 --> 00:17:03,950
Okay Main.storyboard and ViewController.swift, okay

294
00:17:03,950 --> 00:17:06,190
In the MVC world by the way, this is the V,

295
00:17:06,190 --> 00:17:10,890
the view and this is the C, the controller but we will talk about MVC on Wednesday.

296
00:17:11,990 --> 00:17:13,660
So what do these things contain?

297
00:17:13,660 --> 00:17:16,230
So this Main.storyboard, if I click on it,

298
00:17:16,230 --> 00:17:18,930
you see it appear in the middle, this is our UI.

299
00:17:19,970 --> 00:17:21,970
Okay, this is our user interface.

300
00:17:21,970 --> 00:17:23,970
So for a calculator this is going to be a little display,

301
00:17:23,970 --> 00:17:27,810
this shows the number that we're working on or whatever at the top.

302
00:17:27,810 --> 00:17:32,440
And lots of buttons down here, number buttons, times, multi, or sorry, times,

303
00:17:32,450 --> 00:17:34,910
divide, plus, minus, square root.

304
00:17:34,910 --> 00:17:36,450
That's all going to be here.

305
00:17:36,450 --> 00:17:39,520
So we're going to build this entire user interface.

306
00:17:39,520 --> 00:17:41,050
Purely graphically.

307
00:17:41,050 --> 00:17:43,050
Okay? We're not gonna be writing code.

308
00:17:43,050 --> 00:17:45,250
Put button at this location.

309
00:17:45,260 --> 00:17:47,410
None of that, okay?

310
00:17:47,410 --> 00:17:49,560
We just literally with our mouse are gonna build this whole user interface.

311
00:17:50,490 --> 00:17:53,700
So what's the code, what do we need any code for?

312
00:17:53,700 --> 00:17:57,200
Well, we, this ViewController.swift, this is a Swift file.

313
00:17:57,200 --> 00:18:00,530
This is your first look at Swift for most of you.

314
00:18:00,540 --> 00:18:03,100
This controller is gonna control that user interface.

315
00:18:03,110 --> 00:18:05,870
That's why we call it the view controller or the controller.

316
00:18:05,870 --> 00:18:09,180
It controls user interface and that means it's gonna do things that

317
00:18:09,180 --> 00:18:13,650
are specific to how this user interface, a calculator's user interface, works.

318
00:18:13,650 --> 00:18:16,720
So when we press the digit buttons, it's going to have update the display.

319
00:18:16,720 --> 00:18:19,850
When we press times, it's gonna have to do some multiplication and

320
00:18:19,850 --> 00:18:21,520
then put the result in the display.

321
00:18:21,520 --> 00:18:24,220
So it's controlling the display.

322
00:18:24,220 --> 00:18:28,590
Okay so we'll get back to this code in a moment but we're gonna start by

323
00:18:28,590 --> 00:18:33,800
building our user interface and by the way, your user interface, you can see I

324
00:18:33,800 --> 00:18:39,140
have a low resolution screen here so my UI doesn't even really fit in the space here.

325
00:18:39,140 --> 00:18:42,670
You'll probably have maybe a little higher resolution screen then I do but

326
00:18:42,670 --> 00:18:45,970
if you don't, you can zoom in and out, I'm just right-clicking,

327
00:18:45,980 --> 00:18:49,510
if you right-click on the background area here, you can zoom in and out.

328
00:18:49,510 --> 00:18:52,650
You can also do it by double-clicking so if I double-click on this,

329
00:18:52,650 --> 00:18:56,120
it zooms it to normal, if I double-click on the background, it zooms out so

330
00:18:56,120 --> 00:18:57,520
that way I can see my whole UI.

331
00:18:57,520 --> 00:18:59,990
Now when we build a complicated app

332
00:18:59,990 --> 00:19:05,660
we're gonna have a whole bunch of these little square areas, we call these scenes,

333
00:19:05,660 --> 00:19:11,400
and a scene represents kind of phone full, phone screen full of information.

334
00:19:11,400 --> 00:19:15,070
Okay and as you you've used many iOS applications, you know that you

335
00:19:15,070 --> 00:19:20,440
transition from one screen to another as the user goes through the app and

336
00:19:20,440 --> 00:19:22,110
that's how your gonna build your apps as well.

337
00:19:22,110 --> 00:19:25,980
And this StoryBoard is eventually gonna have a big map showing all

338
00:19:25,980 --> 00:19:28,950
the transitions between all those scenes.

339
00:19:28,950 --> 00:19:31,010
Okay, so this StoryBoard is gonna get big for

340
00:19:31,020 --> 00:19:35,320
big apps, your really gonna see your whole application which is kinda cool.

341
00:19:36,350 --> 00:19:39,890
So we're gonna start small though, just this one little screen right here.

342
00:19:39,890 --> 00:19:41,360
Which is gonna be our calculator.

343
00:19:41,360 --> 00:19:44,860
So let's start building our calculator with it's display.

344
00:19:44,860 --> 00:19:45,990
So I wanna make a display.

345
00:19:46,000 --> 00:19:47,910
So how do I do that?

346
00:19:47,910 --> 00:19:49,830
Well that brings us to the right side, the right-hand side here,

347
00:19:49,830 --> 00:19:53,930
this whole right side, this is called the Utilities area

348
00:19:53,940 --> 00:19:56,670
You can see that's it's got a bottom and a top, right?

349
00:19:56,670 --> 00:20:01,970
We want to go into the bottom and on the third tab right here, which is called

350
00:20:01,980 --> 00:20:07,810
the Object Library, you'll see that there's tons and tons of objects in here.

351
00:20:07,820 --> 00:20:09,880
Okay, dozens of these things and

352
00:20:09,880 --> 00:20:13,020
we're gonna get to a lot of these by the end of the quarter.

353
00:20:13,020 --> 00:20:15,990
But these are the things you build your user interface out of.

354
00:20:15,990 --> 00:20:19,360
So kind of towards the top, not all the way at the top, but towards the top,

355
00:20:19,360 --> 00:20:22,730
you'll start seeing things like buttons and text fields and things like that.

356
00:20:22,730 --> 00:20:26,400
Well this is what we need obviously, to build our display here,

357
00:20:26,400 --> 00:20:28,530
is some sort of text field, and there's a couple of them here.

358
00:20:28,530 --> 00:20:32,140
One, this one called Label is static text, you see?

359
00:20:32,140 --> 00:20:37,010
And this one Text Field is editable text, in other words you can touch on this one.

360
00:20:37,010 --> 00:20:39,840
And the little keyboard would slide up from the bottom and you could type in it.

361
00:20:39,840 --> 00:20:43,600
So, the calculator, you can't really touch on the screen and start typing

362
00:20:43,600 --> 00:20:45,010
so we want this static text.

363
00:20:45,020 --> 00:20:48,720
So, I'm just going to pick this up with the mouse and drag it out.

364
00:20:48,720 --> 00:20:50,990
Now, when I drag it out into my UI,

365
00:20:50,990 --> 00:20:53,250
you're going to see a lot of little blue dash lines appearing.

366
00:20:53,260 --> 00:20:55,220
You see these?

367
00:20:55,220 --> 00:20:57,190
These are helping me put this in the right place.

368
00:20:57,190 --> 00:21:00,790
So, I can put it right in the center, for example, of my view.

369
00:21:01,730 --> 00:21:04,330
I could put it up in a corner up here, which is what I'm gonna do.

370
00:21:04,330 --> 00:21:05,660
Mm-kay.

371
00:21:05,670 --> 00:21:10,070
You always want your things that you put in your UI,

372
00:21:10,070 --> 00:21:14,640
as much as humanly possible, to be on one of these dashed blue lines.

373
00:21:14,640 --> 00:21:18,090
And you'll understand why in a couple weeks when we starting talking about Auto Layout.

374
00:21:18,090 --> 00:21:19,740
I'm gonna do a little Auto Layout right here just to kind of

375
00:21:19,750 --> 00:21:21,250
give you a feel for it.

376
00:21:21,250 --> 00:21:24,950
But those blue, dashed blue lines are gonna be your best friend when it comes to

377
00:21:24,950 --> 00:21:28,320
building your user interface and you'll quickly see why that is.

378
00:21:28,320 --> 00:21:30,690
Once you drag something out like this, you can,

379
00:21:30,690 --> 00:21:34,060
these little things are rounded that show it's selected, right?

380
00:21:34,060 --> 00:21:37,460
They also are little resize handles so you can grab them and resize them.

381
00:21:37,460 --> 00:21:42,230
When you resize it also re-puts those dashed blue lines out there, okay?

382
00:21:42,230 --> 00:21:43,960
So you definitely wanna, even have,

383
00:21:43,970 --> 00:21:47,100
when you're resizing, get those things lining up.

384
00:21:47,100 --> 00:21:49,970
You can also manipulate it directly, just double-click on it.

385
00:21:49,970 --> 00:21:54,140
like a calculator probably doesn't want to come up, this is gonna be initial state of this.

386
00:21:54,140 --> 00:21:58,340
Doesn't want to come up saying Label, it probably wants 0 or

387
00:21:58,350 --> 00:22:01,310
something like that in it's display.

388
00:22:01,320 --> 00:22:04,350
There's also things you wanna set about this though or

389
00:22:04,350 --> 00:22:08,250
anything you drag in your UI that you just can't direct manipulate and

390
00:22:08,260 --> 00:22:12,260
that's what the top half of this Utilities windows is, is for, okay?

391
00:22:12,260 --> 00:22:13,820
So if you look at the top half here,

392
00:22:13,830 --> 00:22:17,060
there's a bunch of tabs across the top including something like this,

393
00:22:17,060 --> 00:22:20,030
the Size Inspector for setting the size of this thing.

394
00:22:20,030 --> 00:22:24,300
And this tab right here, really important, this is the Attributes Inspector.

395
00:22:24,300 --> 00:22:27,900
And this is an object oriented inspector, depending on what you have selected.

396
00:22:27,910 --> 00:22:30,610
You'll have different user interface here in the top.

397
00:22:30,610 --> 00:22:33,880
And this let's you edit attributes about what's selected.

398
00:22:33,880 --> 00:22:34,880
So, for example,

399
00:22:34,880 --> 00:22:37,880
a calculator, the zero doesn't really want to be on the left, right?

400
00:22:37,880 --> 00:22:40,650
Calculators, the zero, the numbers are on the right and

401
00:22:40,650 --> 00:22:43,580
they kind of grow out from the right.

402
00:22:43,590 --> 00:22:47,420
And so we can easily fix that with this Alignment thing right here.

403
00:22:47,420 --> 00:22:50,590
So I'm gonna click this and you see the zero move over to the right.

404
00:22:50,590 --> 00:22:52,130
And, and maybe I want a bigger font.

405
00:22:52,130 --> 00:22:53,230
You see the Font right here.

406
00:22:53,230 --> 00:22:55,660
I can click on this, pick different fonts.

407
00:22:55,660 --> 00:22:59,470
I'm gonna just move it up to like 32 point, it's a nice big font.

408
00:22:59,470 --> 00:23:00,930
You can notice it kinda cuts off.

409
00:23:00,930 --> 00:23:02,570
I made it so big that it's too small.

410
00:23:02,570 --> 00:23:06,970
So I can always just resize this larger to make that fit.

411
00:23:08,470 --> 00:23:10,340
So this is how we build our user interface.

412
00:23:10,340 --> 00:23:14,940
It's very direct manipulation and very object oriented as you'll start to

413
00:23:14,950 --> 00:23:17,450
see when we add different kinds of objects.

414
00:23:17,450 --> 00:23:20,180
So, let's actually run this application, okay?

415
00:23:20,180 --> 00:23:22,950
We haven't done, built any calculaterness about it,

416
00:23:22,950 --> 00:23:25,990
but we have this one field, let's run it and see what it looks like.

417
00:23:25,990 --> 00:23:27,220
So, how do you run things?

418
00:23:27,220 --> 00:23:29,560
Well, you see right here where it says, iPhone 6?

419
00:23:29,560 --> 00:23:33,330
This actually is a selector that lets you say where you want to

420
00:23:33,330 --> 00:23:35,160
run your application.

421
00:23:35,160 --> 00:23:38,630
So you can see you can run it on an iOS device if you have one connected,

422
00:23:38,630 --> 00:23:40,270
I don't have one connected currently.

423
00:23:41,270 --> 00:23:43,050
But you can do that.

424
00:23:43,050 --> 00:23:44,840
And we'll talk in a Friday section probably in a week or

425
00:23:44,840 --> 00:23:48,470
two about how to get your devices hooked up.

426
00:23:48,480 --> 00:23:52,940
But also there's these plethora of simulators here, iPhone 6,

427
00:23:52,950 --> 00:23:56,550
6+, iPhone 5, iPhone 4s, iPad Airs.

428
00:23:56,550 --> 00:23:58,920
And you can pick one of these to run on and

429
00:23:58,920 --> 00:24:02,490
it'll actually simulate that device right here on your computer.

430
00:24:02,490 --> 00:24:05,820
So I'm gonna run on the iPhone 6.

431
00:24:05,820 --> 00:24:08,720
Okay,I'm just gonna hit Play, see this Play button right here?

432
00:24:08,730 --> 00:24:11,490
That's how you simulate, so Play.

433
00:24:11,500 --> 00:24:12,930
Now it's launching the simulator.

434
00:24:12,930 --> 00:24:14,600
It's a separate process.

435
00:24:14,600 --> 00:24:16,160
And it's going to run our App in there.

436
00:24:16,170 --> 00:24:17,400
And there it is.

437
00:24:17,400 --> 00:24:18,730
Now you might say, whoop.

438
00:24:18,730 --> 00:24:19,900
Big white square.

439
00:24:19,900 --> 00:24:21,330
Oh that's not so good.

440
00:24:21,340 --> 00:24:23,820
And the reason this is so

441
00:24:23,820 --> 00:24:26,310
big is because the iPhone 6 has a very high resolution display on it.

442
00:24:26,310 --> 00:24:30,880
Okay, the retina display, and it's way higher resolution than my computer, okay?

443
00:24:30,880 --> 00:24:35,150
So I actually have to scroll around, you see there's the top of it.

444
00:24:35,150 --> 00:24:37,750
Scroll up and down to get to it all.

445
00:24:37,750 --> 00:24:42,550
Luckily if you go to Window, this is not in the simulator now, the iOS simulator.

446
00:24:42,560 --> 00:24:46,620
If you go to Window and Scale, you can scale it down to be smaller and

447
00:24:46,630 --> 00:24:47,760
then it'll fit.

448
00:24:47,760 --> 00:24:49,490
Okay, so if you have a low resolution screen,

449
00:24:49,490 --> 00:24:51,530
you're definitely gonna wanna use Window > Scale.

450
00:24:51,530 --> 00:24:54,360
Cmd+3 right there is another way to do it.

451
00:24:54,370 --> 00:24:55,150
Okay?

452
00:24:55,150 --> 00:25:00,930
So here's our UI, but it doesn't look to good, okay, because where's this?

453
00:25:00,940 --> 00:25:05,010
We put this zero in there and it just never showed up, what did we do wrong?

454
00:25:05,010 --> 00:25:08,780
Well we didn't really do anything wrong and that zero is actually there.

455
00:25:08,780 --> 00:25:11,750
It's just here. Let me line up these UI's, this is not

456
00:25:11,750 --> 00:25:16,550
necessarily exactly the same scale but its appropriate, approximately the same scale,

457
00:25:16,550 --> 00:25:19,850
you can see that the zero is actually off screen, [NOISE] okay?

458
00:25:19,850 --> 00:25:24,020
So its there but you just can't see it because its over here off the screen.

459
00:25:24,030 --> 00:25:28,460
Okay, and that's a problem, but that's a problem we can fix.

460
00:25:28,460 --> 00:25:29,730
So let's go fix that problem.

461
00:25:31,300 --> 00:25:32,530
Why is that thing off-screen?

462
00:25:32,530 --> 00:25:35,830
Well, look at this UI right here, okay?

463
00:25:35,830 --> 00:25:36,830
What shape is it?

464
00:25:36,840 --> 00:25:38,370
It's square.

465
00:25:38,370 --> 00:25:40,900
Okay, no iOS device is square.

466
00:25:40,910 --> 00:25:43,540
There's not a single square iOS device in the world.

467
00:25:43,540 --> 00:25:46,070
They're all, you know, tall and thin,

468
00:25:46,080 --> 00:25:48,580
or, if you turn them sideways, then they're long and short.

469
00:25:48,580 --> 00:25:50,650
Or even like an iPad.

470
00:25:50,650 --> 00:25:52,710
You know the aspect ratio on an iPad is slightly different than an iPhone so

471
00:25:52,720 --> 00:25:55,580
their all slightly different, but none of them are square.

472
00:25:55,590 --> 00:25:58,650
So why do we design our UI in a square?

473
00:25:58,650 --> 00:26:03,760
Because the way you design iOS interfaces, you design them in this square and

474
00:26:03,760 --> 00:26:09,030
you give everything inside the square rules, called constraints,

475
00:26:09,030 --> 00:26:12,230
about what happens to them when they get squished down.

476
00:26:12,230 --> 00:26:15,500
Either squished down vertically, squished down horizontally,

477
00:26:15,500 --> 00:26:18,500
depending on what kinda device their getting put on, okay?

478
00:26:18,510 --> 00:26:22,910
So you put these rules in there, so, what does it look like to put these rules in?

479
00:26:22,910 --> 00:26:25,110
Well again, it's all direct manipulation

480
00:26:25,110 --> 00:26:31,180
So I'm going to give some rules to this label right here to make it so that it knows

481
00:26:31,180 --> 00:26:36,950
what to do when this square gets squished down in any direction for any device.

482
00:26:36,950 --> 00:26:38,650
So, what do I want the rules to be?

483
00:26:38,660 --> 00:26:42,160
Well, I always want this thing to use the whole width.

484
00:26:42,160 --> 00:26:44,930
However much width I have, I want it all.

485
00:26:44,930 --> 00:26:50,100
So I'm gonna pin this right edge to this edge, okay?

486
00:26:50,100 --> 00:26:53,200
I'm gonna make it so all widths are pinned to each other.

487
00:26:53,200 --> 00:26:55,000
And I do that with the Ctrl key.

488
00:26:55,000 --> 00:26:57,550
I've turned on sticky keys so

489
00:26:57,560 --> 00:27:00,110
you can see down in the lower left here, it's showing the modifier keys I'm using.

490
00:27:00,110 --> 00:27:02,210
So right now I'm holding down Ctrl.

491
00:27:02,210 --> 00:27:08,480
And I'm gonna Ctrl+drag from the right edge of this to the container it's in.

492
00:27:08,480 --> 00:27:11,820
See how it's showing me what I'm dragged to.

493
00:27:11,820 --> 00:27:15,120
So when I drag to this container, it puts a menu up and says,

494
00:27:15,120 --> 00:27:20,830
oh, okay, you want some rule between that label's right edge and

495
00:27:20,830 --> 00:27:23,990
this thing's edge, what do you want it to be?

496
00:27:24,000 --> 00:27:26,560
Well, I can do a lot of things here.

497
00:27:26,560 --> 00:27:29,130
I could center this label vertically in this container.

498
00:27:29,130 --> 00:27:31,590
Up, you know, vertical up and down.

499
00:27:31,590 --> 00:27:34,040
I definitely don't want that, I want my label at the top, so I don't want that.

500
00:27:34,040 --> 00:27:34,770
I can make it the equal width,

501
00:27:34,770 --> 00:27:38,470
So I can make this label the same width as the container.

502
00:27:38,480 --> 00:27:42,040
I don't want that either, cuz I want this little margin there, right?

503
00:27:42,050 --> 00:27:45,780
But look at the top one, trailing space to container margin.

504
00:27:45,780 --> 00:27:51,150
This lets me pin the trailing space after my label to the margin of the container.

505
00:27:51,150 --> 00:27:55,190
So that's the one I want, so I'm gonna click on this and it does it.

506
00:27:55,190 --> 00:27:59,660
Now, see all these yellow and orange lines that appeared when I did that?

507
00:27:59,660 --> 00:28:04,400
That's because the systems like, okay, you've started telling me the rules for this label,

508
00:28:04,400 --> 00:28:06,500
but your you haven't told me enough rules,

509
00:28:06,500 --> 00:28:08,000
I don't know what to do with this thing.

510
00:28:08,000 --> 00:28:11,140
So now it's showing you all the places where it's like the system's not

511
00:28:11,140 --> 00:28:13,310
sure what to do now when this thing gets squished.

512
00:28:13,310 --> 00:28:15,740
Before it was like, okay, well you weren't telling me anything so

513
00:28:15,740 --> 00:28:18,080
I'm not going to do anything, but now your starting to tell me.

514
00:28:18,080 --> 00:28:19,640
So what do I do?

515
00:28:19,650 --> 00:28:24,350
So we have to fully specify both the what happens horizontally and

516
00:28:24,350 --> 00:28:25,520
vertically to this thing.

517
00:28:25,520 --> 00:28:27,420
So we've only just started here.

518
00:28:27,420 --> 00:28:31,220
So let's pin this edge also cuz we want this edge to stay on this side.

519
00:28:31,220 --> 00:28:34,520
So I'm gonna hold down Ctrl and drag.

520
00:28:34,530 --> 00:28:38,960
And now I'm gonna pin the leading space to the container margin.

521
00:28:38,960 --> 00:28:41,100
Okay, boom that did that.

522
00:28:41,100 --> 00:28:44,670
Still have orange going on here, that's because I haven't specified anything about

523
00:28:44,670 --> 00:28:49,670
the vertical position of this label so I'm gonna pin the top to the top, so

524
00:28:49,670 --> 00:28:54,210
hold Ctrl again, drag up here, this is now top space.

525
00:28:54,210 --> 00:28:58,880
Notice that it realizes where I am dragging to and from, right?

526
00:28:58,880 --> 00:29:00,980
So they can give me options that make sense,

527
00:29:00,980 --> 00:29:03,180
like Top Space to Layout Guide here.

528
00:29:03,180 --> 00:29:04,920
So I'm going to do that.

529
00:29:04,920 --> 00:29:06,480
So now I'm starting to get blue lines.

530
00:29:06,490 --> 00:29:07,480
You see these lines?

531
00:29:07,490 --> 00:29:08,650
I hope you can see that there.

532
00:29:08,650 --> 00:29:11,490
They're solid blue, not orange or red.

533
00:29:11,490 --> 00:29:16,230
Okay, that's because they're okay, we are okay horizontally here.

534
00:29:16,230 --> 00:29:18,330
But we still have a problem vertically.

535
00:29:18,330 --> 00:29:21,330
Now I'm not sure exactly what the problem is vertically cuz I really don't

536
00:29:21,330 --> 00:29:23,530
want the bottom of this.

537
00:29:23,530 --> 00:29:27,770
I just want it to hang out wherever it wants to hang out based on the size of my

538
00:29:27,770 --> 00:29:29,040
font or whatever.

539
00:29:29,040 --> 00:29:31,610
So I don't, I don't really wanna specify anything here so

540
00:29:31,610 --> 00:29:34,210
why is this orange and how do I get rid of this?

541
00:29:34,210 --> 00:29:37,640
Well any time you have orange and when you're doing this layout stuff and

542
00:29:37,650 --> 00:29:38,940
you don't know what to do.

543
00:29:38,950 --> 00:29:41,880
You wanna go down to this button right here, okay?

544
00:29:41,880 --> 00:29:44,900
This is the document outline.

545
00:29:44,900 --> 00:29:47,920
And when you click this, a little thing will slide out, a little shelf here.

546
00:29:47,920 --> 00:29:53,090
And this is an outline view of everything that's in your UI.

547
00:29:53,090 --> 00:29:53,890
Okay? And they're linked,

548
00:29:53,890 --> 00:29:58,000
So if I click the background, nothing is selected.

549
00:29:58,000 --> 00:30:00,760
Then the background, the view is what's selected here.

550
00:30:00,770 --> 00:30:04,600
But if I click this L0, which means a label with zero in it,

551
00:30:04,600 --> 00:30:06,240
look it's selected my Zero label,

552
00:31:06,240 --> 00:30:10,140
And vice versa if I click on this here, it selects it over here.

553
00:30:10,140 --> 00:30:14,380
So this is this same thing in an outline mode.

554
00:30:14,380 --> 00:30:16,340
This is really nice to have.

555
00:30:16,350 --> 00:30:18,310
Sometimes you have views that are overlapping and they're kind of in

556
00:30:18,310 --> 00:30:22,420
each other's way, you can always go here to select the one you want, okay?

557
00:30:22,420 --> 00:30:27,520
And you can Ctrl+drag to these over here too it's just as much Ctrl+draggable as

558
00:30:27,520 --> 00:30:30,290
some of these other things.

559
00:30:30,290 --> 00:30:32,510
But what we're, and we'll look,

560
00:30:32,510 --> 00:30:34,730
We'll talk about top layout guide, bottom layout guide a little later.

561
00:30:34,730 --> 00:30:38,360
But what I really want you to focus on is this little yellow circle up here.

562
00:30:38,370 --> 00:30:39,870
'Kay? Any time you got yellow and

563
00:30:39,870 --> 00:30:42,170
orange problems with this auto-layout business,

564
00:30:42,170 --> 00:30:45,100
you're gonna get this little yellow circle appearing in your document outline.

565
00:30:45,110 --> 00:30:50,470
And if you click it, it'll slide in a list of all the problems.

566
00:30:50,480 --> 00:30:54,340
And so here I highlight over this and this is where all the orange and yellow is.

567
00:30:54,350 --> 00:30:59,480
It's saying the label with the 0 in it expected the height to be 39 but

568
00:30:59,480 --> 00:31:00,950
the actual height is 57.

569
00:31:00,950 --> 00:31:03,820
Well that's because after I set this font,

570
00:31:03,820 --> 00:31:06,460
I just dragged this down a little bit to make space.

571
00:31:06,460 --> 00:31:09,260
All right, I, I wasn't very, I, I didn't know it was supposed to be 39.

572
00:31:09,260 --> 00:31:11,330
I just dragged down.

573
00:31:11,330 --> 00:31:14,280
And so it's saying that's wrong.

574
00:31:14,280 --> 00:31:17,230
Now, I could just try drag it back up and meet this dashed line.

575
00:31:17,230 --> 00:31:19,730
This dashed line, by the way,

576
00:31:19,730 --> 00:31:22,230
is where it's kind of saying, this is really where this thing wants to be.

577
00:31:22,240 --> 00:31:24,640
But the solid lines are where it actually is.

578
00:31:24,640 --> 00:31:31,740
So I could kinda drag it up to there, but I, I could be off by a pixel or something else.

579
00:31:31,750 --> 00:31:34,180
A much more reliable way is to click this little yellow triangle, 'kay?

580
00:31:34,180 --> 00:31:36,180
So I'm gonna click this yellow triangle.

581
00:31:36,180 --> 00:31:37,850
It's gonna bring up this pop-up window.

582
00:31:37,850 --> 00:31:42,090
And there's three ways to fix the problems, okay?

583
00:31:42,090 --> 00:31:45,320
One way, Update Constraints, this middle way right here.

584
00:31:45,320 --> 00:31:49,090
That's a way that says, hey, I want this thing to be,

585
00:31:49,100 --> 00:31:51,190
this label to be right where it is.

586
00:31:51,200 --> 00:31:52,960
So just make some constraints.

587
00:31:52,960 --> 00:31:53,630
Make it up.

588
00:31:53,630 --> 00:31:56,230
Make it happen!

589
00:31:56,230 --> 00:31:58,830
And it'll put some wacky constraints in there like 52 high, which is a bad

590
00:31:58,840 --> 00:32:02,300
constraint for it to be, 52 high, cuz this label wants to be its natural height.

591
00:32:02,310 --> 00:32:04,370
It doesn't want to be 52 high.

592
00:32:04,380 --> 00:32:06,340
So this'll kinda force constraint.

593
00:32:06,340 --> 00:32:08,610
You'll almost never want this one, 'kay.

594
00:32:08,610 --> 00:32:11,250
Rarely do you wanna force the constraints.

595
00:32:11,250 --> 00:32:14,520
Reset to Suggested Constraints would probably just work here.

596
00:32:14,520 --> 00:32:16,780
I'm not gonna choose this one, but it would probably work.

597
00:32:16,790 --> 00:32:21,120
This one is going to make the constraints match the blue lines.

598
00:32:21,120 --> 00:32:24,760
Those dashed blue lines that I told you always wanna meet.

599
00:32:24,760 --> 00:32:28,890
Those are what's gonna help the system pick suggested constraints.

600
00:32:28,900 --> 00:32:32,760
So since we dragged that label out to the blue lines perfectly,

601
00:32:32,770 --> 00:32:36,630
I'll bet if I said Reset to Suggested Constraints, it might just work.

602
00:32:36,640 --> 00:32:38,940
Okay. But I'm actually gonna show you this

603
00:32:38,940 --> 00:32:43,640
last option up on top, which is Update Frame and what this says is, take into

604
00:32:43,640 --> 00:32:49,910
consideration all the rules and move this label to where the rules say it should be.

605
00:32:49,920 --> 00:32:52,180
'Kay.And I like this option a lot because it

606
00:32:52,180 --> 00:32:55,520
lets you kind of preview, do I have my little rules right, okay?

607
00:32:55,520 --> 00:32:59,860
So let's try that, let's see if the, we'll tell the, move this label, go ahead and

608
00:32:59,860 --> 00:33:03,560
move yourself and size yourself to obey these three rules we you put in, and

609
00:33:03,560 --> 00:33:06,060
we'll fix the misplacement, so let's try it.

610
00:33:07,060 --> 00:33:10,260
And sure enough it did it, it says there are no Auto Layout issues.

611
00:33:10,270 --> 00:33:14,940
If I go back to my document outline, this little yellow circle is gone.

612
00:33:14,940 --> 00:33:18,810
If I look in my view, everything is blue-lined, no yellow or red.

613
00:33:20,140 --> 00:33:22,630
Okay? So that's your

614
00:33:22,630 --> 00:33:25,110
crash course on Auto Layout, and we're gonna talk a lot more about Auto Layout,

615
00:33:25,110 --> 00:33:28,710
in fact, even on Wednesday I'm gonna do another Auto Layout with all the buttons.

616
00:33:28,720 --> 00:33:30,670
Right? The keypad buttons, and

617
00:33:30,670 --> 00:33:32,620
all that, which is a lot more things being laid out.

618
00:33:32,620 --> 00:33:34,220
But let's see if this fixes our problem.

619
00:33:34,220 --> 00:33:37,520
Let's go ahead and run our application again.

620
00:33:37,520 --> 00:33:39,790
So I'm just hitting that play button.

621
00:33:39,790 --> 00:33:41,560
Here it, oh, we got our zero this time.

622
00:33:41,560 --> 00:33:45,330
You see how it pinned this zero to that edge?

623
00:33:45,330 --> 00:33:48,030
And not only that, if we rotate this phoned,

624
00:33:48,030 --> 00:33:52,270
which you can do in the Simulators menu, Hardware > Rotate.

625
00:33:53,970 --> 00:33:58,370
Look the 0, this got wider and the 0 kept pin, pinning itself over to that.

626
00:33:58,380 --> 00:34:01,980
And it also stayed on the top even though this got, whole thing got shorter.

627
00:34:01,980 --> 00:34:04,880
Okay. And if I rotate back, the 0 stays there.

628
00:34:04,880 --> 00:34:07,420
Question. So what did it do at the bottom there?

629
00:34:07,420 --> 00:34:10,420
Like what did the actual update frame end up doing?

630
00:34:10,420 --> 00:34:12,750
What did the update frame in the document outline do?

631
00:34:12,760 --> 00:34:14,690
Yes. It moved this bottom edge up.

632
00:34:14,690 --> 00:34:17,460
You see this is only 39 pixels high now.

633
00:34:17,460 --> 00:34:18,390
It was 52.

634
00:34:18,390 --> 00:34:19,320
So, yeah, it just moved it up.

635
00:34:19,330 --> 00:34:21,660
It, it, and if other things had been yellow,

636
00:34:21,660 --> 00:34:23,130
it could have moved the whole thing.

637
00:34:23,130 --> 00:34:24,710
Right? It would move that

638
00:34:24,710 --> 00:34:26,300
whole rectangle wherever the rule said but

639
00:34:26,300 --> 00:34:29,530
in this case, you can fix that one problem by moving it up.

640
00:34:29,540 --> 00:34:30,130
Good question.

641
00:34:31,340 --> 00:34:33,540
Okay? So that's good.

642
00:34:33,540 --> 00:34:34,970
All right.

643
00:34:34,970 --> 00:34:36,410
So that's it for Auto Layout.

644
00:34:36,410 --> 00:34:38,340
Auto Layout part one.

645
00:34:38,340 --> 00:34:43,010
So now let's talk a little bit about connecting our user interface that we're

646
00:34:43,010 --> 00:34:45,380
building right here, up to the code,

647
00:34:45,380 --> 00:34:48,250
cuz we want that code to be able to talk to the user interface.

648
00:34:48,250 --> 00:34:51,150
Otherwise how are we gonna have the number buttons,

649
00:34:51,150 --> 00:34:53,420
make numbers appear up here in the display?

650
00:34:53,420 --> 00:34:56,790
Or the times button, give the results of the calculation up here.

651
00:34:56,790 --> 00:34:58,360
We gotta be able to talk to this.

652
00:34:58,360 --> 00:35:01,630
So how do we do that?

653
00:35:01,630 --> 00:35:04,900
And the answer, first step is, we need to get both this co, this Swift Code,

654
00:35:04,900 --> 00:35:10,440
the controller, and this view on screen at the same time, 'kay?

655
00:35:10,440 --> 00:35:12,740
Cuz we're gonna connect them so we need them on screen at the same time,

656
00:35:12,740 --> 00:35:17,180
and there's a lot of ways to do that, but I'll do the simplest way right here,

657
00:35:17,180 --> 00:35:20,610
which is this little button called the assistant editor, all right?

658
00:35:20,610 --> 00:35:22,180
So I'm gonna click that and look!

659
00:35:22,180 --> 00:35:25,120
It put them both on screen at the same time, exactly what I wanted.

660
00:35:25,120 --> 00:35:27,350
Now it's all a little crowded here.

661
00:35:27,350 --> 00:35:31,890
Even if I expand my view a little bit, it's like it's all smashed in here.

662
00:35:31,890 --> 00:35:35,690
Luckily the navigator and the utilities can also be hidden,

663
00:35:35,690 --> 00:35:37,930
see these buttons up here, these three buttons?

664
00:35:37,930 --> 00:35:40,730
This left one, if you click it hides the navigator and

665
00:35:40,730 --> 00:35:45,500
this right one if you click it hides utilities, 'kay?

666
00:35:45,500 --> 00:35:50,300
So now we have both my UI and over here we can still double click to zoom out, but

667
00:35:50,310 --> 00:35:54,640
the thing is, anytime we're actually connecting our UI to our code or

668
00:35:54,640 --> 00:35:59,180
trying to edit anything in here,you need to be zoomed to normal, 'kay?

669
00:35:59,180 --> 00:36:02,350
For example if I tried to select if I'm zoomed out and

670
00:36:02,350 --> 00:36:04,950
I try to select this 0 I just can't.

671
00:36:04,950 --> 00:36:08,890
This is really kind of a bird's eye view just for seeing what your UI looks like.

672
00:36:08,890 --> 00:36:10,720
If you wanna actually work on it,

673
00:36:10,720 --> 00:36:12,560
you double-click to zoom in on this scene that you're interested in.

674
00:36:14,060 --> 00:36:15,630
Okay, so here's our Swift code.

675
00:36:15,630 --> 00:36:17,590
I'm actually gonna delete these.

676
00:36:17,600 --> 00:36:20,630
We don't need them for the calculator.

677
00:36:20,630 --> 00:36:24,330
We will need these things for future application but we don't need it for the calculator.

678
00:36:24,340 --> 00:36:27,970
And this is your first look at Swift,'kay.

679
00:36:27,970 --> 00:36:31,710
So Swift, as I said, very concise language, but it's basically an object

680
00:36:31,710 --> 00:36:36,040
oriented language, it's gonna look a lot like C, some things look a lot like Java.

681
00:36:36,050 --> 00:36:40,380
It's kind of the, you know, best of, of a lot of different worlds at once.

682
00:36:40,380 --> 00:36:44,820
Now this import is just importing the UI portion of iOS.

683
00:36:44,820 --> 00:36:47,650
You usually won't have to specify import yourself unless you start

684
00:36:47,660 --> 00:36:52,490
using frameworks that are not, you know, the base frameworks and we'll get to that

685
00:36:52,490 --> 00:36:56,230
probably weeks into the quarter where you fi, finally have to do an import yourself.

686
00:36:56,230 --> 00:36:58,600
So this how it automatically got put here for us.

687
00:36:58,600 --> 00:37:02,830
And so this is really your first line of Swift code, 'kay?

688
00:37:02,840 --> 00:37:06,970
Appropriately, it's a definition of a class.

689
00:37:06,970 --> 00:37:10,470
Cuz Swift is fundamentally object-oriented and here we're defining a class.

690
00:37:10,480 --> 00:37:13,440
So what does the syntax look like to define a class?

691
00:37:13,450 --> 00:37:15,410
You got the keyword class.

692
00:37:15,410 --> 00:37:16,810
You got the name of the class.

693
00:37:16,810 --> 00:37:20,650
Now this name ViewController, pretty bad name,

694
00:37:20,650 --> 00:37:23,520
Okay, very generic, really they should probably be something like

695
00:37:23,520 --> 00:37:26,590
CalculatorViewController,something specific to

696
00:37:26,590 --> 00:37:33,590
this particular scene that we're orking on right here, that it's controlling.

697
00:37:33,600 --> 00:37:35,660
This is the default name it gives you.

698
00:37:35,670 --> 00:37:38,330
I don't want to spend the valuable demo time showing how to

699
00:37:38,330 --> 00:37:40,650
rename this cuz unfortunately,

700
00:37:40,650 --> 00:37:42,970
I can't just type a new name here because I gotta keep the UI in sync with it.

701
00:37:42,970 --> 00:37:45,270
So I would have to do something in the UI as well.

702
00:37:45,270 --> 00:37:48,070
But, for now, for your first assignment or two we're, we'll just

703
00:37:48,080 --> 00:37:51,540
call this ViewController, but down the road you're gonna wanna pick better names.

704
00:37:51,550 --> 00:37:54,250
And of course you're gonna be building multiple of

705
00:37:54,250 --> 00:37:57,550
these scenes in this class in the same app in the future, so

706
00:37:57,550 --> 00:38:01,020
of course, they'll all have different controller names.

707
00:38:01,020 --> 00:38:07,790
Okay, this :UIViewController, that's inheritance, that's its superclass, okay?

708
00:38:08,790 --> 00:38:12,330
Swift is single inheritance, so you can only inherit from one class.

709
00:38:12,330 --> 00:38:18,130
It's perfectly fine in Swift not to inherit from a class if you don't want to, all right?

710
00:38:18,140 --> 00:38:20,140
But here we have to inherit from UIViewController cuz we

711
00:38:20,140 --> 00:38:23,170
want all this magic that allows us to control the UI,

712
00:38:23,170 --> 00:38:27,880
like that whole Auto Layout business, and there's a ton of mechanism in here for

713
00:38:27,880 --> 00:38:31,080
the, the allowing the controller to control this UI.

714
00:38:31,080 --> 00:38:35,480
So obviously we do that so all ViewControllers, all controllers of these

715
00:38:35,480 --> 00:38:40,420
little scenes always inherit from either from UIViewController directly or they

716
00:38:40,420 --> 00:38:45,290
inherit from a class that inherits from UIViewController or up their chain so.

717
00:38:46,390 --> 00:38:51,130
And then inside this curly brace is simply all the instance variables and

718
00:38:51,130 --> 00:38:54,070
methods in this class, 'kay?

719
00:38:54,070 --> 00:38:58,200
So very simple syntax to define a class.

720
00:38:58,200 --> 00:39:02,140
So let's dive right into making some instance variables and methods so

721
00:39:02,140 --> 00:39:03,910
you can see what those look like.

722
00:39:03,910 --> 00:39:09,210
And I thought we, this was segued to because we're going to

723
00:39:09,210 --> 00:39:12,950
say we wanted to connect this UI to this code.

724
00:39:12,950 --> 00:39:15,070
So let's do that.

725
00:39:15,070 --> 00:39:17,190
Let's connect this label right here into this code, and

726
00:39:17,190 --> 00:39:20,560
then we're gonna do that by  making an instance variable.

727
00:39:20,560 --> 00:39:23,060
In Swift we call them properties.

728
00:39:23,060 --> 00:39:25,330
'Kay so if you hear me say property,

729
00:39:25,330 --> 00:39:27,160
I'm basically talking about an instance variable.

730
00:39:27,160 --> 00:39:29,460
Right? A variable that is part of the class.

731
00:39:29,460 --> 00:39:31,860
Every instance of the class gets its own copy of it.

732
00:39:31,870 --> 00:39:34,170
Hopefully you all know what an instance variable is.

733
00:39:34,170 --> 00:39:35,730
If you don't, again, this class,

734
00:39:35,740 --> 00:39:38,400
heavy object-oriented, you should definitely know that.

735
00:39:38,410 --> 00:39:41,670
So I'm gonna make a property here, an instance variable,

736
00:39:41,680 --> 00:39:45,840
that points to this label, so that I can update the label's text, right?

737
00:39:45,850 --> 00:39:50,480
I need to be able to talk to this label, and the way you do that in eh,

738
00:39:50,480 --> 00:39:55,820
in Xcode is you hold down Ctrl, just like we did when we were making

739
00:39:55,820 --> 00:39:59,620
a connection to the edge, so I'm holding down Ctrl and clicking on the label, but

740
00:39:59,620 --> 00:40:02,590
instead of going to the edge, I'm gonna go into the code, 'kay?

741
00:40:02,590 --> 00:40:06,160
Now this is kinda wacky.

742
00:40:06,160 --> 00:40:07,900
I know a lot of you are like what?

743
00:40:07,900 --> 00:40:08,500
Into the code?

744
00:40:08,500 --> 00:40:11,000
Yeah?

745
00:40:11,000 --> 00:40:13,500
So we're going right into the code here and let go and it's gonna say oh,

746
00:40:13,500 --> 00:40:16,300
you wanna make a connection between your UI and your controller.

747
00:40:16,310 --> 00:40:18,840
No problem, what kinda connection you wanna make?

748
00:40:18,840 --> 00:40:20,840
And we wanna make what's called an outlet connection.

749
00:40:20,840 --> 00:40:22,680
An outlet means an instance variable or

750
00:40:22,680 --> 00:40:25,710
property that points to this thing in the UI.

751
00:40:25,710 --> 00:40:30,020
And all it needs to know to do that is, what do you wanna call this property?

752
00:40:30,020 --> 00:40:34,920
And this is the display of my calculator so I'm gonna call this display and it

753
00:40:34,920 --> 00:40:38,960
already knows the type of the thing is UILabel of course cuz we dragged from here.

754
00:40:38,960 --> 00:40:41,430
Don't worry about this weak, I'll talk about that in a moment.

755
00:40:41,430 --> 00:40:45,060
And then we just hit Connect, and it creates an instance variable or

756
00:40:45,060 --> 00:40:47,200
property, right here in our controller.

757
00:40:47,200 --> 00:40:51,330
So this is a great opportunity to look at the syntax in Swift for

758
00:40:51,340 --> 00:40:54,100
creating a property.

759
00:40:54,110 --> 00:40:56,870
And there's a couple of things on here that are not normally part of it.

760
00:40:56,880 --> 00:41:02,510
This is you, the main syntax for creating a property.

761
00:41:02,510 --> 00:41:04,410
Let's quickly look at this thing to get it out of the way.

762
00:41:04,420 --> 00:41:07,450
This is not really part of the Swift language proper.

763
00:41:07,450 --> 00:41:09,550
This is something Xcode puts in here so

764
00:41:09,550 --> 00:41:14,520
that this little circle, do you see the little circle in this gutter, appears?

765
00:41:14,520 --> 00:41:18,460
This little circle when I mouse over it, look what Xcode does.

766
00:41:18,460 --> 00:41:21,930
It shows me what this line of code is connected to.

767
00:41:21,930 --> 00:41:23,850
'Kay? So that's really cool, and

768
00:41:23,850 --> 00:41:25,770
you're gonna see that's really valuable later in this demo,

769
00:41:25,770 --> 00:41:27,830
is being able to find out what things are connected to.

770
00:41:27,840 --> 00:41:29,770
So that's all this thing means here.

771
00:41:29,770 --> 00:41:33,770
You, you, you don't type this in yourself, that when you Ctrl+drag, it puts it there.

772
00:41:33,770 --> 00:41:38,740
This weak, all you, you, if you come from other languages,

773
00:41:38,750 --> 00:41:44,650
you're used to things like garbage collection to clean up the heap.

774
00:41:44,650 --> 00:41:46,280
Or maybe you even have to alloc and

775
00:41:46,290 --> 00:41:50,250
free things yourself manually in some languages.

776
00:41:50,260 --> 00:41:51,790
None of that in Swift.

777
00:41:51,790 --> 00:41:54,820
In Swift, the, all objects live in the heap, 'kay.

778
00:41:54,830 --> 00:41:58,390
All class, the instances of classes live in the heap.

779
00:41:58,400 --> 00:42:02,330
And the memory for them is managed for you, 'kay?

780
00:42:02,330 --> 00:42:05,370
You allocate them as much as you want, as soon as there's no pointers to them,

781
00:42:05,370 --> 00:42:08,270
they get cleaned up, and it's not garbage collection, 'kay?

782
00:42:08,270 --> 00:42:10,490
It's reference counting.

783
00:42:10,490 --> 00:42:12,710
It's actually counting references to them but it's all automatic.

784
00:42:12,710 --> 00:42:16,540
The only thing you ever have to be maybe interested in is this weak business which

785
00:42:16,550 --> 00:42:19,850
is less than a hundredth of a percent of the time.

786
00:42:19,850 --> 00:42:23,780
And for the first four weeks of this class, forget about weak.

787
00:42:23,790 --> 00:42:27,590
It'll automatically happen when you do this Ctrl+drag, but just ignore it.

788
00:42:27,590 --> 00:42:29,560
But the main thing to know is that all that memory

789
00:42:29,560 --> 00:42:31,120
management is happening for you.

790
00:42:31,130 --> 00:42:34,330
Also this, instance variable right here,

791
00:42:34,330 --> 00:42:38,260
which is a pointer to this object, notice there's no ampersands or

792
00:42:38,260 --> 00:42:42,270
stars or any other kind of syntax that says this is a pointer.

793
00:42:42,270 --> 00:42:44,400
'Kay?

794
00:42:44,400 --> 00:42:46,540
If you have a instance, variable or property or

795
00:42:46,540 --> 00:42:48,910
local variable that is an object, okay,

796
00:42:48,910 --> 00:42:52,980
it's always a pointer to it cuz objects only live in the heap, 'kay?

797
00:42:52,980 --> 00:42:54,640
So you don't need all that extra stars and

798
00:42:54,650 --> 00:42:57,180
ampersand, any of that business from other languages, okay?

799
00:42:58,280 --> 00:43:01,580
This exclamation point, by the way, I'm gonna talk about in a few minutes,

800
00:43:01,580 --> 00:43:04,020
has nothing to do with this being an object, okay?

801
00:43:04,020 --> 00:43:05,850
This is, this totally separate thing.

802
00:43:05,860 --> 00:43:07,090
We'll get to it.

803
00:43:07,090 --> 00:43:08,040
All right.

804
00:43:08,040 --> 00:43:08,990
So let's look at this.

805
00:43:08,990 --> 00:43:15,160
This is the syntax for defining a property, 'kay?

806
00:43:15,160 --> 00:43:16,060
An instance variable.

807
00:43:16,060 --> 00:43:18,510
And it's very simple.

808
00:43:18,520 --> 00:43:20,970
You got var, short for variable cuz that's what this is, a variable.

809
00:43:20,970 --> 00:43:23,470
The name, this is the name of it, display.

810
00:43:23,470 --> 00:43:25,470
Okay? That's just the name of this property.

811
00:43:25,470 --> 00:43:26,900
And then :UILabel!

812
00:43:26,910 --> 00:43:28,510
Is the type, 'kay?

813
00:43:28,510 --> 00:43:33,810
That's the type of this instance variable.

814
00:43:33,810 --> 00:43:38,450
So again, I'll talk about the exclamation point later, but

815
00:43:38,450 --> 00:43:42,380
obviously this thing is pointing to this label so that we can talk to it.

816
00:43:42,390 --> 00:43:43,590
And we'll be doing that in a moment.

817
00:43:43,590 --> 00:43:44,420
'Kay?

818
00:43:44,420 --> 00:43:46,320
Questions?

819
00:43:46,320 --> 00:43:49,960
All right, let's talk about another kind of connection we may,

820
00:43:49,960 --> 00:43:52,360
we can make, let's start putting some buttons in our calculator.

821
00:43:52,360 --> 00:43:55,100
So I'm gonna go back to the Utilities window, 'kay?

822
00:43:55,100 --> 00:43:56,730
By pressing this button over here,

823
00:43:56,730 --> 00:44:00,700
go down to the bottom, go to the third tab over here, the object library.

824
00:44:00,700 --> 00:44:04,770
And instead of a label, this time I'm gonna drag out a button.

825
00:44:04,770 --> 00:44:07,140
Okay? I'm gonna put this button here now.

826
00:44:07,140 --> 00:44:11,410
Just to be different, I'm not gonna initially line it up with a blue line.

827
00:44:11,410 --> 00:44:14,280
I'm just gonna put it kinda in space out here and

828
00:44:14,280 --> 00:44:17,110
I'll line it up with the blue line later, 'kay?

829
00:44:17,120 --> 00:44:19,480
But I don't wanna forget to do that though, I always wanna do that.

830
00:44:19,480 --> 00:44:22,720
What I'm gonna do later is to show you it can be done.

831
00:44:22,720 --> 00:44:26,120
So, this is gonna be, let's say this is gonna be one of our number buttons.

832
00:44:26,120 --> 00:44:30,190
Like the upper left corner of our keypad is a 7.

833
00:44:30,190 --> 00:44:31,590
Okay?

834
00:44:31,590 --> 00:44:32,990
Again, I have the same thing over here.

835
00:44:33,000 --> 00:44:35,360
Okay? With the attributes inspector I can

836
00:44:35,370 --> 00:44:37,200
change things like the font.

837
00:44:37,200 --> 00:44:40,870
Let's make this be 24 point, let's say.

838
00:44:40,870 --> 00:44:42,790
I can resize.

839
00:44:42,790 --> 00:44:44,700
Notice that when I resize it will actually tell me the size,

840
00:44:44,710 --> 00:44:46,970
see it saying there what size it is?

841
00:44:46,980 --> 00:44:50,380
I can also set the size maybe with this size inspector right here,

842
00:44:50,380 --> 00:44:51,340
type it in exactly.

843
00:44:51,350 --> 00:44:53,510
Maybe 64 by 64, something like that.

844
00:44:53,510 --> 00:44:54,910
We don't usually do that.

845
00:44:54,920 --> 00:44:57,580
We want things to be kinda their natural sizes but

846
00:44:57,580 --> 00:45:01,150
just want to show you that there are other inspectors over here.

847
00:45:01,150 --> 00:45:02,490
So we have this 7.

848
00:45:02,490 --> 00:45:05,460
Now when this 7 is pressed, what do we want to happen?

849
00:45:05,460 --> 00:45:07,960
What we want.

850
00:45:07,960 --> 00:45:10,460
Numbers just start appearing up here in the display, right?

851
00:45:10,460 --> 00:45:13,000
So that's something our controller is going to have to do.

852
00:45:13,000 --> 00:45:17,070
So, when we touch this button, we kinda want this button to send a message to

853
00:45:17,070 --> 00:45:21,300
our controller, and we do that the exact same way as we did this one,

854
00:45:21,300 --> 00:45:25,910
we hold down control, drag into our code.

855
00:45:25,910 --> 00:45:29,240
When we let go though, we're not going to an outlet connection this time,

856
00:45:29,250 --> 00:45:34,080
because I dont want an instance variable here, what i want is a method, right?

857
00:45:34,080 --> 00:45:39,790
A function on my class, a method, everyone understand the word method I hope,

858
00:45:39,790 --> 00:45:44,160
okay, so we want it to send an [INAUDIBLE] message to our control board, so

859
00:45:44,160 --> 00:45:48,830
I'm going to pick" action", [COUGH] losing my voice here.

860
00:45:48,830 --> 00:45:50,430
Bad time to have a little cold, but.

861
00:45:50,430 --> 00:45:52,960
[SOUND] So I'm doing an action so

862
00:45:52,970 --> 00:45:56,830
an action is a little different than a outlet, okay?

863
00:45:56,840 --> 00:45:58,970
An outlet means an instance variable or

864
00:45:58,970 --> 00:46:01,900
property, action means create a method for me.

865
00:46:01,910 --> 00:46:03,940
So again it wants to know the name of the method.

866
00:46:03,940 --> 00:46:05,510
So what does this thing do?

867
00:46:05,510 --> 00:46:08,810
Well when I press seven, it appends a digit onto the end of

868
00:46:08,810 --> 00:46:12,850
whatever's already in the display, so I'm going to call it append,

869
00:46:12,850 --> 00:46:17,390
I could call it append seven, but I'm actually going to call it append digit,

870
00:46:17,390 --> 00:46:20,850
because I want to have one method that all of my buttons use.

871
00:46:20,860 --> 00:46:23,320
All right?

872
00:46:23,320 --> 00:46:25,790
I don't want to, copy and pasting a bunch of methods, that would be really bad code.

873
00:46:27,400 --> 00:46:29,560
But if I'm gonna have one method,

874
00:46:29,560 --> 00:46:33,430
then I need to know which button is sending me this message, okay?

875
00:46:33,430 --> 00:46:37,070
Luckily, when you haven't actioned a message being sent here,

876
00:46:37,070 --> 00:46:40,970
you can specify that it has arguments, you see right here where it says arguments?

877
00:46:40,970 --> 00:46:45,410
And it can have no arguments or it can have the sender.

878
00:46:45,410 --> 00:46:48,480
Which is the button here as the argument.

879
00:46:48,480 --> 00:46:52,780
The only tricky thing here is, and I'm not sure why they did this in Xcode.

880
00:46:52,780 --> 00:46:54,450
Hopefully, they'll change it in the future.

881
00:46:54,450 --> 00:46:59,090
By default, the type of that argument, which is right here, is anyObject.

882
00:46:59,090 --> 00:47:01,960
Now, we're gonna talk about anyObject next week.

883
00:47:01,960 --> 00:47:04,330
But, we don't want anyObject here.

884
00:47:04,330 --> 00:47:06,590
We know that the sender is a UIButton,

885
00:47:06,600 --> 00:47:09,930
So I picked, click this little blue thing and switch this to UIButton.

886
00:47:09,930 --> 00:47:13,670
When you're doing your homework, if you forget to switch that to UIButton,

887
00:47:13,670 --> 00:47:15,900
you'll be sad, okay.

888
00:47:15,900 --> 00:47:17,540
So don't forget.

889
00:47:17,540 --> 00:47:21,970
And obviously the event that the message is gonna be sent on, touch up inside,

890
00:47:21,980 --> 00:47:25,440
just means the user touched on this button and the touch went up.

891
00:47:25,450 --> 00:47:27,110
While it was still inside the button.

892
00:47:27,110 --> 00:47:29,950
That's all a touch up inside means there.

893
00:47:29,950 --> 00:47:32,020
All right so when I connect this,

894
00:47:32,020 --> 00:47:35,820
I'm gonna get a method with one argument which is a sender which is a UIButton.

895
00:47:35,820 --> 00:47:38,760
So let's take a look.

896
00:47:38,760 --> 00:47:41,690
So here's your first method declaration in SWIFT, okay?

897
00:47:41,690 --> 00:47:46,130
Again it's got this little IBAction thing which is kinda like IBOutlet.

898
00:47:46,130 --> 00:47:47,960
It puts a little dot in the gutter.

899
00:47:49,100 --> 00:47:50,430
Okay? So that you can

900
00:47:50,430 --> 00:47:52,930
see what this thing is connected to.

901
00:47:52,940 --> 00:47:59,010
So this is the normal, Swift method syntax.

902
00:47:59,010 --> 00:48:02,210
Starts with func because function,

903
00:48:02,210 --> 00:48:04,210
basically that method is a function in class.

904
00:48:04,210 --> 00:48:06,480
[COUGH] Here's the name.

905
00:48:06,480 --> 00:48:07,910
AppendDigit.

906
00:48:07,920 --> 00:48:10,980
And then in parentheses, all the arguments separated by commas.

907
00:48:10,980 --> 00:48:12,980
We only have one argument, though.

908
00:48:12,990 --> 00:48:15,050
Here's the name of the first argument.

909
00:48:15,050 --> 00:48:18,860
That's the name we're going to use to access it inside of our method, and

910
00:48:18,860 --> 00:48:20,290
here is the type.

911
00:48:21,260 --> 00:48:22,490
Okay? It's a UIButton.

912
00:48:22,490 --> 00:48:24,590
I, notice no exclamation point there, by the way.

913
00:48:26,530 --> 00:48:31,230
Okay if this had a return value, if this method returned something this one doesn't

914
00:48:31,230 --> 00:48:36,200
[COUGH] but if it returned something, it would look like this arrow the return type

915
00:48:37,740 --> 00:48:40,310
okay so that's how you specify a return type.

916
00:48:42,210 --> 00:48:48,180
Okay, pretty simple the syntax and then inside here we just type,

917
00:48:48,180 --> 00:48:51,820
well whatever we want this thing to do when one of these buttons is touched.

918
00:48:51,820 --> 00:48:53,770
So what do we want it to do?

919
00:48:53,770 --> 00:48:55,720
Well, okay, first of all before we do that, let's go ahead and make more of

920
00:48:55,720 --> 00:48:58,920
these buttons because I need seven, eight, nine, four, five, six, all this.

921
00:48:58,930 --> 00:49:01,660
So let's copy and paste the button.

922
00:49:01,660 --> 00:49:04,400
When I copy and

923
00:49:04,400 --> 00:49:07,130
paste the button, notice I'm using the blue lines to put it perfectly lined up.

924
00:49:07,130 --> 00:49:11,370
Okay, also notice that it there also sending this message.

925
00:49:11,370 --> 00:49:14,770
All right, see how their both sending the message, because when I copy and

926
00:49:14,770 --> 00:49:18,010
paste, it copied that aspect of it as well.

927
00:49:18,010 --> 00:49:21,180
So there's another one, I could select all three of these and

928
00:49:21,180 --> 00:49:27,150
copy and paste, okay, I could select all six of these and copy and paste.

929
00:49:27,150 --> 00:49:30,990
So I can quickly make, my entire keypad.

930
00:49:30,990 --> 00:49:33,340
Just need to edit the title.

931
00:49:33,340 --> 00:49:35,690
Now, if while I'm editing these titles, sometimes you're clicking around in

932
00:49:35,690 --> 00:49:39,430
here and, you know, you're not a very accurate clicker.

933
00:49:39,430 --> 00:49:43,360
[LAUGH] Or, you know, you just get out, out of control clicking here, and oh,

934
00:49:43,370 --> 00:49:45,230
you moved it out of the way.

935
00:49:45,230 --> 00:49:46,820
Okay?

936
00:49:46,820 --> 00:49:48,400
No problem, you can just put it right back in.

937
00:49:48,400 --> 00:49:51,670
Okay, use the blue lines to your advantage.

938
00:49:52,840 --> 00:49:55,270
And we'll put our zero down here.

939
00:49:55,270 --> 00:49:57,710
And I don't need these buttons so I'm just hit, selecting it, hitting delete.

940
00:49:57,710 --> 00:49:59,710
That's how you can get rid of something.

941
00:49:59,710 --> 00:50:02,980
And I promised I was gonna put these all on blue lines, so I'm gonna do that.

942
00:50:02,980 --> 00:50:05,920
I'm gonna put it right underneath the zero.

943
00:50:05,920 --> 00:50:08,890
So here's a blue line that means underneath the zero, and

944
00:50:08,890 --> 00:50:10,690
then I'm going to put at this edge.

945
00:50:10,690 --> 00:50:14,960
So now you can see that the blue lines are not just the edges, but

946
00:50:14,960 --> 00:50:17,960
they are other objects, like the other objects in the keypad and

947
00:50:17,960 --> 00:50:20,660
also now the title, the display rather at the top.

948
00:50:21,870 --> 00:50:26,200
So I've got all these buttons, they're all sending this message append digit.

949
00:50:26,200 --> 00:50:28,870
So I need to figure out which one is sending it,

950
00:50:28,870 --> 00:50:30,940
so that I can do the right thing.

951
00:50:30,940 --> 00:50:33,610
So let's start writing some code inside the method.

952
00:50:33,610 --> 00:50:37,280
So the first thing I'm going to do is declare a local variable,

953
00:50:37,280 --> 00:50:39,910
it's just a local variable inside this method.

954
00:50:39,910 --> 00:50:43,520
I'm going to do that by saying let digit equal.

955
00:50:43,520 --> 00:50:47,820
So I want this local variable to be the digit that was pressed.

956
00:50:47,820 --> 00:50:50,740
Okay.

957
00:50:50,740 --> 00:50:53,660
So, first thing that's quite different here is, what's let?

958
00:50:53,660 --> 00:50:54,360
Okay?

959
00:50:54,360 --> 00:50:56,990
Why isn't this var, right?

960
00:50:57,000 --> 00:51:00,730
Cuz var means variable, what the heck does let mean?

961
00:51:00,730 --> 00:51:05,970
Well let is exactly the same as var except it's a constant.

962
00:51:07,140 --> 00:51:10,740
Which means you're going to sign this right off the bat, and

963
00:51:10,740 --> 00:51:13,040
it's never going to change in this method.

964
00:51:13,040 --> 00:51:15,410
Now Swift makes a big deal about this, and

965
00:51:15,410 --> 00:51:19,550
I love this feature, because if I'm reading this code,

966
00:51:19,550 --> 00:51:23,350
I know the digit is never going to change all, this might be, you know.

967
00:51:23,350 --> 00:51:24,850
It might have a dozen lines of code.

968
00:51:24,850 --> 00:51:26,790
Which by the way,

969
00:51:26,790 --> 00:51:28,720
you shouldn't have very many methods, with many more lines of code then that.

970
00:51:28,720 --> 00:51:30,290
Okay? You want people to be able to

971
00:51:30,290 --> 00:51:31,790
kind of see what a method's doing.

972
00:51:33,230 --> 00:51:34,760
You can use other methods,

973
00:51:34,760 --> 00:51:37,800
call other methods if you need to get more code in there.

974
00:51:37,800 --> 00:51:38,930
so.

975
00:51:38,930 --> 00:51:39,830
Here I can de-,

976
00:51:39,830 --> 00:51:41,270
rely on that not changing.

977
00:51:41,270 --> 00:51:44,400
That's big for readability.

978
00:51:44,400 --> 00:51:47,540
You'll be surprised how much more readable it makes the code, to know that this is a,

979
00:51:47,540 --> 00:51:49,170
local variable, but it's constant.

980
00:51:49,170 --> 00:51:50,110
Only set at the beginning.

981
00:51:50,110 --> 00:51:52,910
Yeah. Is there a reason, constants and

982
00:51:52,910 --> 00:51:54,710
like, variables have the same naming convention.

983
00:51:54,710 --> 00:51:56,450
Since [UNKNOWN] like Java there.

984
00:51:56,450 --> 00:51:58,180
Like the naming conventions like all caps or lowercase.

985
00:51:58,180 --> 00:52:00,770
Yeah. So, yeah.

986
00:52:00,770 --> 00:52:03,350
The question is, why don't I call digit like all caps digit, or

987
00:52:03,350 --> 00:52:05,420
something like that, so I know it's a constant.

988
00:52:05,420 --> 00:52:07,620
That would be a programming style thing.

989
00:52:07,620 --> 00:52:10,920
Generally in Swift they don't do that.

990
00:52:10,930 --> 00:52:13,760
And, I'll show you why that is in a moment.

991
00:52:13,760 --> 00:52:15,230
Why you don't really need to do that.

992
00:52:15,230 --> 00:52:18,060
Because you can very quickly find out the declaration of

993
00:52:18,070 --> 00:52:22,400
any symbol anywhere with one click, and you'll see that.

994
00:52:22,400 --> 00:52:25,200
Good question though.

995
00:52:25,210 --> 00:52:28,010
All right, so I wanna let the digit, equal the number that's on the,

996
00:52:28,010 --> 00:52:30,190
the sending button.

997
00:52:30,190 --> 00:52:32,380
So I'm gonna have to send a message to this button.

998
00:52:32,380 --> 00:52:34,310
Okay? Gonna have to somehow access this button.

999
00:52:34,310 --> 00:52:37,880
So I'm gonna have to do sender, something.

1000
00:52:37,880 --> 00:52:40,650
Give me what your title is, okay?

1001
00:52:40,650 --> 00:52:44,090
So this is a good time to talk about the documentation.

1002
00:52:44,090 --> 00:52:45,540
[COUGH].

1003
00:52:45,540 --> 00:52:46,990
Because being a good iOS developer,

1004
00:52:46,990 --> 00:52:50,390
really demands that you are good at navigating the documentation.

1005
00:52:50,390 --> 00:52:54,330
Luckily, the documentation is really well plugged in to Xcode.

1006
00:52:54,330 --> 00:52:57,030
For example, if I wanna find out about button,

1007
00:52:57,030 --> 00:53:00,330
all I need to do is hold down the option key.

1008
00:53:00,340 --> 00:53:01,370
Okay?

1009
00:53:01,370 --> 00:53:02,970
And watch what happens now.

1010
00:53:02,970 --> 00:53:04,540
As I mouse over things,

1011
00:53:04,540 --> 00:53:09,680
everything, it turns blue with a dashed blue line under it, okay?

1012
00:53:09,680 --> 00:53:10,740
If I click on it,

1013
00:53:12,110 --> 00:53:14,880
it gives me a little blurb from the documentation about this thing.

1014
00:53:14,880 --> 00:53:17,950
So it's saying, you know, here's, button is a class.

1015
00:53:17,950 --> 00:53:19,280
Here's its inheritance.

1016
00:53:19,290 --> 00:53:20,680
Here's a little bit of what it does.

1017
00:53:20,690 --> 00:53:22,690
And really awesome at the bottom here,

1018
00:53:22,690 --> 00:53:25,420
here's a link that takes you to the detailed documentation.

1019
00:53:25,420 --> 00:53:27,960
So I'm gonna click this little link right here.

1020
00:53:27,960 --> 00:53:34,500
It's going to be up a documentation window, with UIButton in it, hello?

1021
00:53:34,500 --> 00:53:38,030
Did I not click that right thing here,

1022
00:53:38,040 --> 00:53:43,070
oh I hope I don't have a network issue here.

1023
00:53:43,070 --> 00:53:47,040
hm, okay well, I guess I'm not connected to the network,

1024
00:53:47,040 --> 00:53:50,140
that's the problem, so it's getting this off the network.

1025
00:53:50,150 --> 00:53:53,810
Okay so.

1026
00:53:53,820 --> 00:53:57,480
Imagine that there were documentation here and, it would have along this side here

1027
00:53:57,490 --> 00:54:03,290
on the left all the instance variables or properties and methods of u i button.

1028
00:54:03,290 --> 00:54:05,920
And you could click on any one, and

1029
00:54:05,930 --> 00:54:08,160
in there we'd have a full description of it here.

1030
00:54:08,160 --> 00:54:11,730
And all the types that it referenced you could click on it here, and

1031
00:54:11,730 --> 00:54:14,500
basically it's a hyper linked documentation [UNKNOWN].

1032
00:54:14,500 --> 00:54:16,770
As you can imagine.

1033
00:54:16,770 --> 00:54:19,040
I'll try to get the networking working on Wednesday and we'll take a look at this.

1034
00:54:19,040 --> 00:54:21,490
But if I was looking in here,

1035
00:54:21,490 --> 00:54:23,940
I'd look down in the section that says getting the button's current state, and

1036
00:54:23,940 --> 00:54:30,180
I'd find that there is an instance property there called current title.

1037
00:54:30,180 --> 00:54:31,550
Okay? It's unfortunate I'm not going to

1038
00:54:31,550 --> 00:54:32,180
link these things.

1039
00:54:32,180 --> 00:54:33,680
But.

1040
00:54:33,680 --> 00:54:39,990
So how do we access, property or call a method in another object,

1041
00:54:39,990 --> 00:54:43,420
will look exactly the same whether you call it a method or

1042
00:54:43,430 --> 00:54:46,330
accessing a property, which is you use dot.

1043
00:54:46,330 --> 00:54:49,430
Okay. It's the same syntax that's used in

1044
00:54:49,430 --> 00:54:52,770
a lot of languages is to, to do dot.

1045
00:54:52,770 --> 00:54:55,170
And so when you do that, Xcode is going to say, oh,

1046
00:54:55,170 --> 00:54:58,200
well, here's all the things button knows how to do.

1047
00:54:58,210 --> 00:54:59,890
Okay?

1048
00:54:59,890 --> 00:55:01,570
And as you can see, button knows how to do a lot of things.

1049
00:55:01,580 --> 00:55:03,740
Because it inherits from a class, it inherits from a class,

1050
00:55:03,740 --> 00:55:07,450
it inherits from a class, that all have lots of methods in them.

1051
00:55:07,450 --> 00:55:10,320
So when I looked at that documentation.

1052
00:55:10,320 --> 00:55:13,820
I've found that current title was the thing I wanted.

1053
00:55:13,820 --> 00:55:18,190
Now notice as I start to type a c, it's already cutting down

1054
00:55:18,190 --> 00:55:23,330
the things that could be starting with a c, and then c u, they cut down even more.

1055
00:55:23,330 --> 00:55:28,770
I can type tab, to get to the first ambiguity point, then I can type t.

1056
00:55:29,730 --> 00:55:31,880
Okay?

1057
00:55:31,890 --> 00:55:35,870
And then tab again, and I'm here at currentTitle and then I can press return. Okay?

1058
00:55:35,870 --> 00:55:37,320
So there it is.

1059
00:55:37,320 --> 00:55:38,770
digit = sender.currentTitle

1060
00:55:38,780 --> 00:55:45,480
so, what's going on here in terms of the sender title.

1061
00:55:45,480 --> 00:55:49,520
Let's go ahead and print this out to the console just to see what's going on.

1062
00:55:49,520 --> 00:55:50,680
So I'm gonna println.

1063
00:55:50,690 --> 00:55:55,990
At which is a function, a global function that takes a String.

1064
00:55:55,990 --> 00:55:57,690
So I give it a String.

1065
00:55:57,690 --> 00:55:59,760
And inside that String, I'll type mm,

1066
00:55:59,760 --> 00:56:05,000
digit equals and now I wanna embed the value of digit in this String.

1067
00:56:05,000 --> 00:56:08,330
And Swift has a really cool feature which is backslash open parentheses

1068
00:56:08,330 --> 00:56:11,920
close parentheses.

1069
00:56:11,920 --> 00:56:15,510
If you put that in a String, and then inside there you put some expression, then

1070
00:56:15,510 --> 00:56:21,040
it will evaluate that expression turn it into a String, and embed it in the String.

1071
00:56:21,050 --> 00:56:24,710
Okay, so its really easy to println values by

1072
00:56:24,720 --> 00:56:28,250
using this backslash parenthesis. Okay?

1073
00:56:28,250 --> 00:56:30,180
So let's go ahead and run and

1074
00:56:30,190 --> 00:56:32,120
see what happens when we press these buttons to see what kind of result we get.

1075
00:56:32,120 --> 00:56:35,020
It's not going to be quite what we expect, but let's see.

1076
00:56:37,860 --> 00:56:42,060
Alright so, here's our UI we got our buttons that's a good start.

1077
00:56:42,060 --> 00:56:44,430
And now, and console, where's the console?

1078
00:56:44,430 --> 00:56:46,260
Watch this. I'm going to press a button five.

1079
00:56:47,370 --> 00:56:49,230
The console appears at the bottom here.

1080
00:56:49,240 --> 00:56:50,170
See this down here.

1081
00:56:50,170 --> 00:56:51,870
This is the console.

1082
00:56:51,870 --> 00:56:56,270
And it's saying digit equals, hm, optional five.

1083
00:56:56,270 --> 00:56:57,210
Okay.

1084
00:56:57,210 --> 00:56:58,740
How about a nine?

1085
00:56:58,740 --> 00:56:59,710
They're all optional.

1086
00:56:59,710 --> 00:57:03,250
What the heck is going on here? Okay.

1087
00:57:03,250 --> 00:57:05,410
This is crucial to understanding Swift.

1088
00:57:05,420 --> 00:57:08,420
This is probably the most important thing to understand that

1089
00:57:08,420 --> 00:57:11,420
people don't quite get right from the start.

1090
00:57:11,420 --> 00:57:15,820
So we're really going to focus here on understanding what

1091
00:57:15,820 --> 00:57:17,860
optional means right there.

1092
00:57:17,860 --> 00:57:18,730
Okay?

1093
00:57:18,730 --> 00:57:19,590
So let's go back to our code.

1094
00:57:22,160 --> 00:57:25,960
And look at this, oh and by the way it, when the console appears down here,

1095
00:57:25,970 --> 00:57:28,530
you can make it go away with this little button, or

1096
00:57:28,540 --> 00:57:31,270
you can just drag it out of the way okay?

1097
00:57:31,270 --> 00:57:34,710
But sometimes it's nice to have that console still there, so

1098
00:57:34,710 --> 00:57:39,540
you can look at your output while you're you know reacting to whatever you found,

1099
00:57:39,550 --> 00:57:41,750
in fact we will leave that up there, so you can see the optionals.

1100
00:57:42,750 --> 00:57:45,180
Alright, so, what's going on here?

1101
00:57:45,180 --> 00:57:48,950
Well, what's happening here is, well, first of all,

1102
00:57:48,950 --> 00:57:52,750
don't you find this a little bit odd, let digit, I didn't put a type.

1103
00:57:52,760 --> 00:57:55,590
You see that?

1104
00:57:55,590 --> 00:57:57,660
How, what type is digit?

1105
00:57:57,660 --> 00:58:02,330
Okay, well there's no type in there, no type information whatsoever, so.

1106
00:58:02,330 --> 00:58:04,630
Does Swift have untyped variables?

1107
00:58:04,630 --> 00:58:06,170
No, it's exact opposite.

1108
00:58:06,170 --> 00:58:10,140
Swift is very strongly typed. Okay.

1109
00:58:10,140 --> 00:58:11,340
All variables have a type.

1110
00:58:11,340 --> 00:58:12,940
You have to specify type.

1111
00:58:12,940 --> 00:58:17,840
But, Swift is also incredibly good at what's called type inference.

1112
00:58:17,840 --> 00:58:20,810
So it can infer the type from the context.

1113
00:58:20,810 --> 00:58:25,550
So here I let digit equalwhatever this is, this currentTitle, and

1114
00:58:25,550 --> 00:58:29,390
so it just made digit be the same type as this.

1115
00:58:29,390 --> 00:58:31,540
Okay.

1116
00:58:31,540 --> 00:58:33,690
Now back to the question earlier, so what type is that?

1117
00:58:33,690 --> 00:58:37,360
Well, if I hold down option, okay, just like we used option to

1118
00:58:37,360 --> 00:58:42,630
go look into the documentation, we can also option click on our own variables.

1119
00:58:42,630 --> 00:58:44,330
To see are they constant?

1120
00:58:44,330 --> 00:58:45,200
Are they variables?

1121
00:58:45,200 --> 00:58:46,130
And what type are they?

1122
00:58:46,140 --> 00:58:47,300
So watch this.

1123
00:58:47,300 --> 00:58:50,220
Option click.

1124
00:58:50,220 --> 00:58:53,140
It says digit is of type String question mark.

1125
00:58:53,140 --> 00:58:54,570
Okay? String question mark.

1126
00:58:55,510 --> 00:58:58,240
That question mark means optional.

1127
00:58:58,250 --> 00:59:02,580
So there is a type in Swift, it's a type, called optional.

1128
00:59:02,580 --> 00:59:08,250
Okay. Optional, that type can have only two values.

1129
00:59:08,250 --> 00:59:10,590
One value is not set.

1130
00:59:12,090 --> 00:59:16,990
Okay, this optional is not set, there has never been set or someone has

1131
00:59:16,990 --> 00:59:20,930
set it to the not set state, they unset it if you want to think about it that way.

1132
00:59:20,930 --> 00:59:25,400
So optional one value is not set, we call that there's a, symbol for

1133
00:59:25,400 --> 00:59:28,240
it in here called nil, N, I, L, okay?

1134
00:59:28,240 --> 00:59:31,210
That means not set, that's the value of an optional not set.

1135
00:59:31,210 --> 00:59:34,740
That's the only thing nil means in Swift is option this is an optional,

1136
00:59:34,740 --> 00:59:36,940
the value of an optional that is not set.

1137
00:59:36,950 --> 00:59:41,580
What's the other value that an optional could have well the other value is.

1138
00:59:41,580 --> 00:59:44,650
Something, it's set to something, okay.

1139
00:59:44,650 --> 00:59:47,620
And the type of that something is what,

1140
00:59:47,620 --> 00:59:51,260
is specified next to the question mark String.

1141
00:59:51,260 --> 00:59:55,930
So really you can almost think of the question mark there, that's the type

1142
00:59:55,930 --> 01:00:00,760
optional, and that String to the left is just saying if this optional is set,

1143
01:00:00,770 --> 01:00:04,130
what type of thing is it set to, in this case a String.

1144
01:00:04,140 --> 01:00:06,940
So we would call this an optional String.

1145
01:00:06,940 --> 01:00:11,840
But it's really an optional, it's not a String that can be nil,

1146
01:00:11,840 --> 01:00:14,810
it's an optional that can be a String.

1147
01:00:14,810 --> 01:00:16,510
Everybody cool with that sentence?

1148
01:00:16,510 --> 01:00:19,010
That's an important sentence to understand, okay.

1149
01:00:20,050 --> 01:00:23,950
So, this got to be an optional because this currentTitle method right here,

1150
01:00:23,950 --> 01:00:26,520
returns an optional String, let's look at that.

1151
01:00:26,520 --> 01:00:29,090
So I'm going to press Option down here, click.

1152
01:00:29,090 --> 01:00:31,520
Look at this, this is the documentation for it.

1153
01:00:31,530 --> 01:00:36,330
It's an instance variable a, a, property on UIButton.

1154
01:00:36,330 --> 01:00:37,260
Name is currentTitle.

1155
01:00:37,260 --> 01:00:39,300
The type is String, question mark.

1156
01:00:39,300 --> 01:00:41,270
And this little get means it's read-only.

1157
01:00:41,270 --> 01:00:42,670
I can only get the currentTitle.

1158
01:00:42,670 --> 01:00:44,800
I can't set it, there are other ways to set a button's title.

1159
01:00:44,800 --> 01:00:47,810
You can't set it with this method or this property.

1160
01:00:47,810 --> 01:00:51,480
So it's an optional, so that's why this ended up being an optional all right.

1161
01:00:51,480 --> 01:00:53,080
Well, that's all wonderful.

1162
01:00:53,080 --> 01:00:54,540
How do I get the String?

1163
01:00:54,550 --> 01:00:57,310
I don't want it optional, I want that button's String.

1164
01:00:57,320 --> 01:01:02,920
And the way you do that is you unwrap the optional, meaning you look in there and

1165
01:01:02,920 --> 01:01:08,060
get the val, the associated value, with exclamation point, okay.

1166
01:01:08,060 --> 01:01:11,330
What happens if I put that exclamation point there?

1167
01:01:11,330 --> 01:01:13,730
Well first of all, let me show you that when I put that exclamation point,

1168
01:01:13,730 --> 01:01:17,000
look what happened to digit, I'm Option-clicking on digit.

1169
01:01:17,000 --> 01:01:19,270
It's not an optional anymore.

1170
01:01:19,270 --> 01:01:22,500
Digit turned to a String because I unwrapped the optional that

1171
01:01:22,500 --> 01:01:25,570
came back from currentTitle, got the String out of there.

1172
01:01:25,570 --> 01:01:28,610
But what happens if this is nil?

1173
01:01:28,610 --> 01:01:30,180
What happened if this optional is nil?

1174
01:01:30,180 --> 01:01:34,710
In other words the button optional has never been set, crash, 'kay,

1175
01:01:34,720 --> 01:01:39,850
crashes your program, so if you use exclamation point to unwrap an optional,

1176
01:01:39,850 --> 01:01:45,660
and that optional's current value is not set, nil, then it will crash your program.

1177
01:01:46,930 --> 01:01:50,490
Now a lot of you might be like whoa, I'm, my products are gonna be crashing all over

1178
01:01:50,500 --> 01:01:55,900
the place and, because there's a lot of optionals in iOS, I mean a lot, okay?

1179
01:01:55,900 --> 01:01:58,930
Most things are probably optionals, because most things, it make sense,

1180
01:01:58,940 --> 01:02:00,840
they can be in an not set state at some point.

1181
01:02:02,170 --> 01:02:07,740
And yeah, in this case though, maybe you want your program to crash, okay?

1182
01:02:07,740 --> 01:02:11,850
You might want your program to crash, because if you had a button, that never

1183
01:02:11,850 --> 01:02:15,920
had its title set, and it's sending a pen digit to your controller, you probably

1184
01:02:15,920 --> 01:02:20,350
wanna have that crash, so you can find that bug, before you ship your program.

1185
01:02:20,360 --> 01:02:23,360
You see why sometimes fra, crashing is good?

1186
01:02:23,360 --> 01:02:26,760
Now if you don't wanna crash, there's a way to get around that as well.

1187
01:02:26,760 --> 01:02:28,160
And I'll show you that a little bit later.

1188
01:02:28,160 --> 01:02:32,800
But for now understanding that that's what this exclamation point does.

1189
01:02:32,800 --> 01:02:35,630
It unwraps that optional and crashes if it's nil.

1190
01:02:35,640 --> 01:02:38,040
But if it's not nil, it gets to the String or

1191
01:02:38,040 --> 01:02:40,800
whatever the optional type is out of there for you.

1192
01:02:40,810 --> 01:02:44,570
So now let's go ahead and run again and

1193
01:02:44,580 --> 01:02:51,310
we're gonna see that digit equals is gonna say the number, 'kay?

1194
01:02:51,320 --> 01:02:56,550
It's got the String off the currentTitle, no more optional in there, okay?

1195
01:02:56,550 --> 01:02:59,490
Good?

1196
01:02:59,490 --> 01:03:03,360
All right, so, now, what are we gonna do with that digit?

1197
01:03:03,360 --> 01:03:06,710
We got the digit,

1198
01:03:06,710 --> 01:03:10,060
we want to append it onto the end of this display right here, okay.

1199
01:03:10,070 --> 01:03:13,970
And so let's just do that by saying display, dot.

1200
01:03:13,970 --> 01:03:17,240
Now, again, if we have the documentation,I'd go look in the documentation and

1201
01:03:17,240 --> 01:03:21,710
it would say oh, there's a property on UILabel, which is what display is,

1202
01:03:21,710 --> 01:03:23,040
display is a UILabel.

1203
01:03:23,040 --> 01:03:25,980
There's a property and it' called text.

1204
01:03:25,980 --> 01:03:28,510
See it right there?

1205
01:03:28,510 --> 01:03:31,050
And actually, you can even see right here, the type of that, it's an optional as

1206
01:03:31,050 --> 01:03:36,220
well, because this label's text might not have been set either, okay?

1207
01:03:36,220 --> 01:03:39,060
So it has to be an optional String, okay?

1208
01:03:39,060 --> 01:03:43,290
So I'm just gonna set that equal now, display that text as an optional, so

1209
01:03:43,290 --> 01:03:46,560
what values can I send it to,set it to?

1210
01:03:46,560 --> 01:03:51,700
I could set it to nil, that would be legal because it's an optional,

1211
01:03:51,700 --> 01:03:53,940
see, no warnings, no errors.

1212
01:03:53,940 --> 01:03:55,470
That would clear out that display.

1213
01:03:55,470 --> 01:03:57,940
It would not be set to anything, or

1214
01:03:57,940 --> 01:04:00,970
I can set it to a String because it's an optional String.

1215
01:04:00,980 --> 01:04:03,680
So I'm going to set it to a String and the String I'm going to set it

1216
01:04:03,680 --> 01:04:08,580
to is display.text, what's currently in there, plus digit, okay?

1217
01:04:08,580 --> 01:04:10,080
So I'm going to append that digit on.

1218
01:04:10,080 --> 01:04:11,650
Let's get rid of that.

1219
01:04:11,650 --> 01:04:14,120
Okay, now, this has an error here.

1220
01:04:14,120 --> 01:04:15,020
Why does this have an error?

1221
01:04:15,020 --> 01:04:17,090
Anyone volunteer why this is an error?

1222
01:04:17,090 --> 01:04:18,660
See it's pointing right here.

1223
01:04:18,660 --> 01:04:21,890
There's an error, back there.

1224
01:04:21,890 --> 01:04:24,730
The display.text is an optional String.

1225
01:04:24,730 --> 01:04:27,700
Bingo. Because display.text right here is not

1226
01:04:27,700 --> 01:04:33,340
a String, it's an optional, and you can't add a String to an optional.

1227
01:04:33,340 --> 01:04:35,470
You can only add Strings to other Strings.

1228
01:04:35,470 --> 01:04:39,810
So we need to turn this into a String by unwrapping it.

1229
01:04:39,810 --> 01:04:44,250
And again, yes, this would crash if the display currently has nothing in it,

1230
01:04:44,250 --> 01:04:46,180
it's not set, okay?

1231
01:04:46,180 --> 01:04:48,880
Are we cool with that?

1232
01:04:48,880 --> 01:04:49,820
So let's run again.

1233
01:04:49,820 --> 01:04:52,850
[BLANK_AUDIO]

1234
01:04:52,850 --> 01:04:54,050
All right.

1235
01:04:54,060 --> 01:04:57,460
So now 5, oh, it put the 5 on there.

1236
01:04:57,460 --> 01:04:58,760
6, excellent.

1237
01:04:58,760 --> 01:05:00,490
It's kinda working.

1238
01:05:00,490 --> 01:05:02,560
I don't really like that 0 though.

1239
01:05:02,560 --> 01:05:03,960
That's kinda weak, 0, 5, 6.

1240
01:05:03,960 --> 01:05:06,660
That should not,

1241
01:05:06,670 --> 01:05:09,370
that 0 should've gotten cleared out, right, when I first typed that 5.

1242
01:05:09,370 --> 01:05:12,800
And that's because we really need some way in our controller to know whether we're in

1243
01:05:12,810 --> 01:05:14,770
the middle of typing a number right now.

1244
01:05:14,770 --> 01:05:16,740
Because if we're in the middle of typing a number, we want to append, but

1245
01:05:16,740 --> 01:05:18,070
if we're not in the middle of typing a number,

1246
01:05:18,080 --> 01:05:21,180
we want to start a new number, right?

1247
01:05:21,180 --> 01:05:27,020
So, let's do that, and I'm going to do that by adding a property, okay?

1248
01:05:27,020 --> 01:05:35,620
var userIsInTheMiddleOfTypingANumber , which you might say,

1249
01:05:35,630 --> 01:05:38,460
oh my God, that terrible variable, now I have to type that over and over.

1250
01:05:38,460 --> 01:05:40,900
This is the last time I'll ever have to type that, okay?

1251
01:05:40,900 --> 01:05:44,160
Because Xcode is always going to escape complete it for me, okay?

1252
01:05:44,170 --> 01:05:48,840
So long names are perfectly fine, in terms of typing load anyway.

1253
01:05:48,840 --> 01:05:50,600
So I like this name so I'm gonna keep it.

1254
01:05:50,610 --> 01:05:53,070
And it's a bool, okay.

1255
01:05:53,070 --> 01:05:54,840
So I'm typing its, giving its type.

1256
01:05:54,840 --> 01:06:01,610
So here's var name type, and notice, look at this little error right here, 'kay.

1257
01:06:01,620 --> 01:06:06,220
Okay, sometimes you're gonna get errors in Swift that are completely incomprehensible

1258
01:06:06,220 --> 01:06:08,720
to you because you haven't learned enough of Swift.

1259
01:06:08,720 --> 01:06:11,140
This one's kind of like that.

1260
01:06:11,140 --> 01:06:13,560
You see, it says, class viewController has no initializers.

1261
01:06:13,560 --> 01:06:19,660
And that's because, and pay attention, in Swift all properties

1262
01:06:19,660 --> 01:06:24,270
have to be initialized when the object is initialized.

1263
01:06:24,270 --> 01:06:29,140
Okay, you can't have a property just sitting around not initialized,

1264
01:06:29,140 --> 01:06:30,970
they have to have a value.

1265
01:06:30,970 --> 01:06:32,860
Now if they're an optional,

1266
01:06:32,860 --> 01:06:34,740
their value can be nil, but they have to have some value.

1267
01:06:34,740 --> 01:06:37,750
So we can't have this have no value.

1268
01:06:37,750 --> 01:06:40,050
Now there's two ways to give it a value.

1269
01:06:40,050 --> 01:06:42,080
One is, with an initializer.

1270
01:06:42,080 --> 01:06:45,150
Unfortunately, I'm not gonna teach that to you until next week, so

1271
01:06:45,150 --> 01:06:46,550
you can't do it that way.

1272
01:06:46,550 --> 01:06:51,220
Another way is just to say what it equals right here, okay?

1273
01:06:51,230 --> 01:06:55,290
And boom, gets rid of all our errors, obviously we don't start out in

1274
01:06:55,300 --> 01:06:59,400
the middle of typing a number,so we're good to go here, all right.

1275
01:07:01,100 --> 01:07:04,370
So now we have, we know whether the use is in the middle of typing a number.

1276
01:07:04,370 --> 01:07:06,240
We can go down here and say if the user,

1277
01:07:06,240 --> 01:07:12,240
now again, I'm just gonna hit Tab to jump past this, maybe a couple times.

1278
01:07:12,240 --> 01:07:14,640
But if the user's in the middle of typing a number,

1279
01:07:14,650 --> 01:07:17,180
then we'll do what we were doing before.

1280
01:07:17,180 --> 01:07:21,180
Otherwise, we're just gonna set the display.text equal to the new digit we

1281
01:07:21,180 --> 01:07:24,550
just typed, 'kay?

1282
01:07:24,550 --> 01:07:27,920
And we're gonna say that the user is now in the middle of typing a number.

1283
01:07:27,920 --> 01:07:30,060
Question?

1284
01:07:30,060 --> 01:07:32,190
Why would we have to do [INAUDIBLE] to display it?

1285
01:07:32,190 --> 01:07:34,830
Initialize?

1286
01:07:34,830 --> 01:07:37,660
Why did we not have to initialize this?

1287
01:07:37,670 --> 01:07:39,980
That's a fantastic question and

1288
01:07:39,980 --> 01:07:42,300
I'm gonna talk about that on Wednesday cuz there's only one minute left.

1289
01:07:42,300 --> 01:07:44,900
But that is a great question and it'll also, when I talk about it,

1290
01:07:44,910 --> 01:07:48,670
I'm gonna tell you why this is an exclamation point and not a question mark.

1291
01:07:48,680 --> 01:07:52,540
Because I told you that optionals are made with question marks.

1292
01:07:52,550 --> 01:07:55,310
So why the heck is this optional?

1293
01:07:55,310 --> 01:07:58,080
Cuz that's what it is, an exclamation point, so we'll talk about that next time.

1294
01:07:58,080 --> 01:08:01,050
All right, so let's go ahead and run one last time here.

1295
01:08:01,050 --> 01:08:04,790
And hopefully this is gonna, this 0 will be cleared out, it is and

1296
01:08:04,790 --> 01:08:07,690
hopefully this will continue to append, it is.

1297
01:08:07,690 --> 01:08:11,530
So we're in a great spot right here, we've got a calculator,

1298
01:08:11,530 --> 01:08:16,900
we can enter numbers in it, next step is, we gotta make it do some calculating, and

1299
01:08:16,900 --> 01:08:19,400
we're gonna do that next time so I will see you then.

1300
01:08:21,040 --> 01:08:24,910
For more, please visit us at stanford.edu.

