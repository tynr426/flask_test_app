1
00:00:10,510 --> 00:00:17,140
欢迎参加斯坦福大学2015年冬季学期的 CS193P 课程

2
00:00:17,140 --> 00:00:21,710
我们首先简要地概览一下今天课程的内容

3
00:00:22,720 --> 00:00:28,350
在座的同学 你们手里都有一份叙述评分标准的文档

4
00:00:28,350 --> 00:00:32,120
所以我不想像以往开课时那样再复述一遍

5
00:00:33,660 --> 00:00:36,290
相反 我首先要谈一谈 这门课到底是讲什么的

6
00:00:37,560 --> 00:00:42,060
接下来简单提一下学习本课程的先决条件 这个事对于课程挺重要的

7
00:00:42,070 --> 00:00:44,870
然后会对 iOS 进行一个快速的预览

8
00:00:44,870 --> 00:00:49,500
我想在座的和观看视频的各位同学都知道那是什么吧

9
00:00:49,510 --> 00:00:51,600
再然后 会带领大家做一个大的 demo

10
00:00:51,610 --> 00:00:54,770
这个 demo 会讲两节课 在这期间我会

11
00:00:54,780 --> 00:00:57,380
向你们介绍开发 iOS 需要用到的

12
00:00:57,380 --> 00:01:01,810
集成开发工具 Xcode 和编程语言 Swift

13
00:01:02,850 --> 00:01:04,120
那么本课程是讲什么的呢？

14
00:01:04,120 --> 00:01:06,450
这门课讲述的是开发超 cool 的 iOS 应用

15
00:01:06,450 --> 00:01:09,090
为什么这些 iOS 应用这么 cool 呢？

16
00:01:09,090 --> 00:01:11,960
因为运行这些应用的设备要么在你的口袋里

17
00:01:11,960 --> 00:01:14,220
要么在你的背包里

18
00:01:14,230 --> 00:01:16,490
如果你写了一个应用 你可以把它展示给你的朋友

19
00:01:16,500 --> 00:01:20,530
它高度集成网络 并有惊艳的动画图形效果

20
00:01:20,530 --> 00:01:24,600
它在各个方面都很 cool 我想你们应该都知道这些 否则你们就不会坐在这里了

21
00:01:24,600 --> 00:01:28,370
在这们课程中 你们也需要学习一些关于面向对象编程的知识

22
00:01:28,370 --> 00:01:32,570
你们也可能在斯坦福参加过一些关于图形、

23
00:01:32,580 --> 00:01:39,710
网络、数据库也许还有动画方面的课程

24
00:01:39,710 --> 00:01:42,580
然而我们将这些内容融合在一起

25
00:01:42,580 --> 00:01:44,050
你们会在本课程内看到所有这些东西

26
00:01:44,050 --> 00:01:46,890
现在 你应该知道这会是一个概述型课程

27
00:01:46,890 --> 00:01:52,460
我不会深入讲述网络的内容 我不会深入讲述数据库的内容

28
00:01:52,460 --> 00:01:56,360
我不会深入讲述动画的内容 但是你们会在

29
00:01:56,360 --> 00:01:59,560
真实项目的环境中用到所有的这些技术

30
00:01:59,570 --> 00:02:04,940
我认为 对于一些之前没有接触过这些的同学 本课程对他们会有很大的提升

31
00:02:06,240 --> 00:02:07,970
学习本课程的先决条件

32
00:02:07,970 --> 00:02:11,710
最重要的 你需要有很好的面向对象编程功底

33
00:02:11,710 --> 00:02:14,010
如果你不是

34
00:02:14,010 --> 00:02:18,010
还选了这个课 你可能很快就会掉队了

35
00:02:18,020 --> 00:02:22,180
我假设你已经了解关于面向对象编程的一切

36
00:02:22,190 --> 00:02:26,650
iOS 是一个完全的面向对象编程的开发环境

37
00:02:26,650 --> 00:02:28,850
我的意思不只是说编程语言是面向对象的

38
00:02:28,860 --> 00:02:31,860
在你使用过程中 它的整个设计方式都是面向对象的 如果你

39
00:02:31,860 --> 00:02:33,960
不熟悉类似于子类之类的东西

40
00:02:33,960 --> 00:02:37,930
那么你真的有可能真的跟不上了

41
00:02:37,930 --> 00:02:42,230
斯坦福编程相关课程有 CS16A、CA16B、

42
00:02:42,240 --> 00:02:47,340
CS16X、以及 CS107 虽然它并不是专门的面向对象课程

43
00:02:47,340 --> 00:02:49,740
但至少是一门重量级的编程课程

44
00:02:49,740 --> 00:02:52,610
CS108 是非常好的面向对象课程

45
00:02:52,610 --> 00:02:55,910
如果你曾经参加过 CS108 你可能已经有了充分的准备

46
00:02:55,920 --> 00:03:00,550
CS110 同样也没有太多关于面向对象的知识

47
00:03:00,550 --> 00:03:03,050
但同样是一门非常好的编程课程 因为其中有大量的编程实践

48
00:03:03,050 --> 00:03:05,150
事实上 所有这些课程的内容都是关于编程的

49
00:03:05,160 --> 00:03:08,390
在头几个星期 你们需要为了学习新语言 多做一些阅读

50
00:03:08,390 --> 00:03:12,290
在这之后 一直到最终的项目

51
00:03:12,300 --> 00:03:14,460
都需要运用到你新学到的语言进行编程任务

52
00:03:14,460 --> 00:03:17,800
所以 如果你真的不适应面向对象编程

53
00:03:17,800 --> 00:03:21,670
或者你真的不太适应写较大的程序

54
00:03:21,670 --> 00:03:26,170
那么这门课程对你来说将是一个巨大的挑战

55
00:03:27,840 --> 00:03:30,680
那么 iOS 都包括哪些部分呢？

56
00:03:30,680 --> 00:03:34,080
它是一个庞大的系统 其中包含很多部分

57
00:03:34,080 --> 00:03:38,250
不太可能能用一两句话将其表述完整

58
00:03:38,250 --> 00:03:42,650
我在这个 slides 中 将其分为四层

59
00:03:42,660 --> 00:03:46,760
这四层从靠近硬件的底层

60
00:03:46,760 --> 00:03:48,960
到靠近用户的顶层

61
00:03:48,960 --> 00:03:52,280
在最下面一层

62
00:03:52,280 --> 00:03:55,600
很多人没有注意到 iOS 基本就是一个基于 Unix 的操作系统

63
00:03:55,600 --> 00:04:01,550
它大量借鉴了 Mac OS X 的内核部分

64
00:04:01,560 --> 00:04:03,910
当然 它专门为在电池等等方面受到限制的移动设备优化过的

65
00:04:03,910 --> 00:04:08,740
但基本上它仍可看作是一个 Unix 系统

66
00:04:08,750 --> 00:04:11,510
这样的话 在这层中包含了 socket（套接字）、

67
00:04:11,510 --> 00:04:15,120
permission（权限） 等等类似的部分

68
00:04:15,120 --> 00:04:19,190
它靠近底层硬件 并保证其正常工作

69
00:04:19,190 --> 00:04:23,490
在这之上 是一个能够让你使用大量的面向对象编程技术的

70
00:04:23,490 --> 00:04:26,730
面向对象的层

71
00:04:26,730 --> 00:04:30,230
但是这层不包含 UI

72
00:04:30,230 --> 00:04:34,170
其更多用于通过面向对象的编程方式访问硬件

73
00:04:34,170 --> 00:04:36,370
或者访问网络 等等

74
00:04:36,370 --> 00:04:39,300
它是一个很大的层 我们将花大量时间在该层上

75
00:04:39,310 --> 00:04:44,980
因为我们需要这些原始组件来建立更高的层

76
00:04:44,980 --> 00:04:48,450
我希望我们有更多时间花在这一层

77
00:04:48,450 --> 00:04:50,250
但是我们的课程只有十周

78
00:04:50,250 --> 00:04:54,650
在斯坦福的课程中 你会感叹时间过得如此之快

79
00:04:55,750 --> 00:04:58,090
再往上 是一整个媒体层

80
00:04:58,090 --> 00:05:02,060
包括比如你们熟悉的 JPEG 等的静态图像

81
00:05:02,060 --> 00:05:07,700
包括拍摄视频、编辑视频等的视频处理

82
00:05:07,700 --> 00:05:13,700
不可思议的音频框架 用于处理 3D 音效 以及游戏等等

83
00:05:13,700 --> 00:05:16,670
很不幸 我对这层知道的并不多

84
00:05:16,670 --> 00:05:20,870
但是我可以告诉你它里面有什么 这样你用到的时候就可以查阅相关资料

85
00:05:20,880 --> 00:05:23,940
或者当你正在写一个用到大量音频视频技术的应用的时候

86
00:05:23,950 --> 00:05:26,480
你会知道去哪找这些资料

87
00:05:26,480 --> 00:05:32,750
我们会在 Cocoa Touch 层上花费大量的时间

88
00:05:32,750 --> 00:05:35,320
Cocoa Touch 层里包含了 button

89
00:05:35,320 --> 00:05:38,890
slider 等类似的控件

90
00:05:38,890 --> 00:05:43,030
你可以通过它们来和你的用户建立互动

91
00:05:43,030 --> 00:05:47,930
我们会在 Cocoa Touch 上花费70%甚至更多的时间

92
00:05:47,930 --> 00:05:50,270
这也是一个非常强大的层

93
00:05:50,270 --> 00:05:54,800
你们可能在手机上见过地图类的应用

94
00:05:54,810 --> 00:05:58,340
事实上 有一个几乎完整的地图应用对象

95
00:05:58,340 --> 00:06:01,480
你只需要直接拖进你的程序里 你的程序中就有地图了

96
00:06:01,480 --> 00:06:04,050
同样的还有浏览器

97
00:06:04,050 --> 00:06:06,610
如果你想让你的应用有浏览网页的功能 那么仅仅需要拖拽一个对象

98
00:06:06,620 --> 00:06:08,650
再调用几个方法即可

99
00:06:08,650 --> 00:06:13,590
所以在强大和高级的 Cocoa Touch  我们会了解很多

100
00:06:13,590 --> 00:06:16,190
并且在此花费大量的时间

101
00:06:16,190 --> 00:06:19,830
顺便说一下 我抬眼一瞥的时候

102
00:06:19,830 --> 00:06:21,490
有可能会看到你们的提问 但是有时我也会注意不到

103
00:06:21,500 --> 00:06:25,300
所以尽量让我注意到你

104
00:06:25,300 --> 00:06:28,100
如果你感觉打断我没什么问题的话

105
00:06:28,100 --> 00:06:31,300
接下来就是开发平台本身

106
00:06:31,300 --> 00:06:32,800
我们会用这些工具来搭建 iOS 应用

107
00:06:32,810 --> 00:06:34,970
其中都有什么？

108
00:06:34,970 --> 00:06:39,040
有很多很棒的工具都集成在 Xcode 6 内

109
00:06:39,050 --> 00:06:42,410
可能还有其它一些辅助编程工具

110
00:06:42,420 --> 00:06:45,280
但是 Xcode 6 你值得拥有 它是一个代码编辑器

111
00:06:45,280 --> 00:06:50,020
它是一个编译器 是一个调试器 总之是一个很棒的应用

112
00:06:50,020 --> 00:06:54,390
所以我们这个课程里会讲到很多有关 Xcode 6 的知识

113
00:06:54,390 --> 00:06:59,360
而你编程的时候会一直使用 Xcode 你不需要

114
00:06:59,360 --> 00:07:04,330
在终端下用 Emacs 或其他的编辑器 你只需要使用 Xcode 6

115
00:07:04,330 --> 00:07:08,870
现在可以使用两种语言开发 iOS 应用

116
00:07:08,870 --> 00:07:12,040
你可以选择使用任何一个

117
00:07:12,040 --> 00:07:14,070
其中一个名为 Objective-C

118
00:07:14,080 --> 00:07:17,710
它也是 iOS 一直以来使用的开发语言

119
00:07:17,710 --> 00:07:22,550
这个语言已经有大概25到30年的历史了

120
00:07:22,550 --> 00:07:27,120
人们用它为 Mac 开发应用

121
00:07:27,120 --> 00:07:32,190
因此 它是非常成熟的语言 但是已经25 30岁了

122
00:07:32,190 --> 00:07:36,960
所以苹果公司在去年夏天发布了一个叫 Swift 的全新的语言

123
00:07:36,960 --> 00:07:40,660
你可以使用 Swift 在 iOS 上开发任何应用

124
00:07:40,670 --> 00:07:45,170
它也是本次课我们要学习的语言 它是一门现代的语言

125
00:07:45,170 --> 00:07:48,700
为了创建 Swift 苹果公司做了很多工作

126
00:07:48,710 --> 00:07:52,340
它吸收了很多已存在的编程语言的优点

127
00:07:52,340 --> 00:07:57,680
二十五年以来 特别是近五到十年的语言的优点

128
00:07:57,680 --> 00:08:02,980
它语法简洁 类型安全 并且还有类型推断以及

129
00:08:02,990 --> 00:08:06,990
大量的特性 可以同时拥有类型安全

130
00:08:06,990 --> 00:08:11,290
又不需要不断地指定各种类型

131
00:08:11,290 --> 00:08:14,660
所以我们只使用 Swift 不会讲太多 Objective-C

132
00:08:14,660 --> 00:08:16,400
我也没有时间讲两种语言

133
00:08:16,400 --> 00:08:19,780
（学生提问）

134
00:08:19,780 --> 00:08:23,170
（学生提问）

135
00:08:23,170 --> 00:08:26,270
这个同学的问题是 如果我将步入社会

136
00:08:26,270 --> 00:08:29,240
并想找一份做 iOS 开发的工作

137
00:08:29,240 --> 00:08:30,910
我是否还需要学习 Objective-C？

138
00:08:30,910 --> 00:08:34,040
答案是 这取决于你的公司

139
00:08:34,050 --> 00:08:36,010
可能在短期内 答案是肯定的

140
00:08:36,010 --> 00:08:39,920
但是随着时间的推移 可能有越来越多的人会转到 Swift

141
00:08:39,920 --> 00:08:43,490
好消息这两门语言在 iOS 之下的 API

142
00:08:43,490 --> 00:08:45,920
是完全相同的

143
00:08:45,920 --> 00:08:49,160
仅仅只是语法上

144
00:08:49,160 --> 00:08:52,390
会有略微的不同 但是

145
00:08:52,400 --> 00:08:54,730
你们在这里学习的 iOS 的部分

146
00:08:54,730 --> 00:08:57,630
使用 Objective-C 完全也可以实现

147
00:08:57,630 --> 00:08:59,570
所有的方法都是一样的

148
00:08:59,570 --> 00:09:00,930
仅仅只有语法上的一点区别

149
00:09:00,940 --> 00:09:02,540
所以对于没有学全两门语言

150
00:09:02,540 --> 00:09:05,270
不要感到沮丧 一旦你掌握了 Swift

151
00:09:05,270 --> 00:09:07,910
再学 Objective-C 也很快

152
00:09:07,910 --> 00:09:11,810
这个问题问得很好

153
00:09:11,810 --> 00:09:14,610
当然 iOS 内部拥有众多的框架

154
00:09:14,610 --> 00:09:18,320
框架就是你会用到的类库以及基本对象

155
00:09:18,320 --> 00:09:20,980
作为搭建你的应用的模块

156
00:09:20,990 --> 00:09:23,320
我们也会学习它们

157
00:09:23,320 --> 00:09:25,190
UIKit 就是其中主要的一个

158
00:09:25,190 --> 00:09:27,820
它包含了大量的关于用户界面的内容

159
00:09:27,830 --> 00:09:32,260
在 Core Service 中 我提及最多的就是 Foundation 框架

160
00:09:32,260 --> 00:09:37,070
其他还有很多 Core Motion 框架用于处理设备移动、

161
00:09:37,070 --> 00:09:42,070
旋转、陀螺及加速度等响应 Core Data 框架用于操作面向对象的数据库

162
00:09:42,070 --> 00:09:44,960
等等

163
00:09:44,960 --> 00:09:47,840
我会尽我所能尽可能多的传授给你们 特别是那些大的框架

164
00:09:47,840 --> 00:09:50,840
但是这对一个只有十周的课程来说 内容太多了

165
00:09:51,850 --> 00:09:58,180
然而以上的那些东西均不是我们第一课要讲的内容 我首先要说的是一个叫做 MVC 的设计模式

166
00:09:58,190 --> 00:10:01,120
每年我都会问 同样今年我也要问这个问题

167
00:10:01,120 --> 00:10:05,360
你们有多少同学曾经在其他课上用过 MVC？

168
00:10:05,360 --> 00:10:07,190
哦 有一半的同学

169
00:10:07,190 --> 00:10:09,690
有同学不知道 那么我先说说 MVC

170
00:10:09,700 --> 00:10:11,590
就算你不了解它 也不用担心

171
00:10:11,600 --> 00:10:15,630
MVC 是你设计应用的一种方式 用它设计的代码

172
00:10:15,630 --> 00:10:21,140
无论对于你自己或者其他人都具有可读性 也更易调试 易复用

173
00:10:21,140 --> 00:10:25,270
而 iOS 从一开始就使用 MVC 设计

174
00:10:25,280 --> 00:10:28,210
而这仅仅是创建一个 iOS 应用整体中的一部分

175
00:10:28,210 --> 00:10:33,450
我要开始做今天的 demo 但是在周三的课上不会使用 MVC

176
00:10:33,450 --> 00:10:37,920
但是下周一我会应用 MVC 继续今天的 demo

177
00:10:37,920 --> 00:10:41,420
周三的时候你们就会对 MVC 有了充分的理解

178
00:10:41,420 --> 00:10:45,260
然后在周三我会放一些 MVC 的 slides 来为下周一做准备

179
00:10:46,830 --> 00:10:49,690
好 下面开始做 demo

180
00:10:49,700 --> 00:10:53,930
接下来我要做的 demo 是我前几年做的一个计算器 运行起来还不错

181
00:10:53,930 --> 00:10:55,970
我们用 Swift 来实现它

182
00:10:55,970 --> 00:10:57,370
现在 我们来创建这个计算器

183
00:10:57,370 --> 00:11:00,500
我们将从头开始 一步一步创建它

184
00:11:00,510 --> 00:11:04,540
我喜欢动手敲代码来做演示 而不会复制或者

185
00:11:04,540 --> 00:11:06,910
粘贴大段代码什么的

186
00:11:06,910 --> 00:11:09,810
我知道 我看到很多人已经打开笔记本电脑 很多人都喜欢

187
00:11:09,810 --> 00:11:12,730
跟着我亲自动手尝试

188
00:11:12,730 --> 00:11:15,650
我打字速度很快 但是通常在大多数演示中 只要你想 还是能够跟上我的速度

189
00:11:15,650 --> 00:11:20,420
我并不推荐这么做 或者说不必要这样

190
00:11:20,420 --> 00:11:28,400
你们可以回去看视频

191
00:11:28,400 --> 00:11:30,530
斯坦福的学生也可以这么做

192
00:11:30,530 --> 00:11:34,800
因为你们的第一次作业是要重现我所做的

193
00:11:34,800 --> 00:11:37,040
这就是你第一次作业的90%

194
00:11:37,040 --> 00:11:40,270
重现我今天和星期三做的

195
00:11:40,270 --> 00:11:42,940
我不会把代码给你 因为我想让你自己动手敲代码

196
00:11:42,940 --> 00:11:45,610
如果你是在看这个视频

197
00:11:45,610 --> 00:11:51,210
看一遍我干了什么 然后自己敲代码

198
00:11:51,220 --> 00:11:56,340
我将在周三对所有问题做解释

199
00:11:56,340 --> 00:11:58,220
我把一些将要提及的部分放到了 slides 里 但我不会提前

200
00:11:58,220 --> 00:12:01,620
给你们讲这些内容 我要坐下 然后开始演示

201
00:12:01,630 --> 00:12:04,490
在这之前还有什么问题吗？

202
00:12:04,500 --> 00:12:08,400
我知道我讲得有点快 因为我想最大化你们的学习时间

203
00:12:08,400 --> 00:12:11,870
-（同学提问）

204
00:12:11,870 --> 00:12:12,770
什么？

205
00:12:12,770 --> 00:12:14,700
-（同学提问）

206
00:12:14,700 --> 00:12:18,140
问题是 我们应该用哪个版本的 Xcode？

207
00:12:18,140 --> 00:12:20,810
你们直接使用在 Mac App Store 上的那个版本就好了

208
00:12:20,810 --> 00:12:23,240
去 Mac App Store 上免费下载

209
00:12:23,240 --> 00:12:25,480
使用那里的最新的版本

210
00:12:25,480 --> 00:12:28,610
如果有更新的版本出来 那么我们就更新

211
00:12:28,620 --> 00:12:30,620
总之我们用的是最新版本的 Xcode

212
00:12:30,620 --> 00:12:31,350
还有问题吗？

213
00:12:31,350 --> 00:12:32,620
（同学提问）

214
00:12:32,620 --> 00:12:35,620
不 我们不用测试版或者类似的一些版本

215
00:12:35,620 --> 00:12:37,390
我们只用当前最新的 Xcode

216
00:12:41,740 --> 00:12:44,490
那么我要开始运行 Xcode 来演示了

217
00:12:44,500 --> 00:12:50,660
在这 Xcode

218
00:12:50,670 --> 00:12:53,270
运行 Xcode 以后 我们把其他东西隐藏起来

219
00:12:53,270 --> 00:12:55,140
你会看到这个欢迎界面

220
00:12:55,140 --> 00:12:58,370
在欢迎界面的右边 将显示你所有的项目

221
00:12:58,370 --> 00:13:00,710
由于这是本学期开始 我们还没有任何项目

222
00:13:00,710 --> 00:13:04,040
但是慢慢的 我们会逐渐将这个列表填满

223
00:13:04,050 --> 00:13:07,280
如果你不喜欢这个欢迎页面 可以将它关闭

224
00:13:07,280 --> 00:13:10,820
欢迎界面中也可以创建例如 playground

225
00:13:10,820 --> 00:13:13,250
或者源代码管理 在这里

226
00:13:13,250 --> 00:13:15,020
我们在很长一段时间内不会碰那些

227
00:13:15,020 --> 00:13:16,850
我们需要关注的是这个选项 这里

228
00:13:16,860 --> 00:13:18,760
创建一个新的 Xcode 项目

229
00:13:18,760 --> 00:13:23,740
如果你看不到欢迎界面 你也可以 File > New > Project

230
00:13:23,740 --> 00:13:25,030
它们都是一样的

231
00:13:25,030 --> 00:13:28,460
下面我点击这里 创建一个新项目

232
00:13:28,470 --> 00:13:31,600
当我创建新项目的时候 它需要知道你想创建什么类型的项目

233
00:13:31,600 --> 00:13:38,490
Xcode 可以被用于在 Mac OS X 上创建框架 以及所有类似的东西

234
00:13:38,490 --> 00:13:41,070
但是我们将要创建的是 iOS 应用

235
00:13:41,080 --> 00:13:43,380
事实上 我们经常用到这里的模板

236
00:13:43,380 --> 00:13:47,230
Single View Application

237
00:13:47,230 --> 00:13:49,680
这就是你的基础 MVC 入门应用

238
00:13:49,690 --> 00:13:53,720
我们会用其他这些创建非常复杂的应用 但是我们从这里开始

239
00:13:53,720 --> 00:13:55,590
所以你会经常点这个

240
00:13:55,590 --> 00:13:58,520
你需要填写应用的名称

241
00:13:58,530 --> 00:14:04,630
我们在创建的是计算器应用 所以我们给它起名为 Calculator

242
00:14:04,630 --> 00:14:06,660
orgnization 并不重要 它只会出现在

243
00:14:06,670 --> 00:14:10,330
类似版权信息 或者你的代码开头的注释中 所以

244
00:14:10,340 --> 00:14:12,290
不用管它

245
00:14:12,290 --> 00:14:14,240
但是这里的 organization Identifier 是非常重要的

246
00:14:14,240 --> 00:14:19,230
它是你的唯一标识符

247
00:14:19,230 --> 00:14:20,840
所以在下一行里 我们需要一个新的

248
00:14:20,850 --> 00:14:23,950
唯一的标识符 标识你的计算器

249
00:14:23,950 --> 00:14:26,210
所以如果你是斯坦福的学生

250
00:14:26,220 --> 00:14:31,490
你可以用这个倒序的域名：edu.stanford.cs1983p

251
00:14:31,490 --> 00:14:36,660
并用你的 SU net ID 将 instructor 替换

252
00:14:36,660 --> 00:14:37,920
因为你的 ID 不会和别人的重复

253
00:14:37,930 --> 00:14:39,860
这样这个标识符就能作为唯一标识你

254
00:14:40,900 --> 00:14:44,200
我说过 我们要用 Swift 而不是 Objective-C

255
00:14:44,200 --> 00:14:49,270
我们要创建的应用要能同时工作在 iPad 和 iPhone上

256
00:14:49,270 --> 00:14:51,500
所以选择 Universal

257
00:14:51,500 --> 00:14:54,200
你也可以选择只为其中一种设备开发

258
00:14:54,210 --> 00:14:56,740
但是我们在这里选择 Universal

259
00:14:56,740 --> 00:15:00,240
在这几周之内我们不会做这个应用的 iPad 部分

260
00:15:00,250 --> 00:15:04,350
但是我们最终会把它设计成一个同时能够运行在 iPad 和 iPhone 上的应用

261
00:15:04,350 --> 00:15:06,180
我们现在还用不到 Core Data

262
00:15:06,180 --> 00:15:09,320
那是面向对象的数据库 现在先不选它

263
00:15:09,320 --> 00:15:13,990
现在 它问我们要把项目保存在哪里 我强烈建议保存在你的

264
00:15:13,990 --> 00:15:18,990
home 目录下 这是我的 home 目录 里面有一个 Developer 的目录 看到没？

265
00:15:19,000 --> 00:15:22,000
当然你也可以在这里放其它文件夹 如果你想创建更多的话

266
00:15:22,000 --> 00:15:25,100
不过我建议你放在主目录下的 Developer 文件夹

267
00:15:25,100 --> 00:15:28,270
Source Control 我们将会在这学期的某些时候讲到 不过

268
00:15:28,270 --> 00:15:30,140
我们先跳过这个

269
00:15:30,140 --> 00:15:31,770
所以那个选项你可以不打勾

270
00:15:33,040 --> 00:15:37,840
好 这就是我们创建的第一个项目

271
00:15:37,840 --> 00:15:43,580
这里你看到的就是 Xcode, 这是 Xcode 的主窗口

272
00:15:43,580 --> 00:15:46,950
中间这部分是主要的工作区域

273
00:15:46,950 --> 00:15:51,020
左边的区域 被称作 Navigator（导航栏）

274
00:15:51,020 --> 00:15:54,820
通常用来选择特定的选项 不过也你可以

275
00:15:54,830 --> 00:15:59,360
点击这个小图标 对整个项目进行搜索

276
00:15:59,360 --> 00:16:04,830
这里用来查看断点 这里用来查看之前编译的项目

277
00:16:04,840 --> 00:16:09,070
这里可以以类的层次结构展开整个项目 等等

278
00:16:09,070 --> 00:16:12,310
不过我们通常会点击最左边的这里 这里可以看到我们所有的文件

279
00:16:12,310 --> 00:16:17,750
你的项目可以像这样按层次的展现出来

280
00:16:17,750 --> 00:16:19,580
当你选择左边区域这里的某些部分

281
00:16:19,580 --> 00:16:23,580
中间区域会出现你刚刚选择的那部分内容

282
00:16:23,590 --> 00:16:26,590
这里我选择了这个项目本身

283
00:16:26,590 --> 00:16:28,990
所以这里可以看到这个项目的很多设置项

284
00:16:28,990 --> 00:16:31,660
在这上面你还可以看到更多设置项

285
00:16:31,660 --> 00:16:34,430
随着学期进展我们将会讲到这些

286
00:16:34,430 --> 00:16:37,100
你已经看到其中的一部分 比如这里的 Bundle identifier（包标识符）

287
00:16:37,100 --> 00:16:38,700
还可以看到这里是一个通用 app

288
00:16:38,700 --> 00:16:41,030
不过我们今天不会讲关于项目设置

289
00:16:41,030 --> 00:16:42,800
的更多内容

290
00:16:42,800 --> 00:16:45,100
我们会把注意力集中在这些文件

291
00:16:45,100 --> 00:16:47,400
甚至是这些文件 比如 AppDelegate

292
00:16:47,410 --> 00:16:50,840
我会把它们移到 Supporting Files

293
00:16:50,840 --> 00:16:53,080
image assets 文件夹也是

294
00:16:53,080 --> 00:16:56,110
LaunchScreen 我们之后会讲到

295
00:16:56,110 --> 00:16:58,280
不过我们现在会把注意力集中在这两个文件上

296
00:16:58,280 --> 00:17:03,950
Main.storyboard 和 ViewController.swift

297
00:17:03,950 --> 00:17:06,190
顺便说 在 MVC 中这称为 V

298
00:17:06,190 --> 00:17:10,890
即视图 这是 C 即控制器 我们将在周三讲到 MVC

299
00:17:11,990 --> 00:17:13,660
所以 这些东西包含什么

300
00:17:13,660 --> 00:17:16,230
这是 Main.storyboard 如果我点击它

301
00:17:16,230 --> 00:17:18,930
可以看到我们的 UI 出现在中间

302
00:17:19,970 --> 00:17:21,970
这就是我们的 UI

303
00:17:21,970 --> 00:17:23,970
对于计算器而言 这里将会是一个稍微小一点的显示区域

304
00:17:23,970 --> 00:17:27,810
这里会显示我们计算出来的数字或任何其它在上面的数字

305
00:17:27,810 --> 00:17:32,440
下面这里会有很多按钮 包括数字 乘除

306
00:17:32,450 --> 00:17:34,910
加减 平方根

307
00:17:34,910 --> 00:17:36,450
都会出现在这里

308
00:17:36,450 --> 00:17:39,520
所以我们完全使用图形化来搭建

309
00:17:39,520 --> 00:17:41,050
整个用户界面

310
00:17:41,050 --> 00:17:43,050
我们不会写代码

311
00:17:43,050 --> 00:17:45,250
来指出哪个按钮该放哪个位置

312
00:17:45,260 --> 00:17:47,410
一点代码都没有

313
00:17:47,410 --> 00:17:49,560
我们只是用我们的鼠标来搭建我们的用户界面

314
00:17:50,490 --> 00:17:53,700
那我们的代码写在哪里 什么时候需要写代码？

315
00:17:53,700 --> 00:17:57,200
看 ViewController.swift 这个 Swift 文件

316
00:17:57,200 --> 00:18:00,530
这是你们中多数人第一次看 Swift 文件

317
00:18:00,540 --> 00:18:03,100
这是我们的 controller 用来控制我们的用户界面

318
00:18:03,110 --> 00:18:05,870
这就是为什么我们称之为 view controller 或 controller

319
00:18:05,870 --> 00:18:09,180
它控制 UI 这意味着它会做某些事情来

320
00:18:09,180 --> 00:18:13,650
比如指定这个 UI 计算器界面应该怎样工作

321
00:18:13,650 --> 00:18:16,720
这样当你点击数字按钮 它会更新显示的内容

322
00:18:16,720 --> 00:18:19,850
当我们点击乘法 它将会进行乘法运算并且

323
00:18:19,850 --> 00:18:21,520
把结果显示出来

324
00:18:21,520 --> 00:18:24,220
所以说它会控制界面的展示

325
00:18:24,220 --> 00:18:28,590
我们稍后再回到这里 现在我们先从搭建界面开始

326
00:18:28,590 --> 00:18:33,800
顺便说一句 你可以看到这个用户界面

327
00:18:33,800 --> 00:18:39,140
因为屏幕的低分辨率 所以我的 UI 没有很好地适应空间

328
00:18:39,140 --> 00:18:42,670
你们可能有比我更高的屏幕分辨率的屏幕

329
00:18:42,670 --> 00:18:45,970
不过如果你们没有 你们可以通过右键点击来进行放大和缩小

330
00:18:45,980 --> 00:18:49,510
如果你在这个背景区域点击右键 你可以放大缩小

331
00:18:49,510 --> 00:18:52,650
你也可以采用双击 看如果我双击这里

332
00:18:52,650 --> 00:18:56,120
它放大到正常水平 如果我再双击背景 它会缩小

333
00:18:56,120 --> 00:18:57,520
这样我可以看到我的整个 UI 界面

334
00:18:57,520 --> 00:18:59,990
当我们完成了一个复杂的 app

335
00:18:59,990 --> 00:19:05,660
我们将会有一大堆这些方块区域 这些我们称之为 scenes（场景）

336
00:19:05,660 --> 00:19:11,400
一个场景代表一个完整显示所有信息的手机屏幕

337
00:19:11,400 --> 00:19:15,070
就像你使用过的许多 iOS 程序

338
00:19:15,070 --> 00:19:20,440
你知道用户使用这个 app 从一个屏幕切换到另外一个屏幕

339
00:19:20,440 --> 00:19:22,110
这也是你搭建 app 的方式

340
00:19:22,110 --> 00:19:25,980
这个 StoryBoard 最终将会有一个大的图来显示所有的

341
00:19:25,980 --> 00:19:28,950
场景间的切换

342
00:19:28,950 --> 00:19:31,010
好了 所以这个 StoryBoard 将会用来搭建

343
00:19:31,020 --> 00:19:35,320
完整的 app 所以当你真的看到整个应用程序时 还挺 cool 的

344
00:19:36,350 --> 00:19:39,890
所以我们将从这一个小的场景开始

345
00:19:39,890 --> 00:19:41,360
搭建我们的计算器

346
00:19:41,360 --> 00:19:44,860
我们先从搭建计算器的界面显示开始

347
00:19:44,860 --> 00:19:45,990
当我想显示一些东西时

348
00:19:46,000 --> 00:19:47,910
我应该怎么做呢？

349
00:19:47,910 --> 00:19:49,830
我们看一下这里的右边区域

350
00:19:49,830 --> 00:19:53,930
右边的整块区域 我们称为 Utilities （工具）区域

351
00:19:53,940 --> 00:19:56,670
你可以看到这里有底部和顶部 对不？

352
00:19:56,670 --> 00:20:01,970
来到底部这里的第三个按钮 它被我们称为

353
00:20:01,980 --> 00:20:07,810
Object Library （对象库） 你可你看到这里有非常多的对象

354
00:20:07,820 --> 00:20:09,880
非常多的这类东西

355
00:20:09,880 --> 00:20:13,020
我们整个学期会接触到很多这样的东西

356
00:20:13,020 --> 00:20:15,990
这些是用于搭建你的 UI 的

357
00:20:15,990 --> 00:20:19,360
靠近上面 但不完全靠近上面 就在这上面

358
00:20:19,360 --> 00:20:22,730
你会开始看到像按钮 文本区域这样的东西

359
00:20:22,730 --> 00:20:26,400
很明显这是我们构建显示区域所需要的东西

360
00:20:26,400 --> 00:20:28,530
是某种显示文本的区域 这里有两种

361
00:20:28,530 --> 00:20:32,140
这一种称为 Label 的是一种静态的文本

362
00:20:32,140 --> 00:20:37,010
这种称为 Text Field 是可编辑的文本 也就是说 你当你按下时

363
00:20:37,010 --> 00:20:39,840
键盘会从底部滑出来 所以你可以输入文本

364
00:20:39,840 --> 00:20:43,600
因此对于计算器来说 你确实不能按下屏幕并且输入

365
00:20:43,600 --> 00:20:45,010
所以我们需要静态的文本

366
00:20:45,020 --> 00:20:48,720
所以我用鼠标把它拖出来

367
00:20:48,720 --> 00:20:50,990
现在 当我把它拖入我的 UI 中时

368
00:20:50,990 --> 00:20:53,250
你会看到很多蓝色虚线出现

369
00:20:53,260 --> 00:20:55,220
看到没？

370
00:20:55,220 --> 00:20:57,190
这些可以帮助我们正确地摆放这些东西

371
00:20:57,190 --> 00:21:00,790
比如说我可以把它放在视图的中间

372
00:21:01,730 --> 00:21:04,330
我可以把它放在靠顶部这里 我待会就准备这样做

373
00:21:05,670 --> 00:21:10,070
你总是会希望你放入 UI 中的东西

374
00:21:10,070 --> 00:21:14,640
尽可能地去利用这些蓝色虚线

375
00:21:14,640 --> 00:21:18,090
当你后面学习到 Auto Layout (自动布局)时就会明白为什么这么做了

376
00:21:18,090 --> 00:21:19,740
我这里将会涉及一点关于Auto Layout 的东西 可以让你

377
00:21:19,750 --> 00:21:21,250
对它有点感觉

378
00:21:21,250 --> 00:21:24,950
不过 在你搭建用户界面的时候 这些蓝色虚线将会给你最大的帮助

379
00:21:24,950 --> 00:21:28,320
你会很快知道为什么了

380
00:21:28,320 --> 00:21:30,690
每次你像这样拖动东西 你可以

381
00:21:30,690 --> 00:21:34,060
看到环绕在外面的东西 它表明了这个被选中了

382
00:21:34,060 --> 00:21:37,460
它们也可以用于调整大小 所以可以抓住它然后或者重新调整它们的大小

383
00:21:37,460 --> 00:21:42,230
当你调整大小时 这些蓝色虚线会重新排成一列 看到没？

384
00:21:42,230 --> 00:21:43,960
所以当你调整大小时 你肯定想

385
00:21:43,970 --> 00:21:47,100
把这些东西排成一列

386
00:21:47,100 --> 00:21:49,970
你还可以直接编辑它 只需要双击一下

387
00:21:49,970 --> 00:21:54,140
通常计算器的初始状态不是这样子

388
00:21:54,140 --> 00:21:58,340
初始状态上面不会显示Label 它可能会显示0

389
00:21:58,350 --> 00:22:01,310
或类似的东西

390
00:22:01,320 --> 00:22:04,350
另外还有一种 当你无法直接编辑这些

391
00:22:04,350 --> 00:22:08,250
你拖到UI里的内容时

392
00:22:08,260 --> 00:22:12,260
你可以使用右上方的Utilities windows（工具窗口）

393
00:22:12,260 --> 00:22:13,820
所以当你看上面这里

394
00:22:13,830 --> 00:22:17,060
在顶部这里有许多标签 包括像这种

395
00:22:17,060 --> 00:22:20,030
用于设置尺寸的Size Inspector（尺寸检查器）

396
00:22:20,030 --> 00:22:24,300
这个标签 称作Attributes Inspector（属性检查器） 非常重要

397
00:22:24,300 --> 00:22:27,900
这是一个面向对象的检查器 当你选择不同的东西时

398
00:22:27,910 --> 00:22:30,610
用户界面将会有所改变

399
00:22:30,610 --> 00:22:33,880
通过它可以让你修改选中的内容的属性

400
00:22:33,880 --> 00:22:34,880
比如

401
00:22:34,880 --> 00:22:37,880
计算器中这个0其实不是在左边 对不？

402
00:22:37,880 --> 00:22:40,650
这个0应该是在右边

403
00:22:40,650 --> 00:22:43,580
这些数字就像是从右边出现的

404
00:22:43,590 --> 00:22:47,420
我们可以很轻松地使用这里的Alignment（校准）修改它

405
00:22:47,420 --> 00:22:50,590
我点击这里 你就可以看到0到了右边

406
00:22:50,590 --> 00:22:52,130
还有 也许我想要大点的字体

407
00:22:52,130 --> 00:22:53,230
你可以看到这里的Font（字体）

408
00:22:53,230 --> 00:22:55,660
我可以点击这里 选择不同的字体

409
00:22:55,660 --> 00:22:59,470
把它增大到32点 稍微大点的字体

410
00:22:59,470 --> 00:23:00,930
你可以看到内容有点被裁剪了

411
00:23:00,930 --> 00:23:02,570
字体放大后 因此这里显得太小

412
00:23:02,570 --> 00:23:06,970
所以我可以重新调整大小 使它能够适应字体的大小

413
00:23:08,470 --> 00:23:10,340
这就是我们搭建用户界面的方式

414
00:23:10,340 --> 00:23:14,940
非常直观的操作 并且非常地面向对象

415
00:23:14,950 --> 00:23:17,450
当你加入不同的对象时你就可以看到

416
00:23:17,450 --> 00:23:20,180
所以 让我们真正地运行我们的应用吧

417
00:23:20,180 --> 00:23:22,950
尽管我们还没有完成任何关于计算的东西

418
00:23:22,950 --> 00:23:25,990
不过可以让我们运行一下看看是什么效果

419
00:23:25,990 --> 00:23:27,220
应该怎么运行？

420
00:23:27,220 --> 00:23:29,560
嗯 这里你可以看到 iPhone 6？

421
00:23:29,560 --> 00:23:33,330
这实际上是可以让你选择用什么设备

422
00:23:33,330 --> 00:23:35,160
运行你的应用

423
00:23:35,160 --> 00:23:38,630
如果当你连上了一个 iOS 设备时 你可以在iOS设备上运行

424
00:23:38,630 --> 00:23:40,270
现在我还没有连接

425
00:23:41,270 --> 00:23:43,050
不过你可以这样做试试

426
00:23:43,050 --> 00:23:44,840
我们将会在一到两周后的周五的课上

427
00:23:44,840 --> 00:23:48,470
谈论如何连接你的设备

428
00:23:48,480 --> 00:23:52,940
不过这里有很多模拟器  iPhone 6 、

429
00:23:52,950 --> 00:23:56,550
6+、 iPhone 5、 iPhone 4s、 iPad Airs

430
00:23:56,550 --> 00:23:58,920
你可以选择其中的一个运行

431
00:23:58,920 --> 00:24:02,490
它们实际上是在你的电脑上模拟那些设备

432
00:24:02,490 --> 00:24:05,820
这里我将会运行在 iPhone 6上

433
00:24:05,820 --> 00:24:08,720
好了 我将要点击 Play 按钮 看到 Play 按钮没？

434
00:24:08,730 --> 00:24:11,490
这就是使用模拟器的方式 点击 Play

435
00:24:11,500 --> 00:24:12,930
现在启动模拟器

436
00:24:12,930 --> 00:24:14,600
它是一个单独的程序

437
00:24:14,600 --> 00:24:16,160
我们的 App 将会运行在它里面

438
00:24:16,170 --> 00:24:17,400
就是这样

439
00:24:17,400 --> 00:24:18,730
现在你可能会说 哇！

440
00:24:18,730 --> 00:24:19,900
这么大的白色正方形

441
00:24:19,900 --> 00:24:21,330
看起来不怎么好

442
00:24:21,340 --> 00:24:23,820
这是因为

443
00:24:23,820 --> 00:24:26,310
iPhone 6的高分辨率屏幕

444
00:24:26,310 --> 00:24:30,880
这种视网膜屏幕 比我电脑上的分辨率大得多 对吧？

445
00:24:30,880 --> 00:24:35,150
所以我不得不上下滚动 你可以看到它的顶部

446
00:24:35,150 --> 00:24:37,750
通过上下滚动可以看到整个区域

447
00:24:37,750 --> 00:24:42,550
如果我们前往 Window 选项 这个选项现在不在 iOS 模拟器

448
00:24:42,560 --> 00:24:46,620
如果你点击 Window 并且点击 Scale  你可以把它缩小

449
00:24:46,630 --> 00:24:47,760
然后它的大小就与屏幕的大小匹配了

450
00:24:47,760 --> 00:24:49,490
因此 如果你有低分辨率的屏幕

451
00:24:49,490 --> 00:24:51,530
你可以点击Window > Scale

452
00:24:51,530 --> 00:24:54,360
也可以实用快捷键Cmd+3

453
00:24:54,370 --> 00:24:55,150
懂不？

454
00:24:55,150 --> 00:25:00,930
这就是我们的 UI 不过看起来不怎么样 因为这些在哪里？

455
00:25:00,940 --> 00:25:05,010
我们把0放在那里 却从来都没有出现 我们哪里做错了？

456
00:25:05,010 --> 00:25:08,780
实际上我们没有做错 那个0实际上就在那里

457
00:25:08,780 --> 00:25:11,750
就在那 先让我把它们排成一列 虽然没有

458
00:25:11,750 --> 00:25:16,550
完全相同的比例但也是近似的 近似相同的比例

459
00:25:16,550 --> 00:25:19,850
你可以看到那个0实际上在屏幕外面 看到不？

460
00:25:19,850 --> 00:25:24,020
所以实际上它存在不过你看不到它 因为它在屏幕外面

461
00:25:24,030 --> 00:25:28,460
这是一个问题 不过这个问题我们可以解决

462
00:25:28,460 --> 00:25:29,730
来 我们开始解决这个问题吧

463
00:25:31,300 --> 00:25:32,530
为什么它在屏幕外面？

464
00:25:32,530 --> 00:25:35,830
好了 看到这个UI没？

465
00:25:35,830 --> 00:25:36,830
它是什么形状的？

466
00:25:36,840 --> 00:25:38,370
它是正方形的

467
00:25:38,370 --> 00:25:40,900
不过没有任何iOS设备是正方形的

468
00:25:40,910 --> 00:25:43,540
世界上没有任何一种正方形的iOS设备

469
00:25:43,540 --> 00:25:46,070
你知道的 它们都是高的 并且瘦的

470
00:25:46,080 --> 00:25:48,580
或者如果把它们侧身来看 它们都又长又短

471
00:25:48,580 --> 00:25:50,650
甚至包括 iPad

472
00:25:50,650 --> 00:25:52,710
你知道 iPad 的纵横比例和 iPhone 稍微有点不同

473
00:25:52,720 --> 00:25:55,580
它们略有不同 但它们都不是正方形的

474
00:25:55,590 --> 00:25:58,650
那为什么我们把 UI 设计为方的？

475
00:25:58,650 --> 00:26:03,760
因为你这种 iOS界 面的设计 是将内容放这个方形中

476
00:26:03,760 --> 00:26:09,030
然后给所有的内容都添加规则 这些规则我们称之为约束

477
00:26:09,030 --> 00:26:12,230
是关于当它们被压扁时应该发生什么变化

478
00:26:12,230 --> 00:26:15,500
不过是水平还是垂直的压扁

479
00:26:15,500 --> 00:26:18,500
取决于它们被放到哪种设备中 明白不？

480
00:26:18,510 --> 00:26:22,910
所以你会在这里加入这些规则 那当加入这样规则后会怎样？

481
00:26:22,910 --> 00:26:25,110
同样的 这些都是直观的操作

482
00:26:25,110 --> 00:26:31,180
我将要对这里的这个Label增加一些规则 使得它知道

483
00:26:31,180 --> 00:26:36,950
对于任何方向的任何设备被压扁时应该如何显示

484
00:26:36,950 --> 00:26:38,650
那我希望这些规则是什么样的？

485
00:26:38,660 --> 00:26:42,160
我总希望它可以使用全部的宽度

486
00:26:42,160 --> 00:26:44,930
不管我的宽度是多少 我都希望填满这个宽度

487
00:26:44,930 --> 00:26:50,100
所以我要固定这个右边缘到这个边缘的距离 对吧？

488
00:26:50,100 --> 00:26:53,200
我这样做是因为所有宽度都会由另外一方决定

489
00:26:53,200 --> 00:26:55,000
我使用Ctrl键来完成

490
00:26:55,000 --> 00:26:57,550
我已经开启粘滞键所以

491
00:26:57,560 --> 00:27:00,110
在左下角你可以看到 它显示了我正使用的按键

492
00:27:00,110 --> 00:27:02,210
现在我按住Ctrl

493
00:27:02,210 --> 00:27:08,480
我按住Ctrl 同时从右边拖动到它的容器的右边

494
00:27:08,480 --> 00:27:11,820
看它是如何展示我正在拖动的过程

495
00:27:11,820 --> 00:27:15,120
当我拖到这个容器时 弹出了一个菜单 上面说

496
00:27:15,120 --> 00:27:20,830
好吧 你想在标签的右边缘和当前边缘之间增加一些规则

497
00:27:20,830 --> 00:27:23,990
你希望是怎么样的规则？

498
00:27:24,000 --> 00:27:26,560
恩 我可以做很多事情

499
00:27:26,560 --> 00:27:29,130
我可以使这个标签垂直居中于这个容器

500
00:27:29,130 --> 00:27:31,590
向上 你知道的 垂直向上和向下

501
00:27:31,590 --> 00:27:34,040
我绝对不希望出现这种情况 我是希望我的Label在顶部

502
00:27:34,040 --> 00:27:34,770
我可以使它的宽度相等

503
00:27:34,770 --> 00:27:38,470
所以我可以使这个Label和容器的宽度相同

504
00:27:38,480 --> 00:27:42,040
我也不想那种情况 因为我想设置这个小的边距 对不对？

505
00:27:42,050 --> 00:27:45,780
不过看上面的那个 trailing space to container margin（距离容器的右间距）

506
00:27:45,780 --> 00:27:51,150
这让我规定了我的Label尾部与它的容器的间距

507
00:27:51,150 --> 00:27:55,190
这就时我需要的 我点击这个来完成

508
00:27:55,190 --> 00:27:59,660
现在 当我这样做后 看到这些黄色和橙色的线条出现没？

509
00:27:59,660 --> 00:28:04,400
这就像是系统在说 嗯 你已经开始告诉我应该遵循对这个标签的某些规则

510
00:28:04,400 --> 00:28:06,500
不过你没有告诉我足够多的规则

511
00:28:06,500 --> 00:28:08,000
我不知道应该对它怎么做

512
00:28:08,000 --> 00:28:11,140
所以现在提示你 当它被挤压的时候

513
00:28:11,140 --> 00:28:13,310
系统不确定应该怎么做

514
00:28:13,310 --> 00:28:15,740
在这之前 你没有告诉我任何规则

515
00:28:15,740 --> 00:28:18,080
所以我没有显示任何东西 不过现在你开始告诉我

516
00:28:18,080 --> 00:28:19,640
所以我应该怎么做？

517
00:28:19,650 --> 00:28:24,350
所以我们不得不完整地告诉它水平方向

518
00:28:24,350 --> 00:28:25,520
和垂直方向应该怎么显示

519
00:28:25,520 --> 00:28:27,420
所以我们只是先从这里开始

520
00:28:27,420 --> 00:28:31,220
让我们拖动固定这个边缘 我们希望这个边缘靠近这一边

521
00:28:31,220 --> 00:28:34,520
所以我按下Ctrl并且拖动

522
00:28:34,530 --> 00:28:38,960
然后现在我想固定Label前部到容器之间的间距

523
00:28:38,960 --> 00:28:41,100
好了 我成功了

524
00:28:41,100 --> 00:28:44,670
这里仍然显示橙色 这是因为我还没指定任何关于

525
00:28:44,670 --> 00:28:49,670
这个Label的垂直方向的规则 所以我把Labeld的顶部和容器顶部间距固定起来

526
00:28:49,670 --> 00:28:54,210
所以我又一次按住Ctrl 拖到这里 这是顶部间距

527
00:28:54,210 --> 00:28:58,880
注意到它识别出我正把它拖向哪里没？

528
00:28:58,880 --> 00:29:00,980
所以它能给我有意义的选项

529
00:29:00,980 --> 00:29:03,180
比如这里的Top Space to Layout Guide(顶部间距)

530
00:29:03,180 --> 00:29:04,920
所以我会选这个

531
00:29:04,920 --> 00:29:06,480
所以我开始看到蓝色的线了

532
00:29:06,490 --> 00:29:07,480
看到没？

533
00:29:07,490 --> 00:29:08,650
希望你能看到

534
00:29:08,650 --> 00:29:11,490
它们是实心蓝线 不是橙色或红色

535
00:29:11,490 --> 00:29:16,230
这是因为它们可以了 水平方向上没问题了

536
00:29:16,230 --> 00:29:18,330
不过这里仍然有一个垂直方向上的问题

537
00:29:18,330 --> 00:29:21,330
现在我不是非常确定这个垂直方向上的问题因为我确实不

538
00:29:21,330 --> 00:29:23,530
希望这样的底部

539
00:29:23,530 --> 00:29:27,770
我只是希望这个刚刚摆放的Label的底部是基于我的

540
00:29:27,770 --> 00:29:29,040
字体大小之类的

541
00:29:29,040 --> 00:29:31,610
因此 我确实不想在这里指明特定的高度

542
00:29:31,610 --> 00:29:34,210
所以为什么橙色警告会出现 我应该怎样避免它？

543
00:29:34,210 --> 00:29:37,640
任何时候当你在布局时看到橙色警告

544
00:29:37,650 --> 00:29:38,940
你不知道应该怎样做的时候

545
00:29:38,950 --> 00:29:41,880
你可以点击下面的这个按钮 看到不？

546
00:29:41,880 --> 00:29:44,900
这是document outline（文档大纲)

547
00:29:44,900 --> 00:29:47,920
当你点击这里时 这部分会滑出来 一个小架子

548
00:29:47,920 --> 00:29:53,090
这是你的UI中所有内容的大纲

549
00:29:53,090 --> 00:29:53,890
并且它们之间是相互关联的

550
00:29:53,890 --> 00:29:58,000
如果我点击背景 没有选中任何内容

551
00:29:58,000 --> 00:30:00,760
然后这个背景 这个视图就是我这里选择的

552
00:30:00,770 --> 00:30:04,600
但当我点击这里L0标签时 L0指的是Label中显示内容是0

553
00:30:04,600 --> 00:30:06,240
看我被选中的Label

554
00:30:10,140 --> 00:30:14,380
所以这和大纲模式一样

555
00:30:14,380 --> 00:30:16,340
这是一种非常好的方式

556
00:30:16,350 --> 00:30:18,310
有时候你的视图重叠在一起 所以它们显得有点

557
00:30:18,310 --> 00:30:22,420
难以选择 你可以来到这里选择你想选择的视图

558
00:30:22,420 --> 00:30:27,520
并且你也可以在这里Ctrl加拖动 这里和其它东西

559
00:30:27,520 --> 00:30:30,290
一样可Ctrl+拖动

560
00:30:30,290 --> 00:30:32,510
但这些我们将会

561
00:30:32,510 --> 00:30:34,730
我们将讨论一下顶部和底部的布局指南

562
00:30:34,730 --> 00:30:38,360
但是我想让你注意这个黄色的小圆圈

563
00:30:38,370 --> 00:30:39,870
好的 任何时候 你在使用 Auto-layout 中

564
00:30:39,870 --> 00:30:42,170
看到黄色和橙色的线

565
00:30:42,170 --> 00:30:45,100
你可以在你的 document outline 中看到这个小黄圈

566
00:30:45,110 --> 00:30:50,470
如果你点击它 它会滑入一个列表 列出所有的问题

567
00:30:50,480 --> 00:30:54,340
如果选中它 出现高亮的部分就是警告所出现的地方

568
00:30:54,350 --> 00:30:59,480
它提示这个显示0的 label 的高度应该是39 但

569
00:30:59,480 --> 00:31:00,950
真实的情况却是57

570
00:31:00,950 --> 00:31:03,820
这是因为我在设置了这个字体后

571
00:31:03,820 --> 00:31:06,460
我向下的拖动了一部分 让它多出来一些空间

572
00:31:06,240 --> 00:30:10,140
选中 反之亦然如果我点击这里 这里显示被选中

573
00:31:06,460 --> 00:31:09,260
我不是很清楚它的高度是否应该39

574
00:31:09,260 --> 00:31:11,330
我只是稍稍向下拖动了而已

575
00:31:11,330 --> 00:31:14,280
这样 Xcode 给了我一个警告

576
00:31:14,280 --> 00:31:17,230
现在 我可以试着将其拖动 和这个虚线重叠

577
00:31:17,230 --> 00:31:19,730
强调下这条虚线

578
00:31:19,730 --> 00:31:22,230
它好像就在表明 这个东西想要出现在这里

579
00:31:22,240 --> 00:31:24,640
但是实线是它真实存在的地方

580
00:31:24,640 --> 00:31:31,740
所以我可以把它拖动到那里 但是我也许会相差1个像素或有些其它差别

581
00:31:31,750 --> 00:31:34,180
现在有一个可靠的方法 点击这个黄色小三角

582
00:31:34,180 --> 00:31:36,180
我将要点击这个

583
00:31:36,180 --> 00:31:37,850
它会弹出一个窗口

584
00:31:37,850 --> 00:31:42,090
这里给出了三个修改问题的方法

585
00:31:42,090 --> 00:31:45,320
其中一个 Update Constraints 在中间

586
00:31:45,320 --> 00:31:49,090
这个方法是 我想要这样做

587
00:31:49,100 --> 00:31:51,190
我想让这个 label 出现在它该出现的位置

588
00:31:51,200 --> 00:31:52,960
所以只要做一些约束

589
00:31:52,960 --> 00:31:53,630
弥补上这个缺点

590
00:31:53,630 --> 00:31:56,230
发生吧！

591
00:31:56,230 --> 00:31:58,830
它会添加一些古怪的约束 例如把高度设置为52

592
00:31:58,840 --> 00:32:02,300
这不是我想要的约束 因为52的高度不是这个 lable 本来的高度

593
00:32:02,310 --> 00:32:04,370
它的不想变成52这么高

594
00:32:04,380 --> 00:32:06,340
所以这里就像是强制性的约束

595
00:32:06,340 --> 00:32:08,610
你几乎永远不会用到这一项

596
00:32:08,610 --> 00:32:11,250
你很少需要强制性地去约束

597
00:32:11,250 --> 00:32:14,520
Reset to Suggested Constraints 也许会在这里起作用

598
00:32:14,520 --> 00:32:16,780
我不会选择这个 但是它可能会起作用

599
00:32:16,790 --> 00:32:21,120
这个可以把 label 的约束与蓝线重合

600
00:32:21,120 --> 00:32:24,760
我告诉过你那些蓝线 是需要必须重叠的

601
00:32:24,760 --> 00:32:28,890
那些是能够帮助系统选择建议的约束

602
00:32:28,900 --> 00:32:32,760
如果我们把 label 拖动到蓝线的位置

603
00:32:32,770 --> 00:32:36,630
Reset to Suggested Constraints 也是会起作用的

604
00:32:36,640 --> 00:32:38,940
但是我想给你们展示顶部的这一项

605
00:32:38,940 --> 00:32:43,640
Update Frame 这个能够根据已经设定的约束

606
00:32:43,640 --> 00:32:49,910
把 label 移动到该放置的位置

607
00:32:49,920 --> 00:32:52,180
我比较喜欢这个选项

608
00:32:52,180 --> 00:32:55,520
它让你能够预览 我的约束是否设置正确了

609
00:32:55,520 --> 00:32:59,860
我们尝试一下 lable 是否能够按照已有的约束 移动到

610
00:32:59,860 --> 00:33:03,560
它该去的地方并且设置好自己应有的大小

611
00:33:03,560 --> 00:33:06,060
我们点击这个按钮 让我们尝试下

612
00:33:07,060 --> 00:33:10,260
果然做到了 没有任何问题

613
00:33:10,270 --> 00:33:14,940
如果回到 document outline 这个黄色的小圆圈已经消失了

614
00:33:14,940 --> 00:33:18,810
看看自己的视图 全部都是蓝线 没有红色或黄色的

615
00:33:20,140 --> 00:33:22,630
好了吗？这就说明你的

616
00:33:22,630 --> 00:33:25,110
Auto Layout 已经完成 我们接下来讨论更多 Auto Layout

617
00:33:25,110 --> 00:33:28,710
在周三的课上 我会对所有的按钮做一下 Auto Layout

618
00:33:28,720 --> 00:33:30,670
计算器的所有按钮

619
00:33:30,670 --> 00:33:32,620
这听起来真的蛮多的

620
00:33:32,620 --> 00:33:34,220
看看是否修复了问题

621
00:33:34,220 --> 00:33:37,520
我们再次运行一下应用

622
00:33:37,520 --> 00:33:39,790
点击这个运行按钮

623
00:33:39,790 --> 00:33:41,560
此刻 我们可以看到这个0了

624
00:33:41,560 --> 00:33:45,330
你注意到这个0 pin 在边缘了吗?

625
00:33:45,330 --> 00:33:48,030
不仅可以这样 如果我们旋转模拟器

626
00:33:48,030 --> 00:33:52,270
你可以在模拟器的菜单中点击 Hardware > Rotate

627
00:33:53,970 --> 00:33:58,370
看看这个0 它变得更宽 0还是把自己 pin 在边缘

628
00:33:58,380 --> 00:34:01,980
它也保持着距离顶部的距离 即使它变窄了一些

629
00:34:01,980 --> 00:34:04,880
接下来 如果我旋转回来 0还是保持原样

630
00:34:04,880 --> 00:34:07,420
学生提问：底部发生了什么？

631
00:34:07,420 --> 00:34:10,420
Update Frame 到底做了什么事情？

632
00:34:10,420 --> 00:34:12,750
Document Outline 中的 Update Frame 到底做了什么事情？

633
00:34:12,760 --> 00:34:14,690
它移动了底部的边缘

634
00:34:14,690 --> 00:34:17,460
你看现在是39的像素高度

635
00:34:17,460 --> 00:34:18,390
之前它是52

636
00:34:18,390 --> 00:34:19,320
这样 它发生了改变 向上移动了

637
00:34:19,330 --> 00:34:21,660
如果还有其他部分有黄色线

638
00:34:21,660 --> 00:34:23,130
它可能就会移动整个 lable

639
00:34:23,130 --> 00:34:24,710
好的 它将移动这个 label

640
00:34:24,710 --> 00:34:26,300
来实现约束但是

641
00:34:26,300 --> 00:34:29,530
这种情况 你可以通过向上拖动来修复这个问题

642
00:34:29,540 --> 00:34:30,130
问得不错

643
00:34:31,340 --> 00:34:33,540
还不错

644
00:34:34,970 --> 00:34:36,410
这就是 Auto Layout

645
00:34:36,410 --> 00:34:38,340
Auto Layout 第一部分

646
00:34:38,340 --> 00:34:43,010
现在我们看看如何把 UI 元素

647
00:34:43,010 --> 00:34:45,380
和代码建立起联系

648
00:34:45,380 --> 00:34:48,250
因为我们想让代码和 UI 进行交流

649
00:34:48,250 --> 00:34:51,150
否则我们如何能够使数字按钮产生的数字

650
00:34:51,150 --> 00:34:53,420
显示在顶部的 lable 里

651
00:34:53,420 --> 00:34:56,790
或者按下乘法按钮 就会把结果显示在这里

652
00:34:56,790 --> 00:34:58,360
我们需要这样的交流

653
00:34:58,360 --> 00:35:01,630
但是如何做到呢？

654
00:35:01,630 --> 00:35:04,900
第一步 我们要把 view 和 controller 中的 Swift 代码

655
00:35:04,900 --> 00:35:10,440
同时显示在屏幕上

656
00:35:10,440 --> 00:35:12,740
因为我们会连接它们 所以我们需要它们同时显示在屏幕上

657
00:35:12,740 --> 00:35:17,180
我将用最简单的方式实现这个

658
00:35:17,180 --> 00:35:20,610
使用 Assistant Editor 这个按钮

659
00:35:20,610 --> 00:35:22,180
我要点了 看看会发生什么

660
00:35:22,180 --> 00:35:25,120
它把它们同时放上屏幕 这正是我想要的

661
00:35:25,120 --> 00:35:27,350
现在这里有一点拥挤

662
00:35:27,350 --> 00:35:31,890
即使我放大整个界面 它看起来还是这么小

663
00:35:31,890 --> 00:35:35,690
幸运的是 Navigator 和 Utilities 这些都是可以隐藏起来的

664
00:35:35,690 --> 00:35:37,930
这里有三个按钮

665
00:35:37,930 --> 00:35:40,730
左侧这个 如果你点击它会隐藏 Navigator

666
00:35:40,730 --> 00:35:45,500
点击右侧这个 会隐藏右侧的 Utilities

667
00:35:45,500 --> 00:35:50,300
现在它们都在我们的视线中 我可以双击缩放它

668
00:35:50,310 --> 00:35:54,640
但是我们在想要连接代码和 UI 或者

669
00:35:54,640 --> 00:35:59,180
尝试去编辑的时候 你需要把缩放比例调到正常

670
00:35:59,180 --> 00:36:02,350
例如这个 如果我缩小

671
00:36:02,350 --> 00:36:04,950
我就不能选中这个0了

672
00:36:04,950 --> 00:36:08,890
这个其实只是一个预览图模式 让你看看大体样子 而不能编辑

673
00:36:08,890 --> 00:36:10,720
如果你想要编辑

674
00:36:10,720 --> 00:36:12,560
双击你需要编辑的窗口就可以了

675
00:36:14,060 --> 00:36:15,630
这是我们的 Swift 代码

676
00:36:15,630 --> 00:36:17,590
我将要删除这些

677
00:36:17,600 --> 00:36:20,630
在我们的应用中是不需要这些的

678
00:36:20,630 --> 00:36:24,330
我们会在将来的应用需要这些 但在这里不需要

679
00:36:24,340 --> 00:36:27,970
这是你第一次看到 Swift 代码

680
00:36:27,970 --> 00:36:31,710
Swift 是非常简洁的

681
00:36:31,710 --> 00:36:36,040
面向对象的语言 它看起来像 C 有些东西像 Java

682
00:36:36,050 --> 00:36:40,380
它集众多语言之长

683
00:36:40,380 --> 00:36:44,820
这句 import 导入了 iOS 的 UI 部分

684
00:36:44,820 --> 00:36:47,650
除非你需要使用一些框架

685
00:36:47,660 --> 00:36:52,490
通常来说不需要自己导入 我们几周后会讲到那里

686
00:36:52,490 --> 00:36:56,230
最后你还是得自己导入

687
00:36:56,230 --> 00:36:58,600
这里我们看到它自动的为我们添加了

688
00:36:58,600 --> 00:37:02,830
在这是你的第一行 Swift 代码

689
00:37:02,840 --> 00:37:06,970
这里是定义了一个类

690
00:37:06,970 --> 00:37:10,470
因为 Swift 是以面向对象为基础的 这里是定义的一个类

691
00:37:10,480 --> 00:37:13,440
定义一个类的语法是什么样的？

692
00:37:13,450 --> 00:37:15,410
你得使用关键字 class

693
00:37:15,410 --> 00:37:16,810
这里是这个类的名称

694
00:37:16,810 --> 00:37:20,650
现在这个名字 ViewController 看起来很糟糕

695
00:37:20,650 --> 00:37:23,520
非常普通的名字 它应该起名为例如

696
00:37:23,520 --> 00:37:26,590
CalculatorViewController 这样有针对的名字

697
00:37:26,590 --> 00:37:33,590
这样看起来就让人清楚它是控制哪里的了

698
00:37:33,600 --> 00:37:35,660
这是个默认的名字

699
00:37:35,670 --> 00:37:38,330
我不想花费宝贵的时间去演示如何

700
00:37:38,330 --> 00:37:40,650
重命名 因为

701
00:37:40,650 --> 00:37:42,970
我不能在这里输入一个新名字,因为我要保持 UI 与之同步

702
00:37:42,970 --> 00:37:45,270
所以我必须在 UI 中做一些事情

703
00:37:45,270 --> 00:37:48,070
你的第一次或第二次作业 我们只会

704
00:37:48,080 --> 00:37:51,540
叫它 ViewController 但在这之后 你最好给他更换一个好的名字

705
00:37:51,550 --> 00:37:54,250
当然你将会在这个应用的这个类中

706
00:37:54,250 --> 00:37:57,550
创建多个场景

707
00:37:57,550 --> 00:38:01,020
当然它们每一个都有不同的 controller 名称

708
00:38:01,020 --> 00:38:07,790
这个 ':UIViewController' 是告诉我们它的父类是谁

709
00:38:08,790 --> 00:38:12,330
Swift 是单继承 你只能让它继承一个类

710
00:38:12,330 --> 00:38:18,130
在 Swift 中 你不想继承也可以

711
00:38:18,140 --> 00:38:20,140
但在这里我们必须继承于 UIViewController

712
00:38:20,140 --> 00:38:23,170
想通过它来控制 UI

713
00:38:23,170 --> 00:38:27,880
像 Auto Layout 这有很多种方式来让

714
00:38:27,880 --> 00:38:31,080
controller 控制 UI

715
00:38:31,080 --> 00:38:35,480
很明显 所有 ViewController, 所有这些场景中的 controller

716
00:38:35,480 --> 00:38:40,420
必须直接继承于 UIViewController 或者继承于继承 UIViewController 的子类

717
00:38:40,420 --> 00:38:45,290
或者在继承链条上

718
00:38:46,390 --> 00:38:51,130
在这个花括号里是所有的实例变量和

719
00:38:51,130 --> 00:38:54,070
方法

720
00:38:54,070 --> 00:38:58,200
定义类的语法是非常简练的

721
00:38:58,200 --> 00:39:02,140
所以让我们定义一些实例变量和方法

722
00:39:02,140 --> 00:39:03,910
来看看语法是什么样的

723
00:39:03,910 --> 00:39:09,210
我们要把这个

724
00:39:09,210 --> 00:39:12,950
这个 UI 对象连接到代码中

725
00:39:12,950 --> 00:39:15,070
我们现在就这样做

726
00:39:15,070 --> 00:39:17,190
我们连接这个 label 到代码中去

727
00:39:17,190 --> 00:39:20,560
然后我们会创建一个实例变量

728
00:39:20,560 --> 00:39:23,060
在 Swift 中我们叫它们 properties

729
00:39:23,060 --> 00:39:25,330
如果你听到我说 property

730
00:39:25,330 --> 00:39:27,160
那我其实就是在说实例变量

731
00:39:27,160 --> 00:39:29,460
清楚吗？实例变量是类中的一个变量

732
00:39:29,460 --> 00:39:31,860
类的每个实例都有它自己的拷贝

733
00:39:31,870 --> 00:39:34,170
希望你们都知道什么是实例变量

734
00:39:34,170 --> 00:39:35,730
如果你不清楚 再说一次 这门课程

735
00:39:35,740 --> 00:39:38,400
需要很强的面向对象功底 你们应当很清楚

736
00:39:38,410 --> 00:39:41,670
我将要声明一个 property  也可以说是一个实例变量

737
00:39:41,680 --> 00:39:45,840
使用指针指向这个 lable 这样就我就能够更新这个 label 的内容了

738
00:39:45,850 --> 00:39:50,480
我得跟这个 label 通信 方法是

739
00:39:50,480 --> 00:39:55,820
在 Xcode 中 按住 Ctrl 像刚才和边缘连接那样

740
00:39:55,820 --> 00:39:59,620
所以我按住 Ctrl 连接 label

741
00:39:59,620 --> 00:40:02,590
但这次是连接到代码中去

742
00:40:02,590 --> 00:40:06,160
这是有点古怪

743
00:40:06,160 --> 00:40:07,900
我知道你们都会感觉很奇怪

744
00:40:07,900 --> 00:40:08,500
放到代码里？

745
00:40:11,000 --> 00:40:13,500
现在我们到右边代码中 松开鼠标

746
00:40:13,500 --> 00:40:16,300
你想连接 UI 和 controller

747
00:40:16,310 --> 00:40:18,840
你需要哪种连接？

748
00:40:18,840 --> 00:40:20,840
我们需要设置 outlet 连接

749
00:40:20,840 --> 00:40:22,680
outlet 代表指向 UI 的

750
00:40:22,680 --> 00:40:25,710
实例变量或 property

751
00:40:25,710 --> 00:40:30,020
接下来它需要知道 property 应该叫什么名字

752
00:40:30,020 --> 00:40:34,920
它将是我计算器的显示部分 所以我将它命名为 display

753
00:40:34,920 --> 00:40:38,960
因为我们是从 label 拽过来的 所以知道它的类型

754
00:40:38,960 --> 00:40:41,430
不要担心这个 weak 在后面我们会讲到

755
00:40:41,430 --> 00:40:45,060
然后我们点击 connect, 它会在 controller 中

756
00:40:45,060 --> 00:40:47,200
创建一个实例变量或 property

757
00:40:47,200 --> 00:40:51,330
这是一个很好的机会了解 在 Swift 中如何

758
00:40:51,340 --> 00:40:54,100
创建一个 property 的语法

759
00:40:54,110 --> 00:40:56,870
这里有几件事情通常都不是它的一部分

760
00:40:56,880 --> 00:41:02,510
这是你创建一个 property 的主要语法

761
00:41:02,510 --> 00:41:04,410
我们快速的了解下这个 get 方法

762
00:41:04,420 --> 00:41:07,450
这不是 Swift 真正语言的一部分

763
00:41:07,450 --> 00:41:09,550
这个小圆圈是 Xcode 生成的

764
00:41:09,550 --> 00:41:14,520
这个小圆圈出现在这里 你看到了吗？

765
00:41:14,520 --> 00:41:18,460
当我把鼠标移动到上面时候 看看 Xcode 的变化

766
00:41:18,460 --> 00:41:21,930
它展示了这行代码所连接到了什么地方

767
00:41:21,930 --> 00:41:23,850
这看起来非常酷

768
00:41:23,850 --> 00:41:25,770
在这个demo中 这是非常有用的

769
00:41:25,770 --> 00:41:27,830
它能找到我们连接的是什么控件

770
00:41:27,840 --> 00:41:29,770
这个就是它在这里所展示的意义

771
00:41:29,770 --> 00:41:33,770
当你按下 Ctrl 同时点击拖动时候 你（可能）不懂这里出现的 Weak 的意思

772
00:41:33,770 --> 00:41:38,740
如果你从其他语言过来的

773
00:41:38,750 --> 00:41:44,650
你会使用过类似的垃圾回收机制

774
00:41:44,650 --> 00:41:46,280
或者你也许在一些语言里习惯

775
00:41:46,290 --> 00:41:50,250
自己手动管理内存

776
00:41:50,260 --> 00:41:51,790
在 Swift 中是没有的

777
00:41:51,790 --> 00:41:54,820
在 Swift 中 所有的对象都在堆中

778
00:41:54,830 --> 00:41:58,390
所有类 类的实例都存在堆中

779
00:41:58,400 --> 00:42:02,330
而 Swift 已经替你进行了内存管理

780
00:42:02,330 --> 00:42:05,370
只要没有了指针指向它们 你可以随意分配它们内存

781
00:42:05,370 --> 00:42:08,270
它们会自动清理 但不是垃圾回收机制

782
00:42:08,270 --> 00:42:10,490
这就是引用计数

783
00:42:10,490 --> 00:42:12,710
它实际上是计算引用它们的次数 但这都是自动的

784
00:42:12,710 --> 00:42:16,540
你刚才也许唯一感兴趣的是这个 weak 的作用

785
00:42:16,550 --> 00:42:19,850
这东西出现的次数不会太频繁

786
00:42:19,850 --> 00:42:23,780
前四周的课程中 忘掉这个 weak

787
00:42:23,790 --> 00:42:27,590
它会自动在你当你按下 Ctrl 同时拖动时候出现 但是先忽略它

788
00:42:27,590 --> 00:42:29,560
而最主要的事情是你要知道内存管理

789
00:42:29,560 --> 00:42:31,120
是如何发生的

790
00:42:31,130 --> 00:42:34,330
同时 实例变量在这里

791
00:42:34,330 --> 00:42:38,260
它是指向对象的指针 注意这里没有与符号“&”或者“*”

792
00:42:38,260 --> 00:42:42,270
或者其他任何语法说这是一个指针

793
00:42:44,400 --> 00:42:46,540
一个实例 变量或属性或

794
00:42:46,540 --> 00:42:48,910
局部变量都是一个对象

795
00:42:48,910 --> 00:42:52,980
它总是一个指针 因为对象只在堆中存在着

796
00:42:52,980 --> 00:42:54,640
所以不需要多余的“*”和“&”

797
00:42:54,650 --> 00:42:57,180
或者其他语言中类似作用的东西

798
00:42:58,280 --> 00:43:01,580
顺便说一下这个感叹号 我要谈几分钟

799
00:43:01,580 --> 00:43:04,020
这是和对象不相关的

800
00:43:04,020 --> 00:43:05,850
这完全不相干的事情

801
00:43:05,860 --> 00:43:07,090
我们待会就会理解它

802
00:43:08,040 --> 00:43:08,990
所以让我们看看这个

803
00:43:08,990 --> 00:43:15,160
这个语法定义了一个属性 对吗？

804
00:43:15,160 --> 00:43:16,060
一个实例变量

805
00:43:16,060 --> 00:43:18,510
并且它是如此的简单

806
00:43:18,520 --> 00:43:20,970
你看到的这个 var 它是变量（variable）的缩写

807
00:43:20,970 --> 00:43:23,470
这是变量的名称：display

808
00:43:23,470 --> 00:43:25,470
这个属性的名字就是这个

809
00:43:25,470 --> 00:43:26,900
紧接着就是 UILabel

810
00:43:26,910 --> 00:43:28,510
这个是它的类型

811
00:43:28,510 --> 00:43:33,810
这个是这个实例变量的类型

812
00:43:33,810 --> 00:43:38,450
我稍后会讲到那个感叹号

813
00:43:38,450 --> 00:43:42,380
但很明显 我们可以确定这个东西是指向 label 的

814
00:43:42,390 --> 00:43:43,590
我们待会就能确定

815
00:43:44,420 --> 00:43:46,320
有什么疑问吗？

816
00:43:46,320 --> 00:43:49,960
好的 让我们来谈谈另一种连接

817
00:43:49,960 --> 00:43:52,360
让我们开始放一些计算器的按钮吧

818
00:43:52,360 --> 00:43:55,100
我将要回到这个 Utilities 窗口

819
00:43:55,100 --> 00:43:56,730
按下这个按钮

820
00:43:56,730 --> 00:44:00,700
找到下方的第三个选项卡的对象目录

821
00:44:00,700 --> 00:44:04,770
这次拖的不是 label 我将要拖出来一个按钮

822
00:44:04,770 --> 00:44:07,140
现在我要把这个按钮放到这里

823
00:44:07,140 --> 00:44:11,410
和刚才有点不一样 没有初始化蓝色的线

824
00:44:11,410 --> 00:44:14,280
我只是想把它放在这个空间中

825
00:44:14,280 --> 00:44:17,110
我等下将把它放在蓝线的下面

826
00:44:17,120 --> 00:44:19,480
希望我待会不会忘记这么做

827
00:44:19,480 --> 00:44:22,720
我等下要做的事就是告诉你这是可以做到的

828
00:44:22,720 --> 00:44:26,120
所以 这会是我们其中的一个数字按钮

829
00:44:26,120 --> 00:44:30,190
就像键盘左上角的数字7

830
00:44:31,590 --> 00:44:32,990
我还需要其他的一些按钮

831
00:44:33,000 --> 00:44:35,360
通过 attributes inspector  我能够

832
00:44:35,370 --> 00:44:37,200
对字体什么的作出修改

833
00:44:37,200 --> 00:44:40,870
让我们试着把字号改成24

834
00:44:40,870 --> 00:44:42,790
我能这么调整大小

835
00:44:42,790 --> 00:44:44,700
注意 当我调整它时候 会实时显示字号

836
00:44:44,710 --> 00:44:46,970
看到这里显示的当前的字号

837
00:44:46,980 --> 00:44:50,380
还可以通过在这里 进行字号的修改

838
00:44:50,380 --> 00:44:51,340
输入精确的字号

839
00:44:51,350 --> 00:44:53,510
先设个 64 x 64

840
00:44:53,510 --> 00:44:54,910
我们通常不这样做

841
00:44:54,920 --> 00:44:57,580
我们希望它能够是原始的大小

842
00:44:57,580 --> 00:45:01,150
但这里只想向你展示有其他的方法

843
00:45:01,150 --> 00:45:02,490
所以我们有这个7

844
00:45:02,490 --> 00:45:05,460
当7被按下的时候 会发生什么呢？

845
00:45:05,460 --> 00:45:07,960
我们想要的是

846
00:45:07,960 --> 00:45:10,460
数字出现在需要展示的地方

847
00:45:10,460 --> 00:45:13,000
这就是我们的控制器必须处理的

848
00:45:13,000 --> 00:45:17,070
当我们点击这个按钮 我们想让这个按钮发送信息到

849
00:45:17,070 --> 00:45:21,300
我们的控制器 跟之前的方式一样

850
00:45:21,300 --> 00:45:25,910
我们按住 Ctrl 然后点击拖动它到代码中

851
00:45:25,910 --> 00:45:29,240
当我们松开时候 这回我们要的不是 outlet 这个连接

852
00:45:29,250 --> 00:45:34,080
因为我不想要个实例变量 我要的是一个方法对吧？

853
00:45:34,080 --> 00:45:39,790
我类里的一个函数 方法 我想大家都知道“方法”这个词的含义

854
00:45:39,790 --> 00:45:44,160
我们想让它发送一个消息给控制板

855
00:45:44,160 --> 00:45:48,830
所以我选 "action" ,[咳嗽] 今天有点失声

856
00:45:48,830 --> 00:45:50,430
关键时刻有点感冒...不过还好

857
00:45:50,430 --> 00:45:52,960
所以在这里我选了 action

858
00:45:52,970 --> 00:45:56,830
action 跟 outlet 略有不同

859
00:45:56,840 --> 00:45:58,970
outlet 代表一个实例变量

860
00:45:58,970 --> 00:46:01,900
或者是一个 property  action 则是为我创建了一个方法

861
00:46:01,910 --> 00:46:03,940
所以紧接着它要我输入方法的名字

862
00:46:03,940 --> 00:46:05,510
这个方法要做什么呢？

863
00:46:05,510 --> 00:46:08,810
当我按7的时候

864
00:46:08,810 --> 00:46:12,850
不管原先显示着什么 都在后面加个7 所以我应该叫它 append...

865
00:46:12,850 --> 00:46:17,390
本来应该叫做 append 7 但我还是选择appenDigit

866
00:46:17,390 --> 00:46:20,850
因为我想所有的按钮都使用一个方法

867
00:46:20,860 --> 00:46:23,320
懂了吗？

868
00:46:23,320 --> 00:46:25,790
我不想复制粘贴一堆雷同的方法 那样只会把代码变得一团糟

869
00:46:27,400 --> 00:46:29,560
相反我仅仅使用一个方法

870
00:46:29,560 --> 00:46:33,430
所以我就需要知道是哪个按钮发送的这个消息 对吧？

871
00:46:33,430 --> 00:46:37,070
幸运的是 当你从这里发出消息前

872
00:46:37,070 --> 00:46:40,970
你可以规定它有没有参数 你看这里它写着 arguments 了么？

873
00:46:40,970 --> 00:46:45,410
你可以选择没有参数 或者是 sender

874
00:46:45,410 --> 00:46:48,480
sender 的意思就是把这个按钮当作参数

875
00:46:48,480 --> 00:46:52,780
这里有点诡异 我不懂 Xcode 为什么要这样处理

876
00:46:52,780 --> 00:46:54,450
希望他们以后能改进下

877
00:46:54,450 --> 00:46:59,090
就是参数的默认类型是 anyObject

878
00:46:59,090 --> 00:47:01,960
下周我们会讲什么是 anyObject

879
00:47:01,960 --> 00:47:04,330
不过在这里我们肯定不要 anyObject

880
00:47:04,330 --> 00:47:06,590
我们知道 sender 其实是 UIButton

881
00:47:06,600 --> 00:47:09,930
所以点这里选择 UIButton

882
00:47:09,930 --> 00:47:13,670
如果你做作业的时候 忘了选择 UIButton

883
00:47:13,670 --> 00:47:15,900
你就悲剧了.

884
00:47:15,900 --> 00:47:17,540
所以 别忘了哦

885
00:47:17,540 --> 00:47:21,970
然后很明显 触发事件应该选为 touch up inside

886
00:47:21,980 --> 00:47:25,440
意思是你手指点击的时候落在按钮的范围内

887
00:47:25,450 --> 00:47:27,110
而手指抬起来时也还在按钮的范围内

888
00:47:27,110 --> 00:47:29,950
这就是 touch up inside 的意思

889
00:47:29,950 --> 00:47:32,020
当我点了 connect 以后

890
00:47:32,020 --> 00:47:35,820
我就得到了一个方法 有一个参数 类型是 UIButton

891
00:47:35,820 --> 00:47:38,760
让我们看一下

892
00:47:38,760 --> 00:47:41,690
它就是你的第一个 Swift 声明的方法

893
00:47:41,690 --> 00:47:46,130
同样这里有一个叫 IBAction 的东西 跟 IBOutlet 类似

894
00:47:46,130 --> 00:47:47,960
左边有一个小圆点

895
00:47:49,100 --> 00:47:50,430
这样你就可以看见它连的是哪里

896
00:47:50,430 --> 00:47:52,930
这样你就可以看见它连的是哪里

897
00:47:52,940 --> 00:47:59,010
这个就是 Swift 定义方法的标准语法

898
00:47:59,010 --> 00:48:02,210
以 func 开头 这是 function 的缩写

899
00:48:02,210 --> 00:48:04,210
它就是我们类里的一个方法了

900
00:48:04,210 --> 00:48:06,480
这是它的名字, AppendDigit

901
00:48:06,480 --> 00:48:07,910
这是它的名字 AppendDigit

902
00:48:07,920 --> 00:48:10,980
在括号里 所有参数都用逗号分隔

903
00:48:10,980 --> 00:48:12,980
我们这只有一个参数

904
00:48:12,990 --> 00:48:15,050
这个是第一个参数的名字

905
00:48:15,050 --> 00:48:18,860
我们在方法里就要用到这个名字

906
00:48:18,860 --> 00:48:20,290
这是它的类型

907
00:48:21,260 --> 00:48:22,490
懂了么？类型是 UIButton

908
00:48:22,490 --> 00:48:24,590
顺便提下 要注意到这里是没有叹号的

909
00:48:26,530 --> 00:48:31,230
虽然这个方法没有返回值 但如果

910
00:48:31,230 --> 00:48:36,200
如果它有的话 这里就写这样的箭头

911
00:48:37,740 --> 00:48:40,310
这样就定义了它的返回类型

912
00:48:42,210 --> 00:48:48,180
看见了么？非常简单的语法

913
00:48:48,180 --> 00:48:51,820
继续看我们的函数 当点击了其中一个按钮

914
00:48:51,820 --> 00:48:53,770
我们要让它干什么

915
00:48:53,770 --> 00:48:55,720
在此之前 我们先多弄几个按钮

916
00:48:55,720 --> 00:48:58,920
我们还需要其他的按钮 4 5 6等等等等

917
00:48:58,930 --> 00:49:01,660
我们可以复制粘贴这些按钮

918
00:49:01,660 --> 00:49:04,400
当我复制粘贴这些按钮

919
00:49:04,400 --> 00:49:07,130
注意我用这些蓝线来对齐

920
00:49:07,130 --> 00:49:11,370
而且它们都同样发送这个消息

921
00:49:11,370 --> 00:49:14,770
它们发送同样这个消息是为什么呢

922
00:49:14,770 --> 00:49:18,010
因为拷贝按钮的时候连同这些信息也一起拷贝了

923
00:49:18,010 --> 00:49:21,180
可以一次选三个 一起拷贝

924
00:49:21,180 --> 00:49:27,150
6个一起选

925
00:49:27,150 --> 00:49:30,990
这样快速得把键盘造出来了

926
00:49:30,990 --> 00:49:33,340
只需要改改 title

927
00:49:33,340 --> 00:49:35,690
如果你像现在这样 做些改动 点来点去

928
00:49:35,690 --> 00:49:39,430
不小心没点准

929
00:49:39,430 --> 00:49:43,360
手一滑把控件拖飞了

930
00:49:43,370 --> 00:49:45,230
手一滑把控件拖飞了

931
00:49:45,230 --> 00:49:46,820
怎么办？

932
00:49:46,820 --> 00:49:48,400
没关系 只要把它再拖回原地

933
00:49:48,400 --> 00:49:51,670
那些蓝色的辅助线会帮你个大忙

934
00:49:52,840 --> 00:49:55,270
把0放在这

935
00:49:55,270 --> 00:49:57,710
选中这些 按下 Delete 我们就可以把不需要的按钮删除

936
00:49:57,710 --> 00:49:59,710
就这么删东西

937
00:49:59,710 --> 00:50:02,980
我刚才说过要把它们对齐蓝线

938
00:50:02,980 --> 00:50:05,920
把它们放在0标签控件的底下

939
00:50:05,920 --> 00:50:08,890
这条蓝线就表明我可以放在标签底下

940
00:50:08,890 --> 00:50:10,690
让它对起左边这条蓝线

941
00:50:10,690 --> 00:50:14,960
你可以发现 这些蓝线不仅在调整边缘的时候出现

942
00:50:14,960 --> 00:50:17,960
在调整其他对象 比如这些按钮的时候 它们也会出现

943
00:50:17,960 --> 00:50:20,660
同样 标题 标签这些也同样受用

944
00:50:21,870 --> 00:50:26,200
现在按钮齐了 它们都发送 appendDigit 这个消息

945
00:50:26,200 --> 00:50:28,870
所以我就需要分辨出是哪个按钮发送的消息

946
00:50:28,870 --> 00:50:30,940
然后针对性的做相应的功能

947
00:50:30,940 --> 00:50:33,610
现在让我们来往这个方法里添加代码

948
00:50:33,610 --> 00:50:37,280
首先 我要声明一个局部变量

949
00:50:37,280 --> 00:50:39,910
就是方法内部的局部变量

950
00:50:39,910 --> 00:50:43,520
输入 let digit =

951
00:50:43,520 --> 00:50:47,820
我想让这个局部变量表示我们输入的数字

952
00:50:47,820 --> 00:50:50,740
我想让这个变量表示我们输入的数字

953
00:50:50,740 --> 00:50:53,660
这里值得注意的是 这个 let 是什么？

954
00:50:54,360 --> 00:50:56,990
为什么不是跟上面那个一样的 var ？

955
00:50:57,000 --> 00:51:00,730
因为 var 是变量的意思 那 let 是什么鬼？

956
00:51:00,730 --> 00:51:05,970
其实 let 跟 var 差不多 只不过 let 代表常量

957
00:51:07,140 --> 00:51:10,740
意味着一旦你为它设置了初值

958
00:51:10,740 --> 00:51:13,040
它在这个方法内就再也不能被改变了

959
00:51:13,040 --> 00:51:15,410
这在 Swift 里很重要

960
00:51:15,410 --> 00:51:19,550
我大爱这个特性 因为当我读代码的时候

961
00:51:19,550 --> 00:51:23,350
我知道它不会变 而上面那个（var）会变

962
00:51:23,350 --> 00:51:24,850
假设你的方法里有几十行代码

963
00:51:24,850 --> 00:51:26,790
顺便提一下

964
00:51:26,790 --> 00:51:28,720
你最好别在一个方法里面塞太多的代码

965
00:51:28,720 --> 00:51:30,290
你应该让人清楚明了的知道你这个方法要做的是什么事情

966
00:51:30,290 --> 00:51:31,790
你应该让人清楚明了的知道你这个方法要做的是什么事情

967
00:51:33,230 --> 00:51:34,760
你可以添加其他的方法

968
00:51:34,760 --> 00:51:37,800
然后通过调用那些方法来实现更多的逻辑

969
00:51:37,800 --> 00:51:38,930
回过头来

970
00:51:38,930 --> 00:51:39,830
回过头来

971
00:51:39,830 --> 00:51:41,270
因为有了这个“不变” 的性质

972
00:51:41,270 --> 00:51:44,400
代码的可读性得到了很大的提升

973
00:51:44,400 --> 00:51:47,540
你会惊叹仅仅知道哪些是变量 哪些是常量 就会对代码的可阅读性带来这么大的提升

974
00:51:47,540 --> 00:51:49,170
你会惊叹仅仅知道哪些是变量 哪些是常量 就会对代码的可阅读性带来这么大的提升

975
00:51:49,170 --> 00:51:50,110
只需要声明的时候加个关键字就行

976
00:51:50,110 --> 00:51:52,910
[学生提问] 对于像变量、常量这些东西 这里为什么都用相同的命名规范？

977
00:51:52,910 --> 00:51:54,710
[学生提问] 对于像变量、常量这些东西 这里为什么都使用相同的命名规范？

978
00:51:54,710 --> 00:51:56,450
因为比如说 Java 会用“全部大写”或者“全部小写”来区别这些概念

979
00:51:56,450 --> 00:51:58,180
因为比如说 Java 会用“全部大写”或者“全部小写”来区别这些概念

980
00:51:58,180 --> 00:52:00,770
[提问完毕]

981
00:52:00,770 --> 00:52:03,350
这位同学的问题是 为什么不把 digit 写成 DIGIT

982
00:52:03,350 --> 00:52:05,420
以此来区分它是不是常量

983
00:52:05,420 --> 00:52:07,620
这算是编程风格的问题

984
00:52:07,620 --> 00:52:10,920
但在 Swift 里 我们通常不这样做

985
00:52:10,930 --> 00:52:13,760
我之后会给你们演示

986
00:52:13,760 --> 00:52:15,230
为什么我们不需要通过玩弄命名规范来区别这些概念

987
00:52:15,230 --> 00:52:18,060
因为你可以非常快速的找到每个变量的定义

988
00:52:18,070 --> 00:52:22,400
只需要点一下鼠标就一目了然

989
00:52:22,400 --> 00:52:25,200
是个好问题

990
00:52:25,210 --> 00:52:28,010
所以 接下来我要 let digit = 被触发的按钮上的那个数字

991
00:52:28,010 --> 00:52:30,190
所以 接下来我要 let digit = 被触发的按钮上的那个数字

992
00:52:30,190 --> 00:52:32,380
所以我要向那个按钮发送一个消息

993
00:52:32,380 --> 00:52:34,310
对吧？我们得访问这个按钮对象

994
00:52:34,310 --> 00:52:37,880
我就打 sender 然后..

995
00:52:37,880 --> 00:52:40,650
拿到它的 title 对吧？

996
00:52:40,650 --> 00:52:44,090
现在就是讲讲文档的好时机了

997
00:52:44,090 --> 00:52:45,540
[咳嗽]

998
00:52:45,540 --> 00:52:46,990
想要成为一名好的 iOS 开发者

999
00:52:46,990 --> 00:52:50,390
熟练地使用文档是必须的

1000
00:52:50,390 --> 00:52:54,330
幸运的是 Xcode 已经完美地嵌入了文档支持

1001
00:52:54,330 --> 00:52:57,030
比如 我想看看按钮的文档

1002
00:52:57,030 --> 00:53:00,330
我只要按住 option 键

1003
00:53:00,340 --> 00:53:01,370
我只要按住 option 键

1004
00:53:01,370 --> 00:53:02,970
看见有什么变化么？

1005
00:53:02,970 --> 00:53:04,540
当我的鼠标移动到文本上方时 它们底下就会出现一条蓝色的虚线

1006
00:53:04,540 --> 00:53:09,680
当我的鼠标移动到文本上方时 它们底下就会出现一条蓝色的虚线

1007
00:53:09,680 --> 00:53:10,740
如果我点击

1008
00:53:12,110 --> 00:53:14,880
它就弹出一个文档的摘要

1009
00:53:14,880 --> 00:53:17,950
它说这是 button  这是一个类

1010
00:53:17,950 --> 00:53:19,280
这里有它的继承关系

1011
00:53:19,290 --> 00:53:20,680
这里是关于它的功能

1012
00:53:20,690 --> 00:53:22,690
最棒的是在最后这里

1013
00:53:22,690 --> 00:53:25,420
这是一个指向详细文档的链接

1014
00:53:25,420 --> 00:53:27,960
我点击这个链接

1015
00:53:27,960 --> 00:53:34,500
它就打开了 UIButton 的文档窗口...咦？

1016
00:53:34,500 --> 00:53:38,030
我没点错吧？

1017
00:53:38,040 --> 00:53:43,070
不会是网络出问题了吧..

1018
00:53:43,070 --> 00:53:47,040
好吧 我猜我的网络出问题了

1019
00:53:47,040 --> 00:53:50,140
果然 没有联上网。

1020
00:53:50,150 --> 00:53:53,810
好吧

1021
00:53:53,820 --> 00:53:57,480
那就想象一下 文档出现在了这里

1022
00:53:57,490 --> 00:54:03,290
在窗口的左边 就会出现很长的一列关于 UIButton 的属性 变量 方法什么的

1023
00:54:03,290 --> 00:54:05,920
你可以点击它们

1024
00:54:05,930 --> 00:54:08,160
然后就可以在这里看见完整的描述

1025
00:54:08,160 --> 00:54:11,730
所有文档间的引用你都可以点击

1026
00:54:11,730 --> 00:54:14,500
它本质上就是一些文档间的超链接

1027
00:54:14,500 --> 00:54:16,770
你可以想象得到的

1028
00:54:16,770 --> 00:54:19,040
我争取在下周三把网络问题搞定 到时候我们就能一睹芳容了

1029
00:54:19,040 --> 00:54:21,490
假设我能看到文档的话

1030
00:54:21,490 --> 00:54:23,940
我会在这里找到一些如何获取 UIButton 状态的信息

1031
00:54:23,940 --> 00:54:30,180
我会找到一个叫做 currentTitle 的属性

1032
00:54:30,180 --> 00:54:31,550
很遗憾没能演示这个流程

1033
00:54:31,550 --> 00:54:32,180
很遗憾没能演示这个流程

1034
00:54:32,180 --> 00:54:33,680
不过问题不大

1035
00:54:33,680 --> 00:54:39,990
那么怎么访问到一个对象的属性、方法呢？

1036
00:54:39,990 --> 00:54:43,420
答案是 访问属性和调用方法的方式是一模一样的

1037
00:54:43,430 --> 00:54:46,330
访问属性 你用点(.)

1038
00:54:46,330 --> 00:54:49,430
这跟大多数语言是一样的 都用点号来访问成员

1039
00:54:49,430 --> 00:54:52,770
这跟大多数语言是一样的 都用点号来访问成员

1040
00:54:52,770 --> 00:54:55,170
当你在 Xcode 里打一个点的时候 它就说 呐

1041
00:54:55,170 --> 00:54:58,200
这里是所有 UIButton 可访问的成员

1042
00:54:58,210 --> 00:54:59,890
看见了么？

1043
00:54:59,890 --> 00:55:01,570
你可以发现 UIButton 能做很多事情

1044
00:55:01,580 --> 00:55:03,740
这是因为它继承于一个类 它的父类又继承于另一个类 不停继承

1045
00:55:03,740 --> 00:55:07,450
所以累积起来就有很多方法可供调用

1046
00:55:07,450 --> 00:55:10,320
所以当我查看了文档以后

1047
00:55:10,320 --> 00:55:13,820
我知道 currentTitle 这个属性正是我想要的

1048
00:55:13,820 --> 00:55:18,190
注意这里我打个字母 c 它会帮我过滤出那些开头是 c 的选择

1049
00:55:18,190 --> 00:55:23,330
然后接着打 cu 它有棒我过滤掉了一些

1050
00:55:23,330 --> 00:55:28,770
我可以按 Tab 键 前进到第一个歧义点 然后接着打 t

1051
00:55:29,730 --> 00:55:31,880
我可以按 Tab 键 前进到第一个歧义点 然后接着打 t

1052
00:55:31,890 --> 00:55:35,870
然后再敲 Tab 键 得到 currentTitle 然后按 Enter 键

1053
00:55:35,870 --> 00:55:37,320
好了

1054
00:55:38,780 --> 00:55:45,480
我们现在拿到了 sender 的 currentTitle 了 然后呢？

1055
00:55:45,480 --> 00:55:49,520
我们把它在 console（控制台）中打印出来 看看它里面是什么东西

1056
00:55:49,520 --> 00:55:50,680
这里使用 println 函数

1057
00:55:50,690 --> 00:55:55,990
它是一个全局函数 以一个 String 为参数

1058
00:55:55,990 --> 00:55:57,690
所以我就给它一个 String

1059
00:55:57,690 --> 00:55:59,760
在 String 里 我打

1060
00:55:59,760 --> 00:56:05,000
"digit = " 我想把 digit 的值嵌入到这个 string 里面

1061
00:56:05,000 --> 00:56:08,330
这里介绍一个 Swift 很酷的特性 就是

1062
00:56:08,330 --> 00:56:11,920
如果你在字符串里里放进这个 "\()" 然后你就可以在括号里面放入一个表达式

1063
00:56:11,920 --> 00:56:15,510
如果你在字符串里里放进这个 "\()" 然后你就可以在括号里面放入一个表达式

1064
00:56:15,510 --> 00:56:21,040
Swift 就会对这个表达式求值 然后把值转换成 String 最后嵌入到那个字符串里

1065
00:56:21,050 --> 00:56:24,710
所以用这个 "\()" 语法可以很方便的 println 一个对象的值

1066
00:56:24,720 --> 00:56:28,250
所以用这个 "\()" 语法可以很方便的 println 一个对象的值

1067
00:56:28,250 --> 00:56:30,180
现在让我们编译运行然后

1068
00:56:30,190 --> 00:56:32,120
看看我们按这些按钮的时候会打印出什么结果

1069
00:56:32,120 --> 00:56:35,020
结果可能会跟预期的有所不同

1070
00:56:37,860 --> 00:56:42,060
好咧 这里是我们的UI 有了一些按钮 看起来不错

1071
00:56:42,060 --> 00:56:44,430
但是控制台呢？输出结果的控制台去哪了？

1072
00:56:44,430 --> 00:56:46,260
看好了 当我点击 5 按钮的时候

1073
00:56:47,370 --> 00:56:49,230
控制台就在下面出现了

1074
00:56:49,240 --> 00:56:50,170
看见了吗？在底栏这里

1075
00:56:50,170 --> 00:56:51,870
这就是控制台

1076
00:56:51,870 --> 00:56:56,270
这里显示了  digit 等于..呃... Optional("5")

1077
00:56:56,270 --> 00:56:57,210
好吧

1078
00:56:57,210 --> 00:56:58,740
那 9 呢？

1079
00:56:58,740 --> 00:56:59,710
也是 Optional 的

1080
00:56:59,710 --> 00:57:03,250
这是什么鬼?

1081
00:57:03,250 --> 00:57:05,410
接下来我们将要理解一个 Swift 里的重要概念

1082
00:57:05,420 --> 00:57:08,420
这个概念初学者常常会搞错 但在 Swift 里它非常特别十分重要

1083
00:57:08,420 --> 00:57:11,420
这个概念初学者常常会搞错 但在 Swift 里它非常特别十分重要的

1084
00:57:11,420 --> 00:57:15,820
所以接下来我们集中精力 好好的理解这个 Optional 到底是什么意思

1085
00:57:15,820 --> 00:57:17,860
所以接下来我们集中精力 好好的理解这个 Optional 到底是什么意思

1086
00:57:17,860 --> 00:57:18,730
注意听咯

1087
00:57:18,730 --> 00:57:19,590
先回到代码

1088
00:57:22,160 --> 00:57:25,960
看这个 对了 顺便提一下 当控制台出现了以后

1089
00:57:25,970 --> 00:57:28,530
你可以用这个按钮把它隐藏掉 或者

1090
00:57:28,540 --> 00:57:31,270
也可以用鼠标把它拖走

1091
00:57:31,270 --> 00:57:34,710
不过让它一直显示在那里也挺好的

1092
00:57:34,710 --> 00:57:39,540
你可以随时看见你的输出 及时察觉问题

1093
00:57:39,550 --> 00:57:41,750
我就不隐藏它了 让你可以看见我们现在要讲的 Optional

1094
00:57:42,750 --> 00:57:45,180
言归正传

1095
00:57:45,180 --> 00:57:48,950
首先

1096
00:57:48,950 --> 00:57:52,750
你有没有发现一个奇怪的地方？ 这里 let digit = ... 我并没有给digit 一个类型

1097
00:57:52,760 --> 00:57:55,590
看到么？

1098
00:57:55,590 --> 00:57:57,660
那这个digit 到底是什么类型呢？

1099
00:57:57,660 --> 00:58:02,330
你可能会想 这里没有指定任何类型 难道 Swift 支持无类型变量？

1100
00:58:02,330 --> 00:58:04,630
你可能会想 这里没有指定任何类型 难道 Swift 支持无类型变量？

1101
00:58:04,630 --> 00:58:06,170
错！恰恰相反

1102
00:58:06,170 --> 00:58:10,140
Swift 是非常非常强类型的语言

1103
00:58:10,140 --> 00:58:11,340
所有变量都有它的类型

1104
00:58:11,340 --> 00:58:12,940
你必须规定一个类型

1105
00:58:12,940 --> 00:58:17,840
然后 Swift 有一个非常强大的特性 叫做类型推导

1106
00:58:17,840 --> 00:58:20,810
这样它就能通过当前上下文来推断出变量的类型

1107
00:58:20,810 --> 00:58:25,550
所以 当我写 digit = ... 无论我等号后面写什么 这个 currentTitle

1108
00:58:25,550 --> 00:58:29,390
它都能将 digit 设置成等号后面那个东西的类型

1109
00:58:29,390 --> 00:58:31,540
懂了么？

1110
00:58:31,540 --> 00:58:33,690
回到之前的问题 那么这个到底是什么类型？

1111
00:58:33,690 --> 00:58:37,360
我可以按住 Option 键 就像查看文档那样

1112
00:58:37,360 --> 00:58:42,630
我们也可以按住 Option 来点击我们的变量

1113
00:58:42,630 --> 00:58:44,330
看看它是常量还是变量

1114
00:58:44,330 --> 00:58:45,200
它们是变量么？

1115
00:58:45,200 --> 00:58:46,130
还可以看看它们是什么类型?

1116
00:58:46,140 --> 00:58:47,300
看这个

1117
00:58:47,300 --> 00:58:50,220
按住 Option 然后点击

1118
00:58:50,220 --> 00:58:53,140
它说 digit 是 “String?” 类型的

1119
00:58:53,140 --> 00:58:54,570
嗯 String 后面有个问号

1120
00:58:55,510 --> 00:58:58,240
这个问号的意思是 —— “Optional（可选）”

1121
00:58:58,250 --> 00:59:02,580
在 Swift 里面 有一种类型 叫做 optional

1122
00:59:02,580 --> 00:59:08,250
Optional 这种类型 只有两个值

1123
00:59:08,250 --> 00:59:10,590
一个值叫：未设

1124
00:59:12,090 --> 00:59:16,990
代表着这个值还没有被任何人设置过 或者 有人故意把它设置成了“未设”状态

1125
00:59:16,990 --> 00:59:20,930
代表着这个值还没有被任何人设置过 或者 有人故意把它设置成了“未设”状态

1126
00:59:20,930 --> 00:59:25,400
当一个 Optional 的变量是“未设”状态时

1127
00:59:25,400 --> 00:59:28,240
有一个符号用来表示这个状态 这个符号叫做 nil, N, I, L.

1128
00:59:28,240 --> 00:59:31,210
nil 就是“未设”的意思 就是optional 变量在“未设”状态下的值

1129
00:59:31,210 --> 00:59:34,740
在 Swift 里 nil 只有这一个意义 就是说这个变量是Optional 的

1130
00:59:34,740 --> 00:59:36,940
而且它的值是“未设”

1131
00:59:36,950 --> 00:59:41,580
那 Optional 的另一种值是是什么呢？

1132
00:59:41,580 --> 00:59:44,650
“有值” 就是说它被设置赋了一个值

1133
00:59:44,650 --> 00:59:47,620
那“有值”的这个值 是什么类型呢？

1134
00:59:47,620 --> 00:59:51,260
就是 “?” 前面那个东西代表的类型

1135
00:59:51,260 --> 00:59:55,930
所以 你可以这样想：

1136
00:59:55,930 --> 01:00:00,760
问号左边的那个 String 就表示 如果这个 Optional 变量被赋了值的话 那么它的类型就是 String

1137
01:00:00,770 --> 01:00:04,130
问号左边的那个 String 就表示 如果这个 Optional 变量被赋了值的话 那么它的类型就是 String

1138
01:00:04,140 --> 01:00:06,940
所以 我们可以称其为“Optional String”

1139
01:00:06,940 --> 01:00:11,840
但是它实际上确确实实是 Optional 类型的 它不是一个可以为 nil 的 String

1140
01:00:11,840 --> 01:00:14,810
它是 Optional 类型 只不过可以被赋值为 Stirng

1141
01:00:14,810 --> 01:00:16,510
好好理解这句话

1142
01:00:16,510 --> 01:00:19,010
理解这个句子和含义非常非常关键

1143
01:00:20,050 --> 01:00:23,950
所以在这里 currentTitle 返回的值肯定是 Optional 类型的

1144
01:00:23,950 --> 01:00:26,520
我们来看看

1145
01:00:26,520 --> 01:00:29,090
按住 Option 点 currentTitle

1146
01:00:29,090 --> 01:00:31,520
看 这是它的文档

1147
01:00:31,530 --> 01:00:36,330
这是一个实例变量 UIButton 的属性

1148
01:00:36,330 --> 01:00:37,260
名字是currentTitle

1149
01:00:37,260 --> 01:00:39,300
类型是“String?”

1150
01:00:39,300 --> 01:00:41,270
而这里的“get”表示这个是只读的

1151
01:00:41,270 --> 01:00:42,670
我只能 get（读取值） currentTitle

1152
01:00:42,670 --> 01:00:44,800
但是我不能 set （写入值） 有其他方式 set 这个按钮的 title

1153
01:00:44,800 --> 01:00:47,810
你不能通过这个方法或者属性 set 这个 title

1154
01:00:47,810 --> 01:00:51,480
所以这是一个 optional 这就是为什么它最后也是 optional

1155
01:00:51,480 --> 01:00:53,080
嗯 这非常不错

1156
01:00:53,080 --> 01:00:54,540
那我该如何获取这个 String 呢？

1157
01:00:54,550 --> 01:00:57,310
我不希望它是 optional 的 我要的是这个按钮的 String

1158
01:00:57,320 --> 01:01:02,920
方法就是解包这个 optional 意思是你打开这个它找到里面的东西

1159
01:01:02,920 --> 01:01:08,060
用“!”就可以获取到它的值

1160
01:01:08,060 --> 01:01:11,330
如果我把感叹号放在这里会怎么样？

1161
01:01:11,330 --> 01:01:13,730
首先我先会展示给你们看 当我把感叹号放在这里

1162
01:01:13,730 --> 01:01:17,000
看看会有什么变化 我现在点击数字 我按 Option 然后点击这个 digit

1163
01:01:17,000 --> 01:01:19,270
它不再是 optional 类型了

1164
01:01:19,270 --> 01:01:22,500
digit 变成了 String 因为我把 optional 解包了

1165
01:01:22,500 --> 01:01:25,570
从 currentTitle 里得到了 String

1166
01:01:25,570 --> 01:01:28,610
但是如果这是个 nil 值会怎么样？

1167
01:01:28,610 --> 01:01:30,180
如果 optional 是nil会怎样呢？

1168
01:01:30,180 --> 01:01:34,710
换句话说 就是这些 optional 类型的按钮没有 set 值会怎样？对的 程序会崩溃

1169
01:01:34,720 --> 01:01:39,850
所以如果你使用"!"号来解包一个 optional 的时候

1170
01:01:39,850 --> 01:01:45,660
并且这个 optional 的 currentTitle 没有设值为 nil 的时候 你的程序会崩溃

1171
01:01:46,930 --> 01:01:50,490
现在你们中的不少人肯定在想 我的程序将会整天 crash 掉

1172
01:01:50,500 --> 01:01:55,900
因为iOS有着非常多的 optional 非 常 多

1173
01:01:55,900 --> 01:01:58,930
大部分东西都是 optional 的 因为大部分东西都是有意义的

1174
01:01:58,940 --> 01:02:00,840
某些时候它们会处于“未设”状态

1175
01:02:02,170 --> 01:02:07,740
在这个情况下 说不定你就希望你的程序 crash？对不对？

1176
01:02:07,740 --> 01:02:11,850
你也许就是希望自己的程序 crash 因为如果你有一个按键

1177
01:02:11,850 --> 01:02:15,920
但是它的标题从未被 set 并且它传了一个数字给你的 controller 你也许

1178
01:02:15,920 --> 01:02:20,350
想在你的程序见客户之前 你就能找到bug 所以你希望它 crash

1179
01:02:20,360 --> 01:02:23,360
现在你知道为什么有时候程序 crash 是个好事吧

1180
01:02:23,360 --> 01:02:26,760
现在如果你不想你的程序 crash  这里有一个方法来解决

1181
01:02:26,760 --> 01:02:28,160
我等一下下展示给你们看

1182
01:02:28,160 --> 01:02:32,800
但是现在 先弄明白这个感叹号是干什么的

1183
01:02:32,800 --> 01:02:35,630
它解包了 optional 如果它是 nil 就 crash

1184
01:02:35,640 --> 01:02:38,040
但如果不是 nil 它是得到 String 或者

1185
01:02:38,040 --> 01:02:40,800
其他的 optional 解包后的类型？

1186
01:02:40,810 --> 01:02:44,570
所以让我们继续 重新运行一次

1187
01:02:44,580 --> 01:02:51,310
我们将看看是不是能得到“digit = ”对应的数字？

1188
01:02:51,320 --> 01:02:56,550
我们得到了 currentTitle 的 String 不再是 optional 的类型了

1189
01:02:56,550 --> 01:02:59,490
看上去不错

1190
01:02:59,490 --> 01:03:03,360
好的 现在 我们要用这些 digit 做什么呢？

1191
01:03:03,360 --> 01:03:06,710
我们已经能得到了数字

1192
01:03:06,710 --> 01:03:10,060
我们希望按的数字能显示并附加在这里的末尾

1193
01:03:10,070 --> 01:03:13,970
所以让我们输入 display 点(.)

1194
01:03:13,970 --> 01:03:17,240
现在继续 如果我们查文档

1195
01:03:17,240 --> 01:03:21,710
它会告诉我们 UILabel 有一个属性 这个属性告诉我们 display 是什么

1196
01:03:21,710 --> 01:03:23,040
负责显示 UILabel 应该显示的什么

1197
01:03:23,040 --> 01:03:25,980
这个属性叫做 text

1198
01:03:25,980 --> 01:03:28,510
就在这里

1199
01:03:28,510 --> 01:03:31,050
而且实际上 输入这个 你能在这里看到 这是一个 optional

1200
01:03:31,050 --> 01:03:36,220
所以这个 label 的 text 应该还没有设值

1201
01:03:36,220 --> 01:03:39,060
所以这里是 optional String

1202
01:03:39,060 --> 01:03:43,290
所以我现在要用等号设值 显示的 text 作为一个optional

1203
01:03:43,290 --> 01:03:46,560
什么值可以设给它？

1204
01:03:46,560 --> 01:03:51,700
我可以设成 nil 因为它是一个optional 所以它是完全合法的

1205
01:03:51,700 --> 01:03:53,940
看 没有警告也没有错误

1206
01:03:53,940 --> 01:03:55,470
这将什么也不显示

1207
01:03:55,470 --> 01:03:57,940
它不能设值成其他东西

1208
01:03:57,940 --> 01:04:00,970
我能给它设一个 String 值 因为它是一个 optional String

1209
01:04:00,980 --> 01:04:03,680
所以我将把它设值一个 String

1210
01:04:03,680 --> 01:04:08,580
这个 String 我设置成 display.text  这里加个数字

1211
01:04:08,580 --> 01:04:10,080
这样子就能附加数字上去了

1212
01:04:10,080 --> 01:04:11,650
让我们摆脱删掉这句

1213
01:04:11,650 --> 01:04:14,120
好吧 现在又有一个错误

1214
01:04:14,120 --> 01:04:15,020
这个错误是为什么呢？为什么这里有个错误呢？

1215
01:04:15,020 --> 01:04:17,090
有谁自愿回答这里为什么有个错误？

1216
01:04:17,090 --> 01:04:18,660
发现错误指向这里

1217
01:04:18,660 --> 01:04:21,890
这里有个错误 后面那位同学回答

1218
01:04:21,890 --> 01:04:24,730
display.text 是一个 optional String

1219
01:04:24,730 --> 01:04:27,700
答对了 因为这里的 display.text 它不是个 String

1220
01:04:27,700 --> 01:04:33,340
你不能将一个 String 后附加一个 optional

1221
01:04:33,340 --> 01:04:35,470
你只能将一个 String 附加在另外的 String 上

1222
01:04:35,470 --> 01:04:39,810
所以我们通过解包 optioanl 将 optioanl 转变为 String

1223
01:04:39,810 --> 01:04:44,250
对的 这个东西会 crash 如果 display 没有值

1224
01:04:44,250 --> 01:04:46,180
现在还没有设值

1225
01:04:46,180 --> 01:04:48,880
大家都了解这个了吧？

1226
01:04:48,880 --> 01:04:49,820
再让我们运行一次

1227
01:04:49,820 --> 01:04:52,850
[背景音]

1228
01:04:52,850 --> 01:04:54,050
好的

1229
01:04:54,060 --> 01:04:57,460
所以现在点击5 噢 5显示在这里了

1230
01:04:57,460 --> 01:04:58,760
点击6 好极了

1231
01:04:58,760 --> 01:05:00,490
它能够工作了

1232
01:05:00,490 --> 01:05:02,560
这个0在这里我很不喜欢

1233
01:05:02,560 --> 01:05:03,960
这里就有点问题 5和6前面有个0

1234
01:05:03,960 --> 01:05:06,660
这样子是不对的

1235
01:05:06,670 --> 01:05:09,370
这个0应该在我按下5的时候就清除掉

1236
01:05:09,370 --> 01:05:12,800
这是因为我们确实需要一些方法让我们的 controller 知道我们是否在

1237
01:05:12,810 --> 01:05:14,770
已经输入了数字

1238
01:05:14,770 --> 01:05:16,740
因为如果我们在一个已经输入了数字 我们是希望数字加在后面

1239
01:05:16,740 --> 01:05:18,070
但是如果我们还没开始输入数字

1240
01:05:18,080 --> 01:05:21,180
我们想要开始输入的是一个新的数字（而不是在0后面附加新数字） 对吧？

1241
01:05:21,180 --> 01:05:27,020
所以 让我们通过添加一个 property 来实现这个效果

1242
01:05:27,020 --> 01:05:35,620
“var userIsInTheMiddleOfTypingANumber” 你也许会说

1243
01:05:35,630 --> 01:05:38,460
天哪 这么糟糕的变量名字 每次都得这么输入还不得累死？

1244
01:05:38,460 --> 01:05:40,900
其实下一次用到这个变量时我并不需要输入这么多的

1245
01:05:40,900 --> 01:05:44,160
因为下一次 Xcode 会帮我自动补齐的

1246
01:05:44,170 --> 01:05:48,840
所以这么长的名字没有问题

1247
01:05:48,840 --> 01:05:50,600
我就挺喜欢这个名字的 就这么用了.

1248
01:05:50,610 --> 01:05:53,070
这是一个布尔型数值

1249
01:05:53,070 --> 01:05:54,840
所以我输入它 给了它的这个类型

1250
01:05:54,840 --> 01:06:01,610
这个是变量名的类型 注意看这里 有一个小的错误标记

1251
01:06:01,620 --> 01:06:06,220
有时候你在 Swift 会遇到对你来说难以理解的错误

1252
01:06:06,220 --> 01:06:08,720
这是因为你对 Swift 的了解还不够深入

1253
01:06:08,720 --> 01:06:11,140
这个错误就是因为这个

1254
01:06:11,140 --> 01:06:13,560
你看 这里说 viewController 没有初始化方法

1255
01:06:13,560 --> 01:06:19,660
请注意 这是因为 在 Swift 里

1256
01:06:19,660 --> 01:06:24,270
当一个对象初始化了 那么这个对象的所有属性都必须要初始化

1257
01:06:24,270 --> 01:06:29,140
所以你不能用没有初始化的属性

1258
01:06:29,140 --> 01:06:30,970
它们需要一个值

1259
01:06:30,970 --> 01:06:32,860
现在 它们是一个 optional

1260
01:06:32,860 --> 01:06:34,740
它们的值可以为 nil 但是它们必须有值

1261
01:06:34,740 --> 01:06:37,750
所以我们不能在它们没有值前使用

1262
01:06:37,750 --> 01:06:40,050
有两种方法给它设值

1263
01:06:40,050 --> 01:06:42,080
一种就是用初始化方法

1264
01:06:42,080 --> 01:06:45,150
但是不幸的是 这种方法要下周才会教你们

1265
01:06:45,150 --> 01:06:46,550
你还不能用这种方法

1266
01:06:46,550 --> 01:06:51,220
所以另外一种方法就是对其直接赋值

1267
01:06:51,230 --> 01:06:55,290
一下子 所有错误都解决了 很明显我们

1268
01:06:55,300 --> 01:06:59,400
不会一开始就有数字 所以这样就很好了

1269
01:07:01,100 --> 01:07:04,370
现在我们就知道了什么时候输入了数字

1270
01:07:04,370 --> 01:07:06,240
我们能从这里继续深入 如果说用户 ——

1271
01:07:06,240 --> 01:07:12,240
再一次 按一下 Tab 跳过这些 可能还要多按几次 找到这个 ——

1272
01:07:12,240 --> 01:07:14,640
但是如果用户正在输入数字

1273
01:07:14,650 --> 01:07:17,180
那就和刚才我们刚刚做的操作一样

1274
01:07:17,180 --> 01:07:21,180
不然的话 如果我们设置 “display.text = ”

1275
01:07:21,180 --> 01:07:24,550
我们刚刚输入的新数字

1276
01:07:24,550 --> 01:07:27,920
这就表示了用户现在正在输入数字

1277
01:07:27,920 --> 01:07:30,060
什么问题？

1278
01:07:30,060 --> 01:07:32,190
[学生提问]

1279
01:07:32,190 --> 01:07:34,830
[学生提问]

1280
01:07:34,830 --> 01:07:37,660
为什么我们没有初始化这个？

1281
01:07:37,670 --> 01:07:39,980
这是个非常棒的的问题

1282
01:07:39,980 --> 01:07:42,300
我将在周三说这个问题 因为现在只剩下一分钟了

1283
01:07:42,300 --> 01:07:44,900
在我下次说到的时候 这依然是个很好的问题

1284
01:07:44,910 --> 01:07:48,670
我将会说一下为什么这里是个感叹号而不是个问号

1285
01:07:48,680 --> 01:07:52,540
因为我之前说过 optional 都是由问号组成的

1286
01:07:52,550 --> 01:07:55,310
但是为什么这个 optional 是这样的？

1287
01:07:55,310 --> 01:07:58,080
因为这是个感叹号 我们下节课再说这个问题

1288
01:07:58,080 --> 01:08:01,050
所以让我们下次课继续

1289
01:08:01,050 --> 01:08:04,790
我们之前希望这个 0 可以被清掉 看来没问题 看看这个

1290
01:08:04,790 --> 01:08:07,690
希望这个也可以正常的附加数字 看来也没问题

1291
01:08:07,690 --> 01:08:11,530
我们今天已经有了一个不错的开始 我们已经有一个计算器了

1292
01:08:11,530 --> 01:08:16,900
我们已经能够输入数字了 下一步我们将让其能够计算

1293
01:08:16,900 --> 01:08:19,400
我们下节课再来实现 大家下节课见

1294
01:08:21,040 --> 01:08:24,910
想浏览更多？请访问 stanford.edu

