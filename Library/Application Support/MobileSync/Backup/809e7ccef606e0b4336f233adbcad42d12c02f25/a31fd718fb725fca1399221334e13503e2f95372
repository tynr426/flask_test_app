1
00:00:05,380 --> 00:00:09,000
> Stanford University.

2
00:00:09,000 --> 00:00:14,400
> Alright, so welcome to Stanford CS193p, fall of 2013-14 academic year.

3
00:00:14,440 --> 00:00:16,480
This is our very first lecture

4
00:00:16,480 --> 00:00:20,030
and we are going to be covering developing applications for iOS,

5
00:00:20,030 --> 00:00:22,960
so specifically iOS7.

6
00:00:22,980 --> 00:00:26,000
Today's lecture kind of has a first part and a second part.

7
00:00:26,000 --> 00:00:28,000
The first part is a little bit of logistics.

8
00:00:28,000 --> 00:00:30,990
The second part is I'm going to dive right into the course material

9
00:00:30,990 --> 00:00:33,000
because there's a lot to cover and so,

10
00:00:33,000 --> 00:00:36,000
we need to start covering it.

11
00:00:36,000 --> 00:00:38,270
So, what will I learn in this course?

12
00:00:38,290 --> 00:00:40,140
I think you know what you're going to learn in this course.

13
00:00:40,140 --> 00:00:42,570
You're going to learn how to build cool apps.

14
00:00:42,590 --> 00:00:45,700
iOS is a really cool platform for building apps,

15
00:00:45,720 --> 00:00:47,000
you probably already know that.

16
00:00:47,000 --> 00:00:51,010
The apps look cool, they've got animation.

17
00:00:51,010 --> 00:00:53,350
What's really cool is they're in your pockets

18
00:00:53,360 --> 00:00:55,330
so you can whip them out and show them to your friends.

19
00:00:55,350 --> 00:00:58,010
You don't have to send them to a website or go get a computer.

20
00:00:58,030 --> 00:01:03,000
It's also really easy to develop really powerful apps in a really short amount of time,

21
00:01:03,000 --> 00:01:05,680
as you're going to find. This course is only 10 weeks long,

22
00:01:05,700 --> 00:01:08,000
and while this is Stanford, I know,

23
00:01:08,000 --> 00:01:10,000
you're all really, really good programmers and all that,

24
00:01:10,000 --> 00:01:13,940
it still, 10 weeks is not a lot of time, so when we get to the end,

25
00:01:13,940 --> 00:01:17,920
you're going to see that it's a very leveraged platform for building things.

26
00:01:17,940 --> 00:01:20,620
And, you know, the community is quite vibrant,

27
00:01:20,640 --> 00:01:23,510
being able to distribute your apps via the app store

28
00:01:23,530 --> 00:01:26,700
and not have to put them in a box and put them on a shelf in a store,

29
00:01:26,700 --> 00:01:30,360
is really a big, big difference when it comes to marketing a product.

30
00:01:30,380 --> 00:01:32,000
And you'll, you'll see that.

31
00:01:32,000 --> 00:01:36,510
The second thing you're going to learn in this course though is real-world application,

32
00:01:36,530 --> 00:01:40,220
a lot of the computer science things you're learning in other classes.

33
00:01:40,730 --> 00:01:42,500
So, we're going to be doing networking,

34
00:01:42,500 --> 00:01:44,500
we're going to do multithreaded,

35
00:01:44,500 --> 00:01:46,100
we're going to be doing all kinds of graphics,

36
00:01:46,100 --> 00:01:47,500
we're going to be doing animation,

37
00:01:47,500 --> 00:01:49,500
we're going to do object-oriented databases,

38
00:01:49,500 --> 00:01:51,310
we're going to do all that stuff for real.

39
00:01:51,310 --> 00:01:55,500
You're going to see what it looks like to apply all those computer science concepts,

40
00:01:55,500 --> 00:01:58,500
especially how to combine them into a real-world platform,

41
00:01:58,500 --> 00:02:00,500
where you're making real apps.

42
00:02:00,500 --> 00:02:04,960
And quite a few, many dozens of my former students have

43
00:02:04,960 --> 00:02:09,310
shipped their apps on the app store and you may well too. So this is

44
00:02:09,330 --> 00:02:13,360
really, this is a good course to kind of combine or

45
00:02:13,360 --> 00:02:16,880
synthesize all of the things you've learned in a lot of your other computer science classes

46
00:02:16,880 --> 00:02:20,680
and touch it up against the real world.

47
00:02:20,680 --> 00:02:24,440
The prerequisites for this class are super duper important,

48
00:02:24,440 --> 00:02:27,770
This, it's just key to make sure you have these prerequisites

49
00:02:27,770 --> 00:02:31,500
and really think long and hard, if you don't, whether you want to give this class a go.

50
00:02:31,500 --> 00:02:36,990
CS 106 A&B or, or CS106x are absolutely required.

51
00:02:36,990 --> 00:02:40,500
If you don't have that or equivalent, definitely, don't even think about it.

52
00:02:40,500 --> 00:02:44,120
The second requirement I've added this quarter, based on experience,

53
00:02:44,140 --> 00:02:47,100
is CS107 or CS108, which is great,

54
00:02:47,100 --> 00:02:50,500
by the way, if you're taking CS108, you'll really be ready for this class.

55
00:02:50,500 --> 00:02:53,500
Or even CS110, and part

56
00:02:53,500 --> 00:02:56,500
of the reason I'm requiring these extra classes is just

57
00:02:56,500 --> 00:03:00,010
so you're farther along the programming experience curve

58
00:03:00,030 --> 00:03:02,250
because this class is a lot of programming,

59
00:03:02,250 --> 00:03:06,500
and so for those of you who are used to a lot of programming, you're used to it.

60
00:03:06,500 --> 00:03:10,500
But for those of you who aren't it's kind of like, whoa, do a lot of programming here.

61
00:03:10,500 --> 00:03:14,500
It's going to be a little unbalancing. So, that's why I've required all those.

62
00:03:14,500 --> 00:03:16,500
Now if you've done a summer internship

63
00:03:16,500 --> 00:03:18,500
of you've done some programming or something like that,

64
00:03:18,500 --> 00:03:23,500
that's definitely a substitute for CS107, 108, or 110, right?

65
00:03:23,500 --> 00:03:27,440
Or if you've done some other CS class that's even more advanced than these, that's fine too.

66
00:03:27,450 --> 00:03:30,160
You've just got to understand that this class is, you know,

67
00:03:30,160 --> 00:03:32,160
a programming class, there's a lot of programming.

68
00:03:32,160 --> 00:03:35,920
And most importantly, you got to really be comfortable with object-oriented programming.

69
00:03:35,940 --> 00:03:38,050
So I put a bunch of terms up here,

70
00:03:38,050 --> 00:03:41,530
like message and instance variable and superclass and subclass,

71
00:03:41,530 --> 00:03:44,500
if you don't know these terms like the back of your hand,

72
00:03:44,500 --> 00:03:46,500
it's going to be hard for you to get this class,

73
00:03:46,500 --> 00:03:48,790
because I'm going to be throwing those terms out left, right, and center.

74
00:03:48,810 --> 00:03:51,500
iOS7 is completely object-oriented.

75
00:03:51,500 --> 00:03:54,500
Okay, the whole structure, the design of the thing, is object-oriented.

76
00:03:54,500 --> 00:03:57,500
So, you just got to know that, and if you don't know that,

77
00:03:57,500 --> 00:03:59,500
you definitely want to go get that first.

78
00:03:59,500 --> 00:04:02,500
Okay? Take CS106a&b equivalent first,

79
00:04:02,500 --> 00:04:06,660
and then get a little more programming experience and then you're good to go.

80
00:04:06,680 --> 00:04:10,270
We're going, you're going to be writing apps in this class

81
00:04:10,270 --> 00:04:15,500
with dozens of classes that you're going to write by the fifth, sixth week so,

82
00:04:15,500 --> 00:04:19,860
you know, if the biggest app you've ever written is got 3, or 4, or 5 classes in it,

83
00:04:19,860 --> 00:04:22,500
oh, this is going to be a step up.

84
00:04:23,950 --> 00:04:28,500
The assignments, we've got this weekly assignments for the first six or seven weeks,

85
00:04:28,500 --> 00:04:30,500
and then you've got a final project at the end.

86
00:04:30,500 --> 00:04:32,500
All of the homework assignments have detailed write-up

87
00:04:32,500 --> 00:04:36,010
of the required task and what we're evaluating you on.

88
00:04:36,030 --> 00:04:37,800
And they also have hints in there,

89
00:04:37,810 --> 00:04:40,500
because I'm not trying to make the homework assignments be really, really hard,

90
00:04:40,500 --> 00:04:45,500
and all the homework assignments also directly are re --

91
00:04:45,500 --> 00:04:49,500
they're basically reinforcing what has been taught in lecture in that week,

92
00:04:49,500 --> 00:04:52,180
they're not a bunch of random new stuff to learn.

93
00:04:52,190 --> 00:04:55,320
I'm a big believer in a teaching methodology, which is

94
00:04:55,320 --> 00:04:59,640
I'm going to tell you about a concept, via slides,

95
00:04:59,640 --> 00:05:02,500
and then I'm going to show you it by demoing it to you,

96
00:05:02,500 --> 00:05:04,500
actually writing an application that does it, then I'm going

97
00:05:04,500 --> 00:05:06,500
to ask you to do it on the homework.

98
00:05:06,500 --> 00:05:10,500
So that's three times you're going to see every single thing pretty much in this class.

99
00:05:10,500 --> 00:05:13,080
By the end of that, you're going to know how to do it.

100
00:05:13,100 --> 00:05:15,500
Okay? And you're going to feel confident and experienced to do it.

101
00:05:15,500 --> 00:05:17,500
So the homework is all about that.

102
00:05:17,500 --> 00:05:22,500
It's about just doing what you saw me do in class and talk about in class and apply it.

103
00:05:22,500 --> 00:05:27,250
Alright. Now I'm going to really briefly go over what's in iOS,

104
00:05:27,250 --> 00:05:29,300
I think most of you know what's in iOS, hopefully

105
00:05:29,300 --> 00:05:31,770
you've all seen an iOS device

106
00:05:31,770 --> 00:05:35,500
or you have one in your pocket, I bet 90 percent of you do in this room,

107
00:05:35,500 --> 00:05:38,500
but I'm going to try and summarize it,

108
00:05:38,500 --> 00:05:40,500
this is really hard to do because I'm going to try

109
00:05:40,500 --> 00:05:43,500
and do it in four minutes or less, or five minutes,

110
00:05:43,500 --> 00:05:46,270
and it's so big that, I mean, I could have two lectures

111
00:05:46,270 --> 00:05:49,190
where I just talk about all the different things and just summarize them.

112
00:05:49,210 --> 00:05:54,620
So, this is going to try and group them into some sort of sensible groups

113
00:05:54,620 --> 00:05:58,380
so you have an idea of what's there from a development standpoint,

114
00:05:58,380 --> 00:06:02,190
then when we go off and start doing it all then you'll start realizing whoa,

115
00:06:02,210 --> 00:06:04,500
and once you learn how to look in the documentation you'll see, oh,

116
00:06:04,500 --> 00:06:06,500
look at all that stuff in there, and you'll figure it out.

117
00:06:06,500 --> 00:06:08,230
So this is just a high-level overview.

118
00:06:08,250 --> 00:06:13,500
So, I've used this division into these four, kind of groups.

119
00:06:13,500 --> 00:06:17,190
Core OS, which is the stuff that's close to the hardware.

120
00:06:17,190 --> 00:06:20,500
Core services, which is an object-oriented on top of that,

121
00:06:20,500 --> 00:06:24,010
that kind of makes it so you always are programming an object-oriented layer.

122
00:06:24,010 --> 00:06:27,750
Media, because these devices are basically iPods

123
00:06:27,750 --> 00:06:29,930
with a phone in them or with a big screen on them,

124
00:06:29,950 --> 00:06:32,500
but media is really important to these devices,

125
00:06:32,500 --> 00:06:35,010
and then finally Cocoa Touch, which is the UI layer.

126
00:06:35,030 --> 00:06:37,500
Of buttons and all the switches, things like that.

127
00:06:37,500 --> 00:06:40,500
So let's talk about what's in each of those layers, kind of,

128
00:06:40,500 --> 00:06:43,500
little skimming the surface of what's in those layers.

129
00:06:43,500 --> 00:06:48,500
At the Core OS layer, near the hardware, is a Unix kernel.

130
00:06:48,500 --> 00:06:52,500
Okay? This is a Unix operating system on this device.

131
00:06:52,500 --> 00:06:55,860
And BSD-based mock,

132
00:06:55,860 --> 00:06:58,500
and so you get everything you get with Unix.

133
00:06:58,500 --> 00:07:01,500
You're getting sockets and you're getting file system,

134
00:07:01,500 --> 00:07:03,780
permissions, all that stuff,

135
00:07:03,780 --> 00:07:07,500
plus you're getting a bunch of other stuff that's kind of specific to a mobile

136
00:07:07,500 --> 00:07:09,770
device like this, like power management,

137
00:07:09,770 --> 00:07:14,500
and key chain access to kind of manage the security of things.

138
00:07:14,500 --> 00:07:16,500
Bonjour, which is this kind of network,

139
00:07:16,500 --> 00:07:18,500
finding other things on the network.

140
00:07:18,500 --> 00:07:23,040
So it's got all that stuff, it's a very powerful underlying operating system.

141
00:07:23,040 --> 00:07:26,500
But all of that API or most of it is in C,

142
00:07:26,500 --> 00:07:29,500
and we want to be programming kind of purely object-oriented layer.

143
00:07:29,500 --> 00:07:32,500
So we're going to be mostly operating when we're talking,

144
00:07:32,500 --> 00:07:35,500
touching those things at the Core Services layer.

145
00:07:35,500 --> 00:07:39,500
So this layer has things like language, things that,

146
00:07:39,500 --> 00:07:41,280
that kind of make the language more powerful,

147
00:07:41,280 --> 00:07:45,500
like arrays and dictionaries, and strings and things like that,

148
00:07:45,500 --> 00:07:49,080
plus it has object-oriented ways to access the file system,

149
00:07:49,100 --> 00:07:51,500
it has object-oriented ways to find out the GPS

150
00:07:51,500 --> 00:07:53,990
location of your device, for example.

151
00:07:54,010 --> 00:07:57,500
It has ways to do multithreading.

152
00:07:57,500 --> 00:08:00,450
All this stuff what you want to be able to do,

153
00:08:00,450 --> 00:08:04,930
but you want to stay in an object-oriented kind of mindset as you're doing them all.

154
00:08:04,950 --> 00:08:09,970
There's a huge layer, foundational layer there at Core services for doing that.

155
00:08:09,970 --> 00:08:12,990
At the media layer, don't sleep on this layer,

156
00:08:12,990 --> 00:08:16,000
really important layer, you've got video here, you've got video editing,

157
00:08:16,010 --> 00:08:18,280
you got images, of course, that it can display,

158
00:08:18,280 --> 00:08:21,190
it's incredibly powerful audio for doing 3D audio,

159
00:08:21,190 --> 00:08:23,500
if you have games, you can make the Thai fighters feel

160
00:08:23,500 --> 00:08:25,500
like they're ripping by you and stuff.

161
00:08:25,500 --> 00:08:27,260
All that stuff is in here.

162
00:08:27,260 --> 00:08:29,500
This is part of, the part of iOS

163
00:08:29,500 --> 00:08:31,820
that really I can't cover in a lot of depth.

164
00:08:31,840 --> 00:08:35,150
I'm just going to try and let you know that it's there and you're going to dive down

165
00:08:35,150 --> 00:08:39,500
depending on what kind of applications, later in your life, you want to build.

166
00:08:39,500 --> 00:08:44,500
But there's an enormous amount there. This is a fundamentally, a multimedia device, obviously,

167
00:08:44,500 --> 00:08:48,500
and then, Cocoa Touch is where we're going to spend most of our time.

168
00:08:48,500 --> 00:08:53,690
This is where you are going to be building buttons and sliders and text fields,

169
00:08:53,690 --> 00:08:57,580
talking to each other, and animation happening, things sliding in and out, and,

170
00:08:57,580 --> 00:09:00,500
you know, fading out and fading in.

171
00:09:00,500 --> 00:09:04,880
If you want to get the, a picture from the camera from the user, you can do that.

172
00:09:04,890 --> 00:09:06,520
Things like localization

173
00:09:06,520 --> 00:09:08,890
so that you're app can run in many countries in the world

174
00:09:08,890 --> 00:09:10,890
and up your sales by doing that.

175
00:09:10,910 --> 00:09:15,500
A whole map kit for doing all the 3D maps that you've probably seen in iOS7 and all

176
00:09:15,500 --> 00:09:17,500
that stuff is all in there.

177
00:09:18,580 --> 00:09:23,500
And, there's even a view in there that's an entire web browser in a little rectangle

178
00:09:23,500 --> 00:09:25,500
that you can just plop right into your app.

179
00:09:25,500 --> 00:09:28,740
So these are really high-level objects,

180
00:09:28,750 --> 00:09:31,800
and we're going to really be diving into this layer, alright?

181
00:09:31,800 --> 00:09:33,500
So this is really the primary.

182
00:09:33,500 --> 00:09:36,780
And it's called Cocoa Touch because

183
00:09:36,780 --> 00:09:40,500
the API in here was originally developed for Mac OS X,

184
00:09:40,500 --> 00:09:42,360
and it was called Cocoa,

185
00:09:42,360 --> 00:09:45,450
and of course then when they went to iOS, they adapted,

186
00:09:45,450 --> 00:09:48,500
and a lot of API is shared between the two platforms, and, in fact,

187
00:09:48,500 --> 00:09:51,500
if you develop an iOS app and then you say someday, oh,

188
00:09:51,500 --> 00:09:54,990
I want to develop an app for the Mac using Cocoa, it's going to be very similar.

189
00:09:55,000 --> 00:09:58,500
Okay? You're going to be really, it's going to look familiar.

190
00:09:58,500 --> 00:10:03,500
So Cocoa Touch, obviously, is the touchscreen version of that, of Cocoa.

191
00:10:04,340 --> 00:10:08,500
This technology, Cocoa, has been around a long time.

192
00:10:08,500 --> 00:10:11,500
Probably almost 30 years, believe it or not.

193
00:10:11,500 --> 00:10:15,970
From even before Apple acquired it to make Mac OS,

194
00:10:15,970 --> 00:10:19,890
what is now Mac OS X, and so it's a very mature API.

195
00:10:19,910 --> 00:10:25,350
And it's very well thought out, so, especially if you go with the flow of it,

196
00:10:25,360 --> 00:10:28,500
it's very easy to build really powerful things.

197
00:10:28,500 --> 00:10:30,500
So, that's what's in there.

198
00:10:30,500 --> 00:10:33,350
So let's talk about the tools we use as programmers,

199
00:10:33,360 --> 00:10:36,190
as developers, to build these apps.

200
00:10:36,190 --> 00:10:38,500
And I've divided those into kind of four sections here.

201
00:10:38,500 --> 00:10:42,500
One is the tools, the actual programming tools,

202
00:10:42,500 --> 00:10:47,860
and what's great, on this platform, is it's pretty much a one-tool fits all.

203
00:10:47,870 --> 00:10:49,980
Okay? There's this one tool, XCode 5,

204
00:10:50,000 --> 00:10:51,500
and everything's in there.

205
00:10:51,500 --> 00:10:53,500
Your debugger's in there, all your source code editing,

206
00:10:53,500 --> 00:10:57,850
your source code control, the UI building, everything is in this one app.

207
00:10:57,870 --> 00:11:00,500
There's a little adjunct there, instruments, which is for things

208
00:11:00,500 --> 00:11:05,500
like profiling your app and things like that. Memory usage, those kind of things,

209
00:11:05,500 --> 00:11:08,610
but you're really, all was inside XCode 5,

210
00:11:08,610 --> 00:11:10,500
which is really nice because, you know,

211
00:11:10,500 --> 00:11:13,390
when you're debugging, you're usually editing your code at the same time,

212
00:11:13,390 --> 00:11:14,500
back and forth, back and forth,

213
00:11:14,500 --> 00:11:17,260
you're going to different apps and all that would be a pain in the neck,

214
00:11:17,260 --> 00:11:20,630
and they've really done a good job of arranging the screen space

215
00:11:20,630 --> 00:11:23,840
so that it's sharing between all these different tasks that you need to do.

216
00:11:23,850 --> 00:11:25,980
So that's the primary tool, XCode 5,

217
00:11:25,980 --> 00:11:30,500
you should all, right after this class if you want, go to the Mac App store,

218
00:11:30,500 --> 00:11:34,040
not the store on you iOS device, the Mac App Store on your Mac,

219
00:11:34,040 --> 00:11:38,150
and download this. It's free, available, came out last Friday,

220
00:11:38,150 --> 00:11:42,020
and you can download it, install it, and, you know, start playing around with it.

221
00:11:42,040 --> 00:11:45,170
Some of you might have already used XCode, like in CS106,

222
00:11:45,190 --> 00:11:47,500
raise your hand if you've used XCode before for anything.

223
00:11:47,500 --> 00:11:50,500
Okay, so two-thirds or more, three-quarters of you.

224
00:11:50,500 --> 00:11:53,500
So, you're going to be used it. You're just going to start using XCode now

225
00:11:53,500 --> 00:11:55,500
to develop for iOS, alright?

226
00:11:55,500 --> 00:11:58,500
There's a new language for you to learn, objective C,

227
00:11:58,500 --> 00:12:00,500
it's kind of a funny-looking language, okay,

228
00:12:00,500 --> 00:12:04,500
it's got square brackets and colons, no parentheses on message calls,

229
00:12:04,500 --> 00:12:08,960
which is kind of weird for people who are coming from Java or C++ or whatever.

230
00:12:08,960 --> 00:12:11,500
The arguments are not put in parentheses or whatever,

231
00:12:11,500 --> 00:12:13,500
and I'm going to show you all about objective C,

232
00:12:13,500 --> 00:12:16,080
I don't expect you to know anything about it coming in,

233
00:12:16,090 --> 00:12:19,960
and if you know Java and C++, which you should if you've taken CS106A&B,

234
00:12:19,960 --> 00:12:23,390
then objective C is not going to be a big leap for you.

235
00:12:23,390 --> 00:12:24,720
It's a little bit different language,

236
00:12:24,720 --> 00:12:27,500
it's a little more fast and loose than Java, for example,

237
00:12:27,500 --> 00:12:30,890
and it's a little more, kind of simple and elegant, than C++,

238
00:12:30,910 --> 00:12:32,630
when it comes to the object-oriented stuff. So,

239
00:12:32,630 --> 00:12:34,720
I think you'll like it.

240
00:12:34,740 --> 00:12:39,090
Some of you who are very, you know, correct programming kind of thing,

241
00:12:39,090 --> 00:12:42,280
you love Java, might find objective C a little wild west for you,

242
00:12:42,280 --> 00:12:44,500
but you'll get over it.

243
00:12:44,500 --> 00:12:45,740
Frameworks,

244
00:12:45,740 --> 00:12:50,500
obviously, any big system like this groups all of its objects into libraries, essentially.

245
00:12:50,500 --> 00:12:53,170
We call them Frameworks in iOS,

246
00:12:53,190 --> 00:12:56,500
so there are dozens of frameworks in iOS.

247
00:12:56,500 --> 00:12:59,240
The two main ones we're going to look at, at the beginning of the course, are

248
00:12:59,240 --> 00:13:02,440
foundation, that's where all that core services stuff is,

249
00:13:02,450 --> 00:13:04,500
like arrays and dictionaries and all that.

250
00:13:04,500 --> 00:13:05,740
And then UI kit, okay,

251
00:13:05,740 --> 00:13:08,060
that's where buttons and sliders and all those things are,

252
00:13:08,060 --> 00:13:10,500
so those are the two main ones, but, there's a whole bunch of other ones, like,

253
00:13:10,500 --> 00:13:12,500
you see the Core Data written up there,

254
00:13:12,500 --> 00:13:14,500
that's the object-oriented database.

255
00:13:14,500 --> 00:13:16,500
Okay? So we're going to be doing that.

256
00:13:16,500 --> 00:13:19,500
Core Motion, that's the gyro and accelerometer.

257
00:13:19,500 --> 00:13:21,500
Map Kit, obviously the maps.

258
00:13:21,500 --> 00:13:23,500
And there's dozens more.

259
00:13:23,500 --> 00:13:25,500
And we'll cover as many of them as we can,

260
00:13:25,500 --> 00:13:28,500
obviously we can't do it all in 10 weeks, but we'll do as much as we can.

261
00:13:28,500 --> 00:13:31,930
And then the last part of developing application in this platform

262
00:13:31,930 --> 00:13:34,500
is a design strategy called MVC.

263
00:13:35,110 --> 00:13:38,890
Now, this is not unique to iOS, other platforms use MVC,

264
00:13:38,910 --> 00:13:40,370
Model View Controller,

265
00:13:40,370 --> 00:13:42,500
as their fundamental design strategy.

266
00:13:42,500 --> 00:13:46,500
So how many people in this room have used MVC on any platform?

267
00:13:46,500 --> 00:13:48,850
Okay, so about half, so you'll know what this is.

268
00:13:48,870 --> 00:13:52,070
So, I'm actually going to go over MVC for those of you who haven't

269
00:13:52,070 --> 00:13:53,500
and I'll go through it pretty quickly, because

270
00:13:53,500 --> 00:13:56,720
it looks like most of you, half of you have done it,

271
00:13:56,720 --> 00:14:01,500
and the main thing to see in MVC here, for those of you who already know what it is,

272
00:14:01,500 --> 00:14:03,960
is to see how I talk about it

273
00:14:03,960 --> 00:14:06,500
so that when we get into iOS

274
00:14:06,500 --> 00:14:10,110
and I start saying things like your model is UI independent,

275
00:14:10,110 --> 00:14:13,500
you'll know what I'm talking about and we'll all be on the same page.

276
00:14:13,500 --> 00:14:18,500
So this is mostly kind of getting us all on the same page terminology-wise.

277
00:14:18,500 --> 00:14:21,590
So MVC, Model View Controller,

278
00:14:21,590 --> 00:14:28,500
is essentially a strategy for how to organize all the classes in your application.

279
00:14:28,500 --> 00:14:34,500
And what we do fundamentally is we divide all the classes into one of three camps.

280
00:14:34,500 --> 00:14:38,500
The model camp, the controller camp, or the view camp,

281
00:14:38,500 --> 00:14:41,500
and what, how you decide what goes in each of these camps,

282
00:14:41,500 --> 00:14:46,500
well, the model is essentially the what of your program. What is your program?

283
00:14:46,500 --> 00:14:50,310
So, as we're doing this MVC talk, I'm going to talk about our first application

284
00:14:50,310 --> 00:14:52,500
we're going to build which is a card matching game.

285
00:14:52,500 --> 00:14:54,160
Okay? So we're going to build this game,

286
00:14:54,170 --> 00:14:56,500
it's gotta bunch of cards on the screen, like playing cards, you know,

287
00:14:56,500 --> 00:14:58,780
Ace of Clubs and all that,

288
00:14:58,780 --> 00:15:01,500
and you're going to be able to go choose the cards

289
00:15:01,500 --> 00:15:03,500
and you'll get certain points if the match.

290
00:15:03,500 --> 00:15:05,910
Like the suit matches or the rank matches, or whatever,

291
00:15:05,910 --> 00:15:08,870
you get more points, less points whatever, but you're doing that.

292
00:15:08,870 --> 00:15:11,280
In that kind of application, a little card matching game,

293
00:15:11,280 --> 00:15:16,390
the cards and the deck, and even the logic for how the game is played

294
00:15:16,390 --> 00:15:20,500
are all UI independent and in the model.

295
00:15:21,500 --> 00:15:25,500
So how the cards get drawn on screen is the job of the controller.

296
00:15:25,500 --> 00:15:28,500
So the controller is, its job is to figure out how am I going,

297
00:15:28,500 --> 00:15:31,500
you know, take this set of cards and display them on screen,

298
00:15:31,500 --> 00:15:35,500
and then animate their movement and things like that.

299
00:15:35,500 --> 00:15:36,780
Okay? That's up to the controller.

300
00:15:36,790 --> 00:15:41,500
So the controller controls how the model is presented on screen,

301
00:15:41,500 --> 00:15:44,050
and the view is the minions,

302
00:15:44,050 --> 00:15:46,310
the classes that the controller is going to use,

303
00:15:46,310 --> 00:15:48,500
kind of like the building blocks, the Lincoln Logs,

304
00:15:48,500 --> 00:15:51,500
I don't know maybe that's before all your time, but, you know,

305
00:15:51,500 --> 00:15:56,070
the things we're going to do build our UI we're going to use in the view,

306
00:15:56,070 --> 00:15:59,500
so, the stuff that's in the view is pretty generic.

307
00:15:59,500 --> 00:16:01,220
Generic UI elements,

308
00:16:01,220 --> 00:16:04,500
the stuff in the controller is very specific to how your UI works,

309
00:16:04,500 --> 00:16:08,500
and the stuff in the model is completely independent of how your UI works.

310
00:16:10,290 --> 00:16:15,500
So, doing MVC right is about knowing where things go,

311
00:16:15,500 --> 00:16:19,030
but also about how to communicate between these three camps

312
00:16:19,040 --> 00:16:22,480
and so I'm going to try and summarize how the communication works between these camps

313
00:16:22,480 --> 00:16:25,610
and I've used road markings, you see the double yellow line

314
00:16:25,610 --> 00:16:29,260
and then the dashed white line, so that's like you're driving in your car,

315
00:16:29,260 --> 00:16:34,200
try to use them as that I have an image for how this communication happens,

316
00:16:34,200 --> 00:16:36,550
where it's allowed, where it's not allowed. Okay?

317
00:16:36,550 --> 00:16:39,960
So let's talk about the controller talking to the model.

318
00:16:39,980 --> 00:16:44,500
Okay? Going from that side of the road over to the model side is a dashed white line,

319
00:16:44,500 --> 00:16:46,500
in other words, you can head right across there,

320
00:16:46,500 --> 00:16:49,500
you probably want to look before you go, but you can go right across.

321
00:16:49,500 --> 00:16:52,770
The controller has to know everything about the model

322
00:16:52,780 --> 00:16:56,500
and it has to have complete ability to talk to the model,

323
00:16:56,500 --> 00:16:58,960
use its public API as much as it wants,

324
00:16:58,980 --> 00:17:00,740
because the controller's job is to

325
00:17:00,740 --> 00:17:05,110
present the model to the user using its view as its minions,

326
00:17:05,110 --> 00:17:06,500
so it has to have this access.

327
00:17:06,500 --> 00:17:10,790
So that's full, unrestricted access the controller has talking to the model.

328
00:17:10,810 --> 00:17:15,500
This is a one-way arrow, from the controller to the model.

329
00:17:15,500 --> 00:17:20,500
And similarly from the controller to the view, is also unlimited communication

330
00:17:20,500 --> 00:17:24,370
because the controller is responsible for talking, using, it's own minions,

331
00:17:24,370 --> 00:17:29,090
the view is the controllers' minions to lay out the user interface and all that stuff,

332
00:17:29,110 --> 00:17:31,250
so the controller can do anything it wants,

333
00:17:31,260 --> 00:17:33,500
I've put that little green word outlet up there

334
00:17:33,500 --> 00:17:37,940
because when we have a property of a controller that points into the view,

335
00:17:37,940 --> 00:17:39,500
we call it an outlet.

336
00:17:39,500 --> 00:17:41,740
Okay? And you're going to see that in the demo on Wednesday,

337
00:17:41,760 --> 00:17:45,240
I'm going to say oh, let's create an outlet from our controller to our view

338
00:17:45,240 --> 00:17:47,500
so our controller can talk to its view.

339
00:17:48,640 --> 00:17:50,960
What about this communication? Model to view,

340
00:17:50,960 --> 00:17:53,070
never, and why is that?

341
00:17:53,090 --> 00:17:56,920
100 percent obvious. The model is completely UI independent.

342
00:17:56,940 --> 00:18:01,500
So there's absolutely no way it could talk to a view or object or anyone in that camp.

343
00:18:01,500 --> 00:18:04,830
Because the view objects are fundamentally UI objects, they're kind of generic,

344
00:18:04,830 --> 00:18:06,980
but they're still fundamentally UI objects.

345
00:18:07,000 --> 00:18:09,500
Similarly, since the view objects are kind of generic,

346
00:18:09,500 --> 00:18:11,500
they can't be talking to any specific model.

347
00:18:11,500 --> 00:18:15,500
They need a controller to interpret a model for them.

348
00:18:15,500 --> 00:18:19,500
Okay? So there's never any communication this way, that's why it's a double yellow line,

349
00:18:19,500 --> 00:18:23,500
that's why these lines are red, that's why there's fire.

350
00:18:23,500 --> 00:18:26,500
Never go across that line, ever.

351
00:18:27,660 --> 00:18:29,980
What about the view talking back to the controller?

352
00:18:29,980 --> 00:18:32,270
You got these generic view objects, like buttons,

353
00:18:32,270 --> 00:18:34,030
can they talk to the controller?

354
00:18:34,070 --> 00:18:38,830
Well...yes, they can, but they have to be careful

355
00:18:38,830 --> 00:18:41,110
because the view objects are generic,

356
00:18:41,110 --> 00:18:44,500
so they can't really know much about the controller, so,

357
00:18:44,500 --> 00:18:47,610
they can only communicate back to the controller in a blind way,

358
00:18:47,610 --> 00:18:50,680
where they don't know the class of the thing they're talking to,

359
00:18:50,680 --> 00:18:52,500
and, in a structured way,

360
00:18:52,500 --> 00:18:56,070
a way where we all agree, we're going to communicate this way,

361
00:18:56,070 --> 00:18:59,160
between the view and the controller, so what's an example of a structured way?

362
00:18:59,160 --> 00:19:01,140
Well one is called target action.

363
00:19:01,180 --> 00:19:04,140
So the controller basically drops a target on itself

364
00:19:04,140 --> 00:19:08,500
and then it hands out an action, which is like an arrow,

365
00:19:08,500 --> 00:19:11,350
to the view and says to the view, okay,

366
00:19:11,350 --> 00:19:14,480
when you do what you do, like you're a button and someone touches you

367
00:19:14,480 --> 00:19:18,500
or you're a slider and someone moves you, send me that action.

368
00:19:18,500 --> 00:19:22,500
Okay? So in this way, the generic button, or slider,

369
00:19:22,500 --> 00:19:26,100
is communicating back to the controller, it has no idea that it's a card game controller

370
00:19:26,110 --> 00:19:29,500
or a space game controller, it doesn't know what kind of controller it is,

371
00:19:29,500 --> 00:19:32,160
All it knows is that when something happens in itself,

372
00:19:32,180 --> 00:19:33,500
boom, it sends messages to targets.

373
00:19:33,500 --> 00:19:37,500
So that's a blind, simple, structured way for the view

374
00:19:37,500 --> 00:19:40,180
to communicate with the controller.

375
00:19:40,180 --> 00:19:42,500
But what about more complicated ways?

376
00:19:42,500 --> 00:19:47,420
Sometimes the view, things are happening in the view that are somewhat complicated

377
00:19:47,420 --> 00:19:50,100
and the controller needs to be informed of what's going on,

378
00:19:50,110 --> 00:19:52,230
synchronizing what's happening.

379
00:19:52,240 --> 00:19:57,660
And one way to think about this is these words I put here, will, should, and did,

380
00:19:57,660 --> 00:20:01,680
when the view is kind of like -- let's say on the scroll view

381
00:20:01,680 --> 00:20:05,500
and I'm scrolling around, and I want to let the controller,

382
00:20:05,500 --> 00:20:09,500
somebody, know that the user just did scroll. Okay?

383
00:20:09,500 --> 00:20:12,730
Or the user puts down the touch and is about to scroll,

384
00:20:12,740 --> 00:20:16,500
I want to let the controller know the user will be scrolling.

385
00:20:16,500 --> 00:20:19,500
Okay? Or the user puts a touch down and the scroll view wants to know,

386
00:20:19,500 --> 00:20:23,500
should I allow the user to scroll here, is that allowed?

387
00:20:23,500 --> 00:20:25,420
All those things,

388
00:20:25,420 --> 00:20:29,500
the scroll view itself might not have enough logic to know the answer to those questions,

389
00:20:29,500 --> 00:20:36,210
so what it does is it delegates the authority to answer those questions to some other object.

390
00:20:36,220 --> 00:20:38,200
Now it doesn't know the class of that object,

391
00:20:38,200 --> 00:20:40,730
all it knows is that other object can answer these questions,

392
00:20:40,730 --> 00:20:43,210
will, should, did, this, that or the other thing,

393
00:20:43,220 --> 00:20:48,140
like, should allow scrolling, did scroll to point, things like that.

394
00:20:48,140 --> 00:20:52,250
So those are the kind of methods you're going to see in these delegate protocols.

395
00:20:52,250 --> 00:20:55,900
Now I know that CS106A&B do not teach protocols,

396
00:20:55,900 --> 00:20:59,500
how many people know what the word protocol means in object-oriented programming?

397
00:20:59,500 --> 00:21:02,500
See, very few of you, so I will be teaching that.

398
00:21:02,500 --> 00:21:05,500
A protocol is just a blind way to talk to another object.

399
00:21:05,500 --> 00:21:08,500
You're going, when I teach you, you're going to be like, oh yeah, I know what that is,

400
00:21:08,500 --> 00:21:10,500
we didn't really call it protocol, or whatever.

401
00:21:10,500 --> 00:21:15,500
But, that's how we do delegation, this blind communication.

402
00:21:15,500 --> 00:21:18,500
Also, another important thing is

403
00:21:18,500 --> 00:21:22,900
that views should not own the data that they're displaying. They should not own it.

404
00:21:22,900 --> 00:21:25,940
In other words, it shouldn't be a property inside of them

405
00:21:25,940 --> 00:21:28,250
where that's the truth of that data.

406
00:21:28,250 --> 00:21:30,700
And the easiest example for this is

407
00:21:30,700 --> 00:21:34,290
all the songs in your iPod, on your iPhone or your iPad, right?

408
00:21:34,290 --> 00:21:37,050
You might have 10,000 songs in there.

409
00:21:37,050 --> 00:21:40,500
So if you have some kind of generic list view in your view,

410
00:21:40,500 --> 00:21:44,990
you can't transfer all 10,000 songs to its instance variables

411
00:21:44,990 --> 00:21:48,500
and expect it to hold 10,000 songs so it can list through it.

412
00:21:48,500 --> 00:21:50,400
A, that would be inefficient,

413
00:21:50,400 --> 00:21:54,290
and B, that information, those 10,000 songs belongs where?

414
00:21:54,700 --> 00:21:55,880
In the model.

415
00:21:55,900 --> 00:21:58,500
Because your song database is a model.

416
00:21:58,500 --> 00:22:02,140
It has nothing to do with UI's, just a list of songs and artists and albums and all that,

417
00:22:02,140 --> 00:22:03,310
it's in the model.

418
00:22:03,310 --> 00:22:05,500
Some controller has to look at that database

419
00:22:05,500 --> 00:22:09,770
and tell a view how to display all those songs.

420
00:22:09,770 --> 00:22:13,050
So, we need that communication to happen here

421
00:22:13,070 --> 00:22:15,500
and the view is displaying some sort of list,

422
00:22:15,500 --> 00:22:18,500
and you're touching down and you're flicking on the list

423
00:22:18,500 --> 00:22:20,160
and trying to see more songs,

424
00:22:20,160 --> 00:22:23,050
how does that communication happen, and the answer is,

425
00:22:23,070 --> 00:22:25,500
we have another special kind of delegate,

426
00:22:25,500 --> 00:22:27,500
which we call a data source.

427
00:22:27,500 --> 00:22:30,500
Now the data source doesn't do the will, did, should,

428
00:22:30,500 --> 00:22:32,500
it's going to be asking questions like count,

429
00:22:32,500 --> 00:22:34,500
like how many songs are there?

430
00:22:34,500 --> 00:22:37,500
And the controller looks in the model, 10,000.

431
00:22:37,500 --> 00:22:39,500
Response to the view, there's 10,000.

432
00:22:39,500 --> 00:22:42,860
The view makes space, internally, for 10,000 things,

433
00:22:42,860 --> 00:22:43,950
it doesn't know what they are,

434
00:22:43,970 --> 00:22:46,500
moves the scroll bar indicator a little bit,

435
00:22:46,500 --> 00:22:48,010
so that you know where it is,

436
00:22:48,010 --> 00:22:50,290
and then you start scrolling, flipping through it,

437
00:22:50,290 --> 00:22:52,080
and its start sending the message to the controller,

438
00:22:52,080 --> 00:22:57,510
give me the data at line 150, next 10 items.

439
00:22:57,530 --> 00:22:59,560
See what I mean? And then you flick down some more, now it's saying

440
00:22:59,570 --> 00:23:02,010
250, 10 more items,

441
00:23:02,010 --> 00:23:05,340
and so the controller is going back to the model and saying give me more, give me more data,

442
00:23:05,340 --> 00:23:07,880
and it's providing it to the view in this blind way.

443
00:23:07,900 --> 00:23:12,030
So see how the view is getting data from the model through the controller,

444
00:23:12,030 --> 00:23:14,470
in this kind of blind structured way.

445
00:23:14,490 --> 00:23:16,920
Okay? That makes sense to everybody?

446
00:23:16,940 --> 00:23:18,970
So data source is just a kind of delegate,

447
00:23:18,970 --> 00:23:20,880
it's a specific kind of delegate for getting data.

448
00:23:20,880 --> 00:23:24,950
So you're going to see that there are classes in iOS that have a data source,

449
00:23:24,950 --> 00:23:27,160
and they usually also have a delegate.

450
00:23:27,180 --> 00:23:29,680
Most sophisticated classes in iOS have a delegate,

451
00:23:29,680 --> 00:23:31,500
the will, did, should kind of things.

452
00:23:31,500 --> 00:23:33,800
Some of them have a data source,

453
00:23:33,810 --> 00:23:36,730
it depends on whether they're showing a lot of data or not.

454
00:23:36,750 --> 00:23:38,770
Now simple data, like if I had a view,

455
00:23:38,770 --> 00:23:42,500
if I invented a view for my card game called playing card view,

456
00:23:42,500 --> 00:23:44,790
and it just has a suit and a rank,

457
00:23:44,790 --> 00:23:47,860
okay, we're not going to do count data at for just suit and rank,

458
00:23:47,860 --> 00:23:49,500
we are going to set those properties.

459
00:23:49,500 --> 00:23:52,790
And so the view then would have those, that data set in it,

460
00:23:52,790 --> 00:23:55,060
but it wouldn't be owning it, right?

461
00:23:55,080 --> 00:23:57,500
The model would still be owning the suit and rank,

462
00:23:57,500 --> 00:24:00,500
the view is just getting that data to present it.

463
00:24:00,500 --> 00:24:06,500
So simple data we might transfer to the view, but it's merely for it to display it.

464
00:24:06,500 --> 00:24:12,170
Okay. This all adds up to the controller's job being to interpret

465
00:24:12,180 --> 00:24:16,140
and format the model data for the view.

466
00:24:16,140 --> 00:24:17,500
That's the controller's job.

467
00:24:17,500 --> 00:24:20,500
And when we do our demo, I'm going to be marking

468
00:24:20,500 --> 00:24:22,500
like, oh, see, I'm writing this code,

469
00:24:22,500 --> 00:24:25,120
this makes the controller perform its job,

470
00:24:25,120 --> 00:24:28,990
which is to take the model data and put it in, and using it to view minions,

471
00:24:28,990 --> 00:24:30,500
put it on screen.

472
00:24:30,500 --> 00:24:32,250
That's what the controller does.

473
00:24:32,250 --> 00:24:36,500
What about this communication? Can the model talk to the controller?

474
00:24:36,500 --> 00:24:41,160
Again, obviously that's verboten because model knows nothing about UI,

475
00:24:41,170 --> 00:24:44,230
so it couldn't possibly talk to a UI object like the controller.

476
00:24:44,230 --> 00:24:46,500
But sometimes things change in the model

477
00:24:46,500 --> 00:24:48,080
and the controller needs to know about it.

478
00:24:48,100 --> 00:24:52,500
Okay, data changes, a database changes or the model is some network database

479
00:24:52,500 --> 00:24:54,770
and somebody changes something on the network and it changes,

480
00:24:54,790 --> 00:24:56,500
and the controller needs to find out. So,

481
00:24:56,500 --> 00:24:59,500
how do we do that communication?

482
00:24:59,500 --> 00:25:03,500
We do that using kind of a radio station model.

483
00:25:03,500 --> 00:25:06,500
So the model, a radio station concept,

484
00:25:06,500 --> 00:25:12,500
the model will use this concept to essentially broadcast information

485
00:25:12,500 --> 00:25:14,500
to anyone who's interested.

486
00:25:14,500 --> 00:25:18,770
And the mechanisms for doing this in iOS are called notification

487
00:25:18,770 --> 00:25:21,860
and key value observing, KVO we call it,

488
00:25:21,860 --> 00:25:24,500
and so the model can just say, oh,

489
00:25:24,500 --> 00:25:28,500
anytime something changes in my model, I'm just going to broadcast on my radio station

490
00:25:28,500 --> 00:25:32,500
and then the controller simply tunes into that radio station.

491
00:25:32,500 --> 00:25:35,500
And it can find out things are changing. And when it finds out something changes,

492
00:25:35,500 --> 00:25:39,500
it's going to communicate via its green arrow to the model,

493
00:25:39,500 --> 00:25:42,500
and say, okay, give me that data that changed.

494
00:25:42,500 --> 00:25:44,300
Alright? Does that make sense?

495
00:25:44,300 --> 00:25:45,500
So towards the end of the quarter,

496
00:25:45,500 --> 00:25:48,710
we'll start seeing a little how to do notification to find out, for example,

497
00:25:48,710 --> 00:25:50,840
if the data in the database changes.

498
00:25:50,860 --> 00:25:53,500
We'll get a notification, the UI can then, you know,

499
00:25:53,500 --> 00:25:58,500
the controller can then go talk to the model to get the info.

500
00:25:58,500 --> 00:26:01,500
Some people have asked, can a view tune into the radio station?

501
00:26:01,500 --> 00:26:04,500
They probably could, but you probably wouldn't want to do that.

502
00:26:04,500 --> 00:26:07,500
That would probably be a violation of MVC.

503
00:26:07,500 --> 00:26:13,560
Alright, so, we do this, we have all this nice communication and all these rules,

504
00:26:13,560 --> 00:26:17,380
and we can imagine building something simple using this,

505
00:26:17,380 --> 00:26:19,860
but what if we want to build a big, complicated app?

506
00:26:19,880 --> 00:26:23,230
An app that has multiple screens on our iPhone or on an iPad

507
00:26:23,230 --> 00:26:26,500
it's got, you know, three or four different areas on screen

508
00:26:26,500 --> 00:26:28,970
where things are happening, how do we do that?

509
00:26:28,990 --> 00:26:33,500
Well, we're essentially going to combine multiple MVC's.

510
00:26:33,500 --> 00:26:40,500
Because you, an MVC can use, as part of its view, another MVC.

511
00:26:40,500 --> 00:26:44,500
Okay? So, an MVC, an entire MVC,

512
00:26:44,500 --> 00:26:49,600
can be one of the minions of some bigger MVC.

513
00:26:49,620 --> 00:26:53,150
Okay? And by doing that and cascading it down,

514
00:26:53,150 --> 00:26:55,890
we can build more and more complicated applications. So,

515
00:26:55,910 --> 00:27:01,150
an example of this is you might have your calendar app,

516
00:27:01,150 --> 00:27:03,540
and it's showing you the entire year,

517
00:27:03,540 --> 00:27:06,190
and you click on a month, and now it shows you a month view.

518
00:27:06,190 --> 00:27:08,500
Well a month view looks a lot different than a year view.

519
00:27:08,500 --> 00:27:11,500
Month view just has all the days and maybe some circle

520
00:27:11,500 --> 00:27:13,230
that tells you where you have an appointment on a day,

521
00:27:13,250 --> 00:27:16,500
and then when you click on a day, and now you get a day view.

522
00:27:16,500 --> 00:27:20,000
And the day is showing you the hours and what all your appointments are,

523
00:27:20,010 --> 00:27:22,500
and you click on an appointment, and now you get an appointment view

524
00:27:22,500 --> 00:27:25,500
and it's showing the detail of where you're going and when it is etc.

525
00:27:25,500 --> 00:27:29,020
Well each of those views, the year view, the month view,

526
00:27:29,020 --> 00:27:33,500
the day view, and the appointment view are their own MVC's.

527
00:27:33,500 --> 00:27:38,320
Okay? But you can see how the last three, okay, are used as,

528
00:27:38,320 --> 00:27:44,500
essentially, a minion of the top-level view, the year view, to show more detail.

529
00:27:44,500 --> 00:27:46,500
So the year view, you click on a month,

530
00:27:46,500 --> 00:27:51,020
it's going to use the month view MVC to show more detail,

531
00:27:51,040 --> 00:27:53,500
so it's part of its view.

532
00:27:53,500 --> 00:27:57,500
So, you see this also in iOS with tab bar controllers.

533
00:27:57,500 --> 00:28:01,520
You have the tab bar, along the bottom, I have four or five things you can choose,

534
00:28:01,520 --> 00:28:03,500
well there's some MVC at the top

535
00:28:03,500 --> 00:28:06,500
who has four pointers to four minions,

536
00:28:06,500 --> 00:28:11,060
which are the four MVC's that are each going to appear in a tab bar.

537
00:28:11,060 --> 00:28:14,190
We'll be doing that, for example, in assignment number two or three,

538
00:28:14,190 --> 00:28:18,500
where we'll be making a tab bar and you're going to have to do multiple MVC's.

539
00:28:18,500 --> 00:28:23,500
So, that basically results in a picture that looks kind of like this.

540
00:28:23,500 --> 00:28:26,500
Alright? Where you got this MVC and you see the purple one that's

541
00:28:26,500 --> 00:28:29,240
like underneath the word together there,

542
00:28:29,250 --> 00:28:34,500
and it points to three other MVC's outside of its view thing.

543
00:28:34,500 --> 00:28:37,500
That's how we're going to build this, that might be a tab bar controller

544
00:28:37,500 --> 00:28:39,500
and those might be the three tabs.

545
00:28:39,500 --> 00:28:43,820
And each one is its own little MVC, completely independent, operates on its own,

546
00:28:43,840 --> 00:28:48,130
doesn't even know it's a generic, reusable view like thing at this point,

547
00:28:48,130 --> 00:28:50,500
it doesn't even know that it's in a tab bar.

548
00:28:50,500 --> 00:28:53,100
It just knows that it's supposed to do whatever it does.

549
00:28:53,100 --> 00:28:54,820
And so it's modular in that way.

550
00:28:54,820 --> 00:28:58,500
You can also see that there's no communication between any other,

551
00:28:58,500 --> 00:29:01,120
there's no other arrows, except for some of the models.

552
00:29:01,130 --> 00:29:03,500
You see some of the models are communicating with each other,

553
00:29:03,500 --> 00:29:07,110
you know, a big application might have single, shared model.

554
00:29:07,120 --> 00:29:13,690
Or, you know, the models might be split off into pieces to be used by sub MVC's.

555
00:29:13,710 --> 00:29:16,150
But that's the only kind of communication you're going to have there,

556
00:29:16,150 --> 00:29:20,170
all other communication is either the structured communication we saw in the MVC

557
00:29:20,170 --> 00:29:24,500
or it's using MVC's as part of the view of another MVC.

558
00:29:24,500 --> 00:29:27,500
Any question about that?

559
00:29:27,500 --> 00:29:31,840
So we definitely don't want to be having designs that look like this.

560
00:29:31,840 --> 00:29:35,040
Where everybody's talking to everybody, we can't tell who's talking to what,

561
00:29:35,040 --> 00:29:38,500
it's just impossible to debug a program like this and it doesn't scale.

562
00:29:38,500 --> 00:29:40,500
You can't build really big programs this way,

563
00:29:40,500 --> 00:29:44,500
it just becomes impossible to know how touching anything would break everything, right?

564
00:29:44,500 --> 00:29:48,500
So we're definitely not going to be doing that.

565
00:29:50,210 --> 00:29:53,500
Okay, so that's MVC. No questions about that?

566
00:29:53,500 --> 00:29:55,730
Alright. Onto objective-C.

567
00:29:55,740 --> 00:29:59,320
So, objective C is a strict superset of C,

568
00:29:59,320 --> 00:30:02,500
so everything you can do in C, you can do in objective-C.

569
00:30:02,500 --> 00:30:05,500
And we'll do a lot of C things in this class.

570
00:30:05,500 --> 00:30:10,500
We'll do a lot of object-oriented stuff too, but we're going to do a lot of C things, as well.

571
00:30:10,500 --> 00:30:14,500
But, there's obviously a few things that you want to think differently

572
00:30:14,500 --> 00:30:17,980
about because you have object-oriented stuff added onto a language,

573
00:30:17,980 --> 00:30:20,130
and we're going to talk about one of them today,

574
00:30:20,150 --> 00:30:24,500
in addition to showing you a little bit of the syntax,

575
00:30:24,500 --> 00:30:26,390
we're going to talk about one of these different,

576
00:30:26,390 --> 00:30:29,320
think differently things about objective-C that's different

577
00:30:29,320 --> 00:30:33,110
than C++ or Java, which is properties.

578
00:30:33,110 --> 00:30:36,260
And I'm not going to read through all of this, I'm just going to show it to you,

579
00:30:36,260 --> 00:30:40,500
but properties are basically how we access our instance variables.

580
00:30:40,500 --> 00:30:45,300
Everybody knows what I mean by, raise your hand if you know what I mean by instance variable?

581
00:30:45,300 --> 00:30:47,170
Okay good. So pretty much everybody.

582
00:30:47,170 --> 00:30:52,500
So, we want to access the instance data of our objects.

583
00:30:52,500 --> 00:30:56,500
And, normally, in Java or in C++, you just,

584
00:30:56,500 --> 00:31:00,500
have some syntax to access them and you just access them.

585
00:31:00,500 --> 00:31:02,500
In objective-C we don't do that.

586
00:31:02,500 --> 00:31:05,220
In objective-C, we have what's called a property,

587
00:31:05,240 --> 00:31:09,500
and a property is basically a setter method and a getter method.

588
00:31:09,500 --> 00:31:12,500
And that's how all access to the instance variable goes,

589
00:31:12,500 --> 00:31:15,500
through a setter method to set the value and a getter method to get it.

590
00:31:15,500 --> 00:31:21,150
And some people who maybe are kind of performance junkies might say, oh my gosh,

591
00:31:21,150 --> 00:31:24,240
every instance variable I have to call a method to set it or get it?

592
00:31:24,240 --> 00:31:27,500
But, remember, you're building for a user interface system here,

593
00:31:27,500 --> 00:31:34,500
when the user touches down, that's taking million, a million code, you know,

594
00:31:34,500 --> 00:31:38,500
you're executing a million instructions there in that amount of time.

595
00:31:38,500 --> 00:31:41,950
So, having a few extra setters and getters is completely irrelevant.

596
00:31:41,960 --> 00:31:44,500
So it's the old [inaudible] thing, right?

597
00:31:44,500 --> 00:31:47,500
You don't want to optimize things that don't need to be optimized.

598
00:31:47,500 --> 00:31:50,040
You want to optimize the things that are taking a lot of time

599
00:31:50,040 --> 00:31:53,110
and accessing instance variable turns out not to be taking a lot of your time,

600
00:31:53,110 --> 00:31:56,130
so, let's look at what it looks like,

601
00:31:56,130 --> 00:31:59,300
don't get freaked out here by seeing this syntax.

602
00:31:59,300 --> 00:32:02,500
It's all new, so, it's going to take some getting used to.

603
00:32:02,500 --> 00:32:05,670
In objective-C, every class we have

604
00:32:05,670 --> 00:32:10,500
and the class I'm going to show you today is a, is in our, essentially our model

605
00:32:10,500 --> 00:32:13,500
that we're going to build for our card game matching app.

606
00:32:13,500 --> 00:32:16,500
We're going to have a card and a deck,

607
00:32:16,500 --> 00:32:19,130
and we're also going to have a subclass of card called playing card

608
00:32:19,130 --> 00:32:21,040
and a subclass of deck called playing card deck.

609
00:32:21,040 --> 00:32:23,910
Those are the four classes that are going to be in our model, to start.

610
00:32:23,930 --> 00:32:28,610
And, so, I'm going to show you, in today's lecture I'm just going to show you card, only card,

611
00:32:28,630 --> 00:32:30,350
and then on Wednesday I'll show you deck

612
00:32:30,350 --> 00:32:33,500
and playing card deck and playing card.

613
00:32:33,500 --> 00:32:37,870
So, every class in objective-C, you have a header file, card.h,

614
00:32:37,890 --> 00:32:40,500
and you have an implementation file, card.m.

615
00:32:40,500 --> 00:32:45,090
This is just like in C++ you might have dot h and dot c, or whatever,

616
00:32:45,090 --> 00:32:49,500
this is dot m, m I guess is for implementation, I don't know.

617
00:32:49,500 --> 00:32:53,280
But it's m, and so you have these separate things,

618
00:32:53,280 --> 00:32:58,040
the difference here is card.h is the public API.

619
00:32:58,040 --> 00:33:03,020
That's what your dot h is. It's your public API.

620
00:33:03,020 --> 00:33:08,830
Card.m is your private API and all your implementation.

621
00:33:08,830 --> 00:33:11,810
Don't get confused about dot h and dot m.

622
00:33:11,810 --> 00:33:14,960
All dot h is your public API, that's all it is.

623
00:33:14,960 --> 00:33:21,040
It's what methods in your class you want to make public so that other people can call them.

624
00:33:21,040 --> 00:33:23,980
So, let's see what the syntax looks like.

625
00:33:23,980 --> 00:33:28,500
In your public API, you must say who your superclass is.

626
00:33:28,500 --> 00:33:33,500
You are not allowed to make your superclass be a secret.

627
00:33:33,500 --> 00:33:36,500
It has to be public so we have to put it in the header file,

628
00:33:36,500 --> 00:33:39,500
and you can see the syntax we use is @interface,

629
00:33:39,500 --> 00:33:40,920
the name of our class,

630
00:33:40,930 --> 00:33:43,500
which should always match the name of the file, by the way,

631
00:33:43,500 --> 00:33:47,110
card.h should always have the interface for the class card.

632
00:33:47,110 --> 00:33:49,500
And then a colon and then your superclass.

633
00:33:49,500 --> 00:33:52,500
Now the superclass of the card class is NSObject.

634
00:33:52,500 --> 00:33:57,110
NSObject is in the foundation framework

635
00:33:57,110 --> 00:34:01,540
and it's pretty much the root class of every single class in all of iOS,

636
00:34:01,540 --> 00:34:03,500
including all the classes you write.

637
00:34:03,500 --> 00:34:07,110
It's this kind of basic class, we'll talk about it when we talk about foundation,

638
00:34:07,110 --> 00:34:10,500
but it's going to be the superclass eventually of every single class.

639
00:34:10,500 --> 00:34:13,500
Everything, eventually, inherits from NSObject.

640
00:34:13,500 --> 00:34:17,500
Now, on the implementation side, it looks very similar,

641
00:34:17,500 --> 00:34:19,500
but instead of saying at sign interface, you say

642
00:34:19,500 --> 00:34:22,500
@implementation and the name of the class.

643
00:34:22,500 --> 00:34:25,500
And here you don't specify your superclass.

644
00:34:25,500 --> 00:34:28,740
Because you're only allowed to specify that once, and it's public,

645
00:34:28,740 --> 00:34:30,500
so it goes in your header file.

646
00:34:30,500 --> 00:34:34,500
Notice that the bottom of both of these, little at sign end, do you see that?

647
00:34:34,500 --> 00:34:38,500
Okay, that just means that's the end of the interface or of the implantation.

648
00:34:38,500 --> 00:34:43,890
So all of your public API goes inside this at sign interface block, at sign interface,

649
00:34:43,890 --> 00:34:47,500
and all of your implementation, your private implementation goes

650
00:34:47,500 --> 00:34:49,920
in the at sign implementation part.

651
00:34:49,940 --> 00:34:56,020
Now, if you import, if you have specified your superclass here, you have to import it.

652
00:34:56,020 --> 00:34:58,370
Which is like pound sign, include.

653
00:34:58,370 --> 00:35:00,330
It's a little more powerful than pound sign, include,

654
00:35:00,330 --> 00:35:03,110
in fact, it's a lot more powerful, as I'll talk about in a second here.

655
00:35:03,110 --> 00:35:04,500
But you must import it,

656
00:35:04,500 --> 00:35:08,110
otherwise the objective-C compiler won't know what that superclass is,

657
00:35:08,110 --> 00:35:10,240
so you have to, obviously, import your superclass.

658
00:35:10,240 --> 00:35:15,000
However, we don't usually, when our superclass is something that's in iOS,

659
00:35:15,020 --> 00:35:19,500
we don't usually import just that class's header file, which in this case is foundation,

660
00:35:19,500 --> 00:35:23,500
we actually import the entire framework.

661
00:35:23,500 --> 00:35:26,500
Now you might say, oh, that's inefficient.

662
00:35:26,500 --> 00:35:29,150
A huge framework,

663
00:35:29,160 --> 00:35:32,500
but of course this is all precompiled and optimized.

664
00:35:32,500 --> 00:35:39,130
And, in fact, in iOS7, the syntax for this is really to say at sign import foundation.

665
00:35:39,130 --> 00:35:44,500
That means I'm going to use all the public classes in the foundation framework.

666
00:35:44,500 --> 00:35:47,240
iOS7 still supports the old

667
00:35:47,240 --> 00:35:49,440
import foundation slash foundation.h

668
00:35:49,440 --> 00:35:51,500
so you can use that if you want.

669
00:35:51,500 --> 00:35:57,500
Now on our implementation file, we have to import our header file, obviously.

670
00:35:57,500 --> 00:35:59,700
Because our implementation file needs to know

671
00:35:59,700 --> 00:36:03,850
what we're committing to publicly, in terms of our API,

672
00:36:03,850 --> 00:36:07,050
so we have to import that. Makes perfect sense.

673
00:36:07,050 --> 00:36:11,500
We can also have private declarations.

674
00:36:11,500 --> 00:36:16,500
Declarations of properties and methods that are private

675
00:36:16,500 --> 00:36:20,130
inside of our implementation file by putting this little at sign interface,

676
00:36:20,130 --> 00:36:23,500
name of our class, open parentheses, closed parentheses.

677
00:36:23,500 --> 00:36:25,200
And then at sign end.

678
00:36:25,220 --> 00:36:27,870
So we can have a little space here where we can put little private declarations.

679
00:36:27,890 --> 00:36:30,500
Now, objective-C does not require you

680
00:36:30,500 --> 00:36:33,870
to declare something before you use it in a file,

681
00:36:33,890 --> 00:36:35,290
you know what I mean by that?

682
00:36:35,310 --> 00:36:37,500
And there's a lot, a lot of languages,

683
00:36:37,500 --> 00:36:40,500
you have to declare a method before you can call it, right?

684
00:36:40,500 --> 00:36:42,500
But you can do it out of order in objective-C,

685
00:36:42,500 --> 00:36:45,000
you can implement a method here that calls,

686
00:36:45,000 --> 00:36:47,500
you can implement method A, calls method B,

687
00:36:47,500 --> 00:36:50,500
and then method B is implemented down here later in the file.

688
00:36:50,500 --> 00:36:52,500
So you don't have to declare method B first,

689
00:36:52,500 --> 00:36:56,500
then implement method A, and then implement method B.

690
00:36:56,500 --> 00:37:01,500
So, this little private at sign interface we're mostly going to use for properties.

691
00:37:01,500 --> 00:37:03,810
Okay? Because when we declare a property,

692
00:37:03,810 --> 00:37:06,500
as you'll see, that setter and getter get written for us.

693
00:37:06,500 --> 00:37:10,500
So let's see what that looks like to declare a property.

694
00:37:10,500 --> 00:37:13,500
So here's a simple property. It's called contents.

695
00:37:13,500 --> 00:37:17,110
So this is the content of the card. This is what's on the card.

696
00:37:17,110 --> 00:37:19,500
So this might be ace of clubs.

697
00:37:19,500 --> 00:37:23,500
Okay? And because this is your first day,

698
00:37:23,500 --> 00:37:26,500
we're going to make the contents be very simple, just a string.

699
00:37:26,500 --> 00:37:29,500
Okay? So these cards, they can be like a flashcard,

700
00:37:29,500 --> 00:37:31,500
maybe, for learning a foreign language, maybe this is

701
00:37:31,500 --> 00:37:34,500
the contents are the word that you're trying to learn

702
00:37:34,500 --> 00:37:36,500
and maybe it's a flashcard of images

703
00:37:36,500 --> 00:37:40,500
where this content is the name of some image and

704
00:37:40,500 --> 00:37:43,500
it's up to UI to display an image that matches it.

705
00:37:43,500 --> 00:37:45,500
Or in the case of our playing cards,

706
00:37:45,500 --> 00:37:48,140
we're going to have this be like, literally the character A

707
00:37:48,140 --> 00:37:49,500
and then the character clubs,

708
00:37:49,500 --> 00:37:51,980
because there's Unicode character clubs,

709
00:37:51,980 --> 00:37:54,010
so the A clubs, that would be the content.

710
00:37:54,050 --> 00:37:56,500
So this is the content of the card, what's on the card.

711
00:37:56,500 --> 00:38:00,220
And you can see that it's an NSString star.

712
00:38:00,220 --> 00:38:02,380
You see at sign property

713
00:38:02,380 --> 00:38:06,490
is how we're going to declare that we need storage, per instance of card,

714
00:38:06,500 --> 00:38:10,500
in other words every card has its own contents, and

715
00:38:10,500 --> 00:38:13,010
it's going to be a string, and so we say

716
00:38:13,010 --> 00:38:15,200
property NSString star, now,

717
00:38:15,200 --> 00:38:19,500
it's important to understand that in objective-C all objects,

718
00:38:19,500 --> 00:38:23,500
all of them, live in the heap and we have pointers to them.

719
00:38:23,500 --> 00:38:29,500
There's no such thing as making an object on the stack or anything like that.

720
00:38:29,500 --> 00:38:32,500
They're all in the heap. Everyone knows what the heap is? Any questions about that?

721
00:38:32,500 --> 00:38:34,980
That's just where you allocate free memory.

722
00:38:34,990 --> 00:38:36,500
So all objects are there.

723
00:38:36,500 --> 00:38:38,940
What's' really cool about objective-C is,

724
00:38:38,960 --> 00:38:43,070
objective-C will manage all that storage for you.

725
00:38:43,090 --> 00:38:45,980
It will allocate for you and free it for you.

726
00:38:45,990 --> 00:38:49,500
Now how does it know when to free it?

727
00:38:49,500 --> 00:38:51,500
And the answer is this strong thing,

728
00:38:51,500 --> 00:38:54,500
you see the word strong there?

729
00:38:54,500 --> 00:38:57,310
If, your properties can either be strong, like this one,

730
00:38:57,310 --> 00:38:58,730
or weak,

731
00:38:58,740 --> 00:39:00,500
two things, strong or weak.

732
00:39:00,500 --> 00:39:03,050
And all pointer properties have to be strong or weak

733
00:39:03,050 --> 00:39:06,290
because the objective-C has to know what to do with the memory and the heap.

734
00:39:06,310 --> 00:39:09,500
Strong means keep the memory for this,

735
00:39:09,500 --> 00:39:13,180
for the thing this points to, in the heap,

736
00:39:13,200 --> 00:39:18,160
as long as I or anyone else has a strong pointer to it.

737
00:39:18,160 --> 00:39:20,500
So, this is called reference counting,

738
00:39:20,500 --> 00:39:22,500
it's not garbage collection, it's reference counting.

739
00:39:22,500 --> 00:39:25,090
So the objective-C is going to keep track

740
00:39:25,090 --> 00:39:28,440
of every single strong pointer to an object in the heap

741
00:39:28,440 --> 00:39:31,590
and as long as at least one strong pointer exists,

742
00:39:31,590 --> 00:39:33,220
it's going to keep that thing in heap.

743
00:39:33,220 --> 00:39:35,500
As soon as there are no strong pointers left,

744
00:39:35,500 --> 00:39:37,860
it will free the memory out of the heap, instantly.

745
00:39:37,880 --> 00:39:39,500
Not garbage collected later.

746
00:39:39,500 --> 00:39:43,140
But actually instantly, reclaim that memory.

747
00:39:43,200 --> 00:39:45,500
So this is probably new to you, you're

748
00:39:45,500 --> 00:39:48,500
probably used to like garbage collection in Java, for example,

749
00:39:48,500 --> 00:39:52,500
or explicit memory management in other languages.

750
00:39:52,500 --> 00:39:55,140
This is called automatic reference counting and it's awesome.

751
00:39:55,140 --> 00:39:58,500
It's really very predictable, this is much better than garbage collection,

752
00:39:58,500 --> 00:40:01,500
because, you know, the garbage collector can come along later and

753
00:40:01,500 --> 00:40:04,050
do, wreak havoc on the performance of your application

754
00:40:04,050 --> 00:40:06,270
as it goes and collects things from the heap.

755
00:40:06,270 --> 00:40:09,160
This is very predictable, you know exactly when things are going to be released,

756
00:40:09,160 --> 00:40:11,500
it's when there's no strong pointers left to it.

757
00:40:11,500 --> 00:40:13,270
What would it mean if this was weak?

758
00:40:13,270 --> 00:40:16,120
Okay, if you have a weak pointer, that tells objective-C,

759
00:40:16,140 --> 00:40:18,500
okay, I have a pointer to this thing in the heap and

760
00:40:18,500 --> 00:40:22,290
keep it in memory as long as someone else has a strong pointer to it.

761
00:40:22,290 --> 00:40:26,450
But as soon as no one else has a strong pointer to that thing, it gets freed from memory

762
00:40:26,460 --> 00:40:30,160
and this pointer, if it was weak, gets set to nil.

763
00:40:30,160 --> 00:40:33,500
Nil means this pointer doesn't point to anything.

764
00:40:33,500 --> 00:40:36,500
Nil is the same as zero.

765
00:40:36,500 --> 00:40:40,960
In other languages, you're probably afraid of nil pointers.

766
00:40:40,970 --> 00:40:45,500
Because you do reference a nil pointer, it crashes your program, right?

767
00:40:45,500 --> 00:40:49,500
In objective-C, you can send messages to nil pointers even

768
00:40:49,500 --> 00:40:51,580
and it will not crash your program.

769
00:40:51,590 --> 00:40:55,920
In fact, if you send a message to a nil pointer,

770
00:40:55,920 --> 00:40:58,230
it will not execute any code, obviously,

771
00:40:58,230 --> 00:41:00,500
because there's no instance there.

772
00:41:00,500 --> 00:41:02,320
And it will return zero from,

773
00:41:02,330 --> 00:41:05,500
if that message had a return value, it'll return zero.

774
00:41:05,500 --> 00:41:09,500
So you have to be a little careful of messages that return structs,

775
00:41:09,500 --> 00:41:12,500
but as long as it returns a primitive type or a pointer,

776
00:41:12,500 --> 00:41:13,990
it'll just return zero.

777
00:41:14,010 --> 00:41:16,500
So, this is going to take getting used to.

778
00:41:16,500 --> 00:41:18,500
The fact that we are going to program

779
00:41:18,500 --> 00:41:23,500
knowing that we can send messages to nil, to pointers that are nil and that that's good.

780
00:41:23,500 --> 00:41:27,940
We'll actually make our code work nicely and we'll use that to our advantage.

781
00:41:27,960 --> 00:41:30,160
And that is definitely going to be a change for you

782
00:41:30,160 --> 00:41:31,250
who are used to

783
00:41:31,250 --> 00:41:34,400
if pointers not nil, then send message all the time, right?

784
00:41:34,400 --> 00:41:35,880
Protecting against crashes,

785
00:41:35,880 --> 00:41:39,500
you don't do that in objective-C, you just don't code it that way.

786
00:41:39,500 --> 00:41:44,180
So, this pointer could have the value nil, n-i-l,

787
00:41:44,180 --> 00:41:46,500
which means it doesn't point to anything.

788
00:41:46,500 --> 00:41:49,310
So if you have a strong pointer and it points to something

789
00:41:49,310 --> 00:41:50,730
and then you set it to nil,

790
00:41:50,750 --> 00:41:52,680
now that strong pointer doesn't point to that thing,

791
00:41:52,680 --> 00:41:54,140
as long as no one else points to it,

792
00:41:54,140 --> 00:41:57,500
you can clean up that memory, objective-C will clean the memory up for you.

793
00:41:57,500 --> 00:41:59,500
Or if you have a pointer that points to something in the heap,

794
00:41:59,500 --> 00:42:01,500
then you make it point to something else in the heap,

795
00:42:01,500 --> 00:42:04,500
then you no longer have a strong pointer to that other thing

796
00:42:04,500 --> 00:42:07,500
in the heap and as long as no one does, it'll get cleaned up.

797
00:42:07,500 --> 00:42:10,500
And remember weak not only cleans it up,

798
00:42:10,500 --> 00:42:12,180
but it sets your pointer to nil,

799
00:42:12,180 --> 00:42:13,860
because you only wanted a weak pointer,

800
00:42:13,860 --> 00:42:16,500
you only wanted it to point to that thing as long as someone else does.

801
00:42:16,500 --> 00:42:19,500
So that's the strong versus weak.

802
00:42:19,500 --> 00:42:24,120
The other thing we're going to put in this little parentheses is nonatomic.

803
00:42:24,120 --> 00:42:29,530
Nonatomic means calling this setter and getter that go along with this property

804
00:42:29,530 --> 00:42:31,500
is not thread safe.

805
00:42:31,500 --> 00:42:36,140
So you can't have two threads trying to set this property at the same time.

806
00:42:36,140 --> 00:42:39,500
Why do we say nonatomic here, why do we want this to not be thread safe?

807
00:42:39,500 --> 00:42:42,930
Because the way we do multithreading in iOS

808
00:42:42,940 --> 00:42:46,140
is not by having a single object that multiple threads are setting on,

809
00:42:46,140 --> 00:42:49,270
we usually have a separate set of objects that are running in another thread,

810
00:42:49,270 --> 00:42:51,030
like your model,

811
00:42:51,030 --> 00:42:54,500
and then other, then your UI stuff is running in the UI thread

812
00:42:54,500 --> 00:42:57,030
and they're talking thread to thread.

813
00:42:57,050 --> 00:43:00,500
So we don't need this and not only that,

814
00:43:00,500 --> 00:43:03,250
what's going to happen here when we do this at sign property

815
00:43:03,250 --> 00:43:06,500
is objective-C is going to create that getter and setter methods that I told

816
00:43:06,500 --> 00:43:09,500
you about to set these contents automatically for us,

817
00:43:09,500 --> 00:43:12,500
and we want them to be simple.

818
00:43:12,500 --> 00:43:14,500
This is what they're going to look like.

819
00:43:14,500 --> 00:43:16,500
We want them to be simple.

820
00:43:16,500 --> 00:43:20,210
If we don't say nonatomic, there's going to be all kinds of locking code in there, right?

821
00:43:20,210 --> 00:43:22,360
If you have multiple threads and you're

822
00:43:22,360 --> 00:43:26,010
allowing multiple threads to access the setter and getter here,

823
00:43:26,030 --> 00:43:28,500
then you need locking code, and we don't want locking code,

824
00:43:28,500 --> 00:43:31,820
especially if we're going to implement the setter and getter ourselves,

825
00:43:31,820 --> 00:43:34,500
which we're going to, sometimes.

826
00:43:34,500 --> 00:43:38,500
But the default here is that we don't implement this setter and getter,

827
00:43:38,500 --> 00:43:40,500
it's automatically in there for us.

828
00:43:40,500 --> 00:43:42,500
So you can see there's three parts to this.

829
00:43:42,500 --> 00:43:45,030
There's the at sign synthesize, you see that?

830
00:43:45,050 --> 00:43:50,500
That's basically just saying underbar contents is the name of the instance variable

831
00:43:50,500 --> 00:43:53,500
in which the property contents is going to be stored.

832
00:43:53,500 --> 00:43:57,210
Now we could say at sign synthesize contents equals foo,

833
00:43:57,210 --> 00:44:00,500
and then contents property would be stored in an instance variable called foo.

834
00:44:00,500 --> 00:44:02,210
But that would be very confusing,

835
00:44:02,210 --> 00:44:05,500
so we always use underbar name of the property.

836
00:44:05,500 --> 00:44:07,660
And so that's part one,

837
00:44:07,660 --> 00:44:12,500
just basically allocating an instance variable to store this contents property.

838
00:44:12,500 --> 00:44:14,060
Then there's the getter,

839
00:44:14,060 --> 00:44:15,970
that's NSString contents,

840
00:44:15,970 --> 00:44:17,270
return contents,

841
00:44:17,270 --> 00:44:20,430
so the dash, parentheses, NSString contents

842
00:44:20,430 --> 00:44:23,500
is a method declaration in objective-C,

843
00:44:23,500 --> 00:44:25,500
the dash means this is a method,

844
00:44:25,500 --> 00:44:27,400
parentheses NSString star means

845
00:44:27,400 --> 00:44:30,500
this is a method that returns a pointer to a string,

846
00:44:30,500 --> 00:44:33,500
and contents is the name of the method.

847
00:44:33,500 --> 00:44:37,500
So the name of the method of the getter is the same as the name of the property.

848
00:44:37,500 --> 00:44:43,500
Then, the implementation is just return that instance variable that we synthesized.

849
00:44:43,500 --> 00:44:49,170
And similarly, the next method is a method in objective-C for setting it.

850
00:44:49,170 --> 00:44:51,500
And, again, dash because this is a method.

851
00:44:51,500 --> 00:44:55,500
Parentheses void means this method does not return anything.

852
00:44:55,500 --> 00:44:57,500
That's what parentheses void means.

853
00:44:57,500 --> 00:45:00,880
Then set contents colon, that's the name of this method,

854
00:45:00,880 --> 00:45:03,080
set contents colon.

855
00:45:03,080 --> 00:45:07,500
Parentheses NSString star is the argument to this method.

856
00:45:07,500 --> 00:45:10,910
Contents is just the name of the argument, the local name of the

857
00:45:10,910 --> 00:45:14,230
variable in the local contents, context,

858
00:45:14,230 --> 00:45:17,210
and the implementation is just underbar contents,

859
00:45:17,210 --> 00:45:20,500
our instance variable equals that argument.

860
00:45:20,500 --> 00:45:25,640
So, before I move on, does everyone understand how these two methods

861
00:45:25,640 --> 00:45:33,500
are allowing you to set and get an NSString storage space inside your card?

862
00:45:33,500 --> 00:45:35,500
Everyone understand that?

863
00:45:35,500 --> 00:45:36,780
Question?

864
00:45:38,500 --> 00:45:41,060
Okay, so the synthesize line, again,

865
00:45:41,060 --> 00:45:44,300
is just specifying the name of the instance variable

866
00:45:44,300 --> 00:45:47,500
that we're going to use to store this stuff in, underbar contents.

867
00:45:47,500 --> 00:45:50,990
It's kind of weird, you could maybe, it might be better saying

868
00:45:50,990 --> 00:45:53,380
at sign synthesize contents

869
00:45:53,380 --> 00:45:56,500
to use instance variable with name, underbar contents.

870
00:45:56,500 --> 00:45:58,260
That equals, I know, is a little weird.

871
00:45:58,270 --> 00:46:03,080
It sounds like it's assigning something, but it's just, that's what, think about equals as,

872
00:46:03,080 --> 00:46:07,080
you know, we'll use the instance variable with the name, underbar contents.

873
00:46:07,100 --> 00:46:08,500
So that's what the synthesize is doing.

874
00:46:08,500 --> 00:46:12,860
If you don't put the synthesize, it's not going to create the space in your card instance,

875
00:46:12,860 --> 00:46:17,500
and there won't be any name for it so you can't refer to it in your getter and setter.

876
00:46:17,500 --> 00:46:19,500
Everyone understand this?

877
00:46:19,500 --> 00:46:21,300
Any other questions?

878
00:46:21,300 --> 00:46:26,060
Okay, now, the thing about it is, when you type the at sign property on the left,

879
00:46:26,060 --> 00:46:28,450
this gets added to your at sign implementation;

880
00:46:28,450 --> 00:46:31,500
however, you will not see it there.

881
00:46:32,230 --> 00:46:34,500
So it's there, but you don't see it.

882
00:46:34,500 --> 00:46:38,910
Okay, objective-C is, made it for you, but it doesn't show it to you,

883
00:46:38,930 --> 00:46:44,230
but it's there, okay, that setter method and that getter method are there.

884
00:46:44,230 --> 00:46:45,300
They exist.

885
00:46:45,300 --> 00:46:47,500
And not only that, they're public,

886
00:46:47,500 --> 00:46:51,500
because you put that at sign property declaration in your header file.

887
00:46:51,500 --> 00:46:53,500
Everyone got that?

888
00:46:53,500 --> 00:46:56,500
So let's look at another couple properties just to see the syntax a little more.

889
00:46:56,500 --> 00:46:59,500
So here's two properties that are Boolean.

890
00:46:59,500 --> 00:47:02,500
There's no Boolean primitive in C,

891
00:47:02,500 --> 00:47:06,500
so objective-C has to find, typedef all caps BOOL,

892
00:47:06,500 --> 00:47:09,500
probably a short or something or an int or a char,

893
00:47:09,500 --> 00:47:12,500
I don't know what, but you can think of it as a primitive type,

894
00:47:12,500 --> 00:47:15,500
it's a Boolean, it's value can either be yes,

895
00:47:15,500 --> 00:47:18,500
which is some non-zero value, or no which is zero.

896
00:47:18,500 --> 00:47:21,500
And these properties don't need the strong or weak.

897
00:47:22,170 --> 00:47:24,260
Do you understand why that is?

898
00:47:24,260 --> 00:47:25,500
Because they're primitive types,

899
00:47:25,500 --> 00:47:27,500
they're not stored in the heap.

900
00:47:27,500 --> 00:47:31,060
They're just a int or a float, so there's no memory to manage

901
00:47:31,080 --> 00:47:34,260
so you don't need to know about strong and weak pointers, there's no pointers involved here,

902
00:47:34,260 --> 00:47:35,990
this is just a BOOL, a Boolean.

903
00:47:36,000 --> 00:47:39,060
So there's no strong or weak, but we still have the nonatomic,

904
00:47:39,080 --> 00:47:41,500
because we still want the setter and the getter to be simple,

905
00:47:41,500 --> 00:47:43,100
not having any locking code or any of that business.

906
00:47:43,120 --> 00:47:46,890
So we're always going to have nonatomic on every property in this class.

907
00:47:46,910 --> 00:47:50,040
We will not have a single property in this entire class that is not nonatomic.

908
00:47:50,060 --> 00:47:52,430
So just put it in there, I wish it were the default.

909
00:47:52,450 --> 00:47:54,500
So that's what we're going to do.

910
00:47:54,500 --> 00:47:57,500
You can see we've synthesized them both

911
00:47:57,500 --> 00:47:59,500
and we've got the setter and the getter for them both,

912
00:47:59,500 --> 00:48:02,500
and this is all being done for us by objective-C.

913
00:48:02,500 --> 00:48:04,910
Now, one thing that's kind of cool is

914
00:48:04,910 --> 00:48:07,230
we may not like the name of this getter,

915
00:48:07,230 --> 00:48:12,870
because we want our code to read something like if card is chosen, then do something.

916
00:48:12,890 --> 00:48:14,910
If card is matched, then do something.

917
00:48:14,910 --> 00:48:18,500
So we really want the getter called is chosen, not just chosen.

918
00:48:18,500 --> 00:48:22,500
You know, if card chosen, not as nice as if card is chosen.

919
00:48:22,500 --> 00:48:25,500
So it's actually possible to rename the getter

920
00:48:25,500 --> 00:48:29,100
by saying getter equals the new name you want.

921
00:48:29,100 --> 00:48:31,500
And that's essentially renamed it,

922
00:48:31,500 --> 00:48:34,500
same thing, we'll do the same thing with this one. Getter equals is matched,

923
00:48:34,500 --> 00:48:37,170
now that getter is called is matched.

924
00:48:37,190 --> 00:48:38,650
And I bring this up because you're going to see

925
00:48:38,650 --> 00:48:40,500
how iOS does this with Boolean properties,

926
00:48:40,500 --> 00:48:43,870
it tends to rename them to is this or has this,

927
00:48:43,870 --> 00:48:46,500
depending on what the verb there is.

928
00:48:46,500 --> 00:48:51,760
And again, objective-C is writing all this code on, in the implementation,

929
00:48:51,780 --> 00:48:53,500
but you don't see it.

930
00:48:53,500 --> 00:48:55,500
But it's there.

931
00:48:55,500 --> 00:49:00,190
Now, we're going to talk about why properties are good

932
00:49:00,190 --> 00:49:05,540
and why it's better than just accessing instance variables directly, in later lectures,

933
00:49:05,560 --> 00:49:09,500
but the bottom-line is it's good for doing things like balance checking,

934
00:49:09,500 --> 00:49:13,500
it's good for doing things like when you set a property and you want to updated the UI.

935
00:49:13,500 --> 00:49:16,500
It's doing good for things for initializing pointers.

936
00:49:16,500 --> 00:49:21,240
Like that NSString star contents property is going to start off nil.

937
00:49:21,240 --> 00:49:25,500
All properties, in objective-C, all of them, start off zero.

938
00:49:25,500 --> 00:49:27,500
So for pointer, that's nil.

939
00:49:27,500 --> 00:49:30,800
So that contents property, when we create a new card,

940
00:49:30,800 --> 00:49:32,820
it's going to not point to any contents.

941
00:49:32,840 --> 00:49:35,500
That card's going to be blank, okay, it's not going to have anything on it.

942
00:49:35,500 --> 00:49:38,500
So, it's nice to use the setter and getter,

943
00:49:38,500 --> 00:49:41,500
we implement our own setter and getter that will check to see

944
00:49:41,500 --> 00:49:43,830
if it's nil, and if it's not, and sometimes,

945
00:49:43,840 --> 00:49:46,210
not with contents, but with some properties,

946
00:49:46,210 --> 00:49:49,500
if it's nil, we'll create something in memory.

947
00:49:49,500 --> 00:49:50,850
So that's another reason you use it.

948
00:49:50,870 --> 00:49:55,500
So you'll see all these reasons why we want properties in the next lecture basically.

949
00:49:55,500 --> 00:49:59,500
Alright, so now, let's look at a method.

950
00:49:59,500 --> 00:50:01,240
Okay? Just a regular, old method.

951
00:50:01,240 --> 00:50:03,500
You've seen some methods, the setter and getter methods,

952
00:50:03,500 --> 00:50:06,820
but what if we wanted to find our own method, our own public method,

953
00:50:06,820 --> 00:50:09,280
so I'm going to define this method called match.

954
00:50:09,280 --> 00:50:12,590
Remember that I'm building a model here for a card matching game,

955
00:50:12,610 --> 00:50:14,690
where I'm going to put all these cards on the screen

956
00:50:14,690 --> 00:50:16,500
and the user is going to try and match them.

957
00:50:16,500 --> 00:50:18,020
Pick ones that match, alright?

958
00:50:18,020 --> 00:50:19,500
So I need a match method.

959
00:50:19,500 --> 00:50:23,500
A method that tells me whether two cards match.

960
00:50:23,500 --> 00:50:26,500
Okay? So, I'm trying to make this simple,

961
00:50:26,500 --> 00:50:29,500
so I've made a simple match method that has the following semantics.

962
00:50:29,500 --> 00:50:31,910
It takes another card as the argument,

963
00:50:31,930 --> 00:50:33,500
and it returns it an integer.

964
00:50:33,500 --> 00:50:36,960
That integer is zero if the cards don't match,

965
00:50:36,960 --> 00:50:42,500
otherwise, it's an integer that is higher, the better a match it is.

966
00:50:42,500 --> 00:50:45,500
Okay? So like a really good match might be a thousand,

967
00:50:45,500 --> 00:50:49,500
but a not so good match might only be a hundred, and, or, or it could be one.

968
00:50:49,500 --> 00:50:53,670
Now, the semantics of what that number is, totally depends on the cards,

969
00:50:53,670 --> 00:50:56,500
because we're only going to match cards against other cards, alright?

970
00:50:56,500 --> 00:50:58,910
And we're going to find out how good a match they are

971
00:50:58,930 --> 00:51:01,500
by how that, whatever that card class is,

972
00:51:01,500 --> 00:51:05,500
and we're going to make a subclass of this class, called playing card,

973
00:51:05,500 --> 00:51:09,060
that's going to give more points for matching the rank, okay,

974
00:51:09,060 --> 00:51:11,500
than it is for matching the suit.

975
00:51:11,500 --> 00:51:16,500
But that's up to subclasses of card to determine what the point system is.

976
00:51:16,500 --> 00:51:20,060
So, for our implementation of match,

977
00:51:20,060 --> 00:51:23,060
we're going to do a really simple implementation, so,

978
00:51:23,060 --> 00:51:25,500
first let's assume that they don't match.

979
00:51:25,500 --> 00:51:28,500
Okay, so I just made this local variable int score equals zero,

980
00:51:28,500 --> 00:51:30,500
you can see that you can assign a variable,

981
00:51:30,500 --> 00:51:33,500
actually all local variables also start out zero,

982
00:51:33,500 --> 00:51:35,500
so I don't even really need that equals zero,

983
00:51:35,500 --> 00:51:37,500
but I'm a big believer in putting that in

984
00:51:37,500 --> 00:51:39,960
if that's really, you know, what you intend,

985
00:51:39,980 --> 00:51:42,950
and in this case I intend the score to be actually zero.

986
00:51:42,960 --> 00:51:46,500
The score of this match until I go and see if these cards match, right?

987
00:51:46,500 --> 00:51:48,830
So it's just a kind of programming style thing here.

988
00:51:48,850 --> 00:51:51,500
So, how am I going to tell

989
00:51:51,500 --> 00:51:56,960
if this card that's been passed in match, matches the card that it's being sent to?

990
00:51:56,980 --> 00:52:02,130
And the answer is I'm going to send some messages.

991
00:52:02,280 --> 00:52:04,500
You see the open square brackets notation there,

992
00:52:04,500 --> 00:52:09,590
that's the first time you're seeing me send a message in objective-C,

993
00:52:09,590 --> 00:52:13,500
and I'm also sending two other messages in this one line.

994
00:52:13,500 --> 00:52:18,240
Card.contents and self.contents, you see both of those,

995
00:52:18,240 --> 00:52:20,350
those are message sends, as well.

996
00:52:20,350 --> 00:52:23,280
So there's two different syntaxes here for sending a message.

997
00:52:23,280 --> 00:52:27,500
One is open square brackets, okay, and we'll talk about that one in a second.

998
00:52:27,500 --> 00:52:31,500
And another one is dot notation, card.contents.

999
00:52:31,500 --> 00:52:32,940
When do we use them?

1000
00:52:32,960 --> 00:52:37,500
We only use the dot notation for properties.

1001
00:52:37,500 --> 00:52:41,500
That's how we call the setter and getter of properties, using dot notation.

1002
00:52:41,500 --> 00:52:44,760
Okay? Now, here we're calling the getter,

1003
00:52:44,780 --> 00:52:46,670
card.contents is calling

1004
00:52:46,670 --> 00:52:52,500
the getter of the contents property on the card instance.

1005
00:52:52,500 --> 00:52:54,500
How do we call the setter?

1006
00:52:54,500 --> 00:52:55,500
Exactly the same.

1007
00:52:55,500 --> 00:52:59,500
Card.contents, but we put it on the left-hand side of the equals.

1008
00:52:59,500 --> 00:53:01,150
Card.contents equals,

1009
00:53:01,150 --> 00:53:04,500
now we're calling the setter for contents. You see?

1010
00:53:04,500 --> 00:53:06,070
So here we're calling the getter.

1011
00:53:06,090 --> 00:53:09,760
We're also calling the getter for contents on self, on our self.

1012
00:53:09,780 --> 00:53:12,500
So, in other language this might be called this, right,

1013
00:53:12,500 --> 00:53:14,330
but you know what self is, right, self is

1014
00:53:14,330 --> 00:53:17,500
this instance that this code is operating on.

1015
00:53:17,500 --> 00:53:20,780
So, we are going to compare these two strings,

1016
00:53:20,780 --> 00:53:23,150
card.contents and self.contents

1017
00:53:23,150 --> 00:53:25,500
to see if they are equal and we are going to do

1018
00:53:25,500 --> 00:53:30,030
that with the NSString method is equal to string colon.

1019
00:53:30,040 --> 00:53:34,410
So isEqualToString colon can only be sent to a string,

1020
00:53:35,180 --> 00:53:38,350
so isEqualToString can only be sent to a string

1021
00:53:38,350 --> 00:53:40,160
and card.contents

1022
00:53:40,170 --> 00:53:42,850
is a getter method that returns a NSString,

1023
00:53:42,850 --> 00:53:43,830
so we're good to go, right?

1024
00:53:43,850 --> 00:53:46,630
We're sending is equal string to a string,

1025
00:53:46,630 --> 00:53:50,790
and isEqualToString takes as an argument, an NSString

1026
00:53:50,790 --> 00:53:52,090
and, again, self.contents

1027
00:53:52,090 --> 00:53:54,500
is a getter method that returns NSString;

1028
00:53:54,500 --> 00:53:58,410
therefore, we have satisfied all the requirements of is equal to string

1029
00:53:58,420 --> 00:54:00,500
and we put square brackets around it,

1030
00:54:00,500 --> 00:54:02,500
and it's going to return a Boolean is

1031
00:54:02,500 --> 00:54:05,150
equal to string is defined to return a Boolean

1032
00:54:05,150 --> 00:54:07,500
whether the contents of those two strings are the same.

1033
00:54:07,500 --> 00:54:10,500
Notice we did not say equals equals.

1034
00:54:10,500 --> 00:54:14,290
We did not say card.contents equals equals self.contents.

1035
00:54:14,290 --> 00:54:16,500
Because we'd just be comparing the pointers then,

1036
00:54:16,500 --> 00:54:20,500
not what the pointers point to.

1037
00:54:20,500 --> 00:54:24,130
Everyone understand why we didn't use == to see if those two strings are the same?

1038
00:54:24,150 --> 00:54:27,500
So if those strings are the same, I'm going to give one point.

1039
00:54:27,500 --> 00:54:32,180
So this is either the dirt simple implementation of match,

1040
00:54:32,180 --> 00:54:35,500
which is if the cards are exactly the same, their contents are exactly the same,

1041
00:54:35,500 --> 00:54:38,130
I'll get one point, otherwise I get zero.

1042
00:54:38,150 --> 00:54:42,500
Now we're going to do much better implementation in match when we do playing card,

1043
00:54:42,500 --> 00:54:44,500
but this is our kind of dirt simple one.

1044
00:54:44,500 --> 00:54:48,500
Now, to give you just a little more about objective-C,

1045
00:54:48,500 --> 00:54:50,500
what if we changed this method, oh, so, yeah,

1046
00:54:50,500 --> 00:54:55,500
here's a little bit about who's the sender and who's the receiver here.

1047
00:54:55,500 --> 00:54:57,500
You can look at this in the slides later.

1048
00:54:57,500 --> 00:55:00,500
Okay? But I'm going to make this a little more complicated.

1049
00:55:00,500 --> 00:55:04,500
I'm going to make the argument to match be an array of cards.

1050
00:55:04,500 --> 00:55:09,500
So now I'm matching this card that I'm sending this to, to a whole bunch of other cards.

1051
00:55:10,070 --> 00:55:14,500
So now I'm going to need some new algorithm to match, right?

1052
00:55:14,500 --> 00:55:16,500
So, again, a playing card match,

1053
00:55:16,500 --> 00:55:18,500
if let's say you had matching three cards,

1054
00:55:18,500 --> 00:55:21,700
you might give a lot of points if all three cards are the same rank,

1055
00:55:21,700 --> 00:55:24,110
they're all jacks, you get a lot of points.

1056
00:55:24,130 --> 00:55:26,500
If only two of them are jacks and the other one is something else,

1057
00:55:26,500 --> 00:55:28,500
well you don't get very many points at all.

1058
00:55:28,500 --> 00:55:31,110
If they're all through the same suit, you kind of get a medium amount of points,

1059
00:55:31,110 --> 00:55:32,500
you see what I mean? So,

1060
00:55:32,500 --> 00:55:37,500
here I'm changing match to take an array as the argument instead of just a single card.

1061
00:55:37,500 --> 00:55:41,200
And how would I change my implementation to deal with that?

1062
00:55:41,200 --> 00:55:44,500
Well, I'm just going to put a for-loop around my if

1063
00:55:44,500 --> 00:55:47,020
and iterate through all the cards

1064
00:55:47,030 --> 00:55:51,200
and so this implementation, hopefully those of you who are quick thinkers,

1065
00:55:51,200 --> 00:55:52,500
you can know what this does,

1066
00:55:52,500 --> 00:55:53,850
this gives you one point

1067
00:55:53,850 --> 00:55:58,500
if the card that's receiving this matches any of the cards in the array.

1068
00:55:58,500 --> 00:56:01,090
Any, not all, any.

1069
00:56:01,090 --> 00:56:03,500
Now you can imagine a lot better algorithms here.

1070
00:56:03,500 --> 00:56:07,000
Maybe you get one point for every card you match in the array

1071
00:56:07,010 --> 00:56:10,890
or you get two points for one match and four points for two and eight points for three,

1072
00:56:10,900 --> 00:56:14,500
some sort of binary thing, exponential point, whatever,

1073
00:56:14,500 --> 00:56:16,530
this is first day of lecture,

1074
00:56:16,530 --> 00:56:19,140
we're just going to give one point if it matches any.

1075
00:56:19,160 --> 00:56:21,420
But mostly what I wanted to show you here is

1076
00:56:21,420 --> 00:56:25,500
what it looks like to have an array as the argument instead of a single card.

1077
00:56:25,500 --> 00:56:29,070
So that you understand that the argument, what the argument to the method is

1078
00:56:29,070 --> 00:56:31,870
and also so I can show you the for-loop there.

1079
00:56:31,880 --> 00:56:35,500
You see that for in, a lot of languages have that these days.

1080
00:56:35,500 --> 00:56:37,770
That just basically means it's a for-loop

1081
00:56:37,770 --> 00:56:41,370
where it's going to go through every object in that NSArray

1082
00:56:41,370 --> 00:56:43,000
and assign it to card,

1083
00:56:43,010 --> 00:56:44,750
card is the iteration variable,

1084
00:56:44,750 --> 00:56:48,000
and execute that if once for each of the cards in the array.

1085
00:56:48,010 --> 00:56:49,940
Everyone understand that?

1086
00:56:49,940 --> 00:56:52,500
If you have a question about that, ask?

1087
00:56:53,010 --> 00:56:54,380
Yeah?

1088
00:56:58,570 --> 00:57:00,500
Oh, okay. That's a great question.

1089
00:57:00,500 --> 00:57:04,500
So the question is if I just have that for line, but I said for card card,

1090
00:57:04,500 --> 00:57:09,120
not for card star card in other cards.

1091
00:57:09,120 --> 00:57:11,700
We'd get a syntax error. Why?

1092
00:57:11,740 --> 00:57:15,500
Because all objects are always pointed to so we always have that star.

1093
00:57:15,500 --> 00:57:17,500
Always.

1094
00:57:17,500 --> 00:57:22,000
You can't have a card not being a pointer to it,

1095
00:57:22,030 --> 00:57:25,500
so the, you know, objective-C would give you a syntax error there,

1096
00:57:25,500 --> 00:57:27,500
it's impossible to not have that star.

1097
00:57:27,500 --> 00:57:31,180
Whenever you have the name of the class, it's always going to have that star. Yeah?

1098
00:57:35,720 --> 00:57:37,940
Yes. The question is, another great one,

1099
00:57:37,960 --> 00:57:41,250
can I use the square brackets to call the setter and getter

1100
00:57:41,250 --> 00:57:43,160
instead of using that dot notation?

1101
00:57:43,180 --> 00:57:46,810
And that's a really insightful question and the answer is absolutely you can,

1102
00:57:46,810 --> 00:57:50,500
it's perfectly legal, because that setter and getter are completely normal methods.

1103
00:57:50,500 --> 00:57:52,500
There's nothing special about them whatsoever.

1104
00:57:52,500 --> 00:57:57,500
That dot notation is a nicety, syntactic sugar only.

1105
00:57:57,500 --> 00:58:00,860
The question is should you use square brackets for setter and getter,

1106
00:58:00,860 --> 00:58:02,900
and I think it's a matter of style.

1107
00:58:02,900 --> 00:58:05,140
You would definitely would want to be 100 percent consistent,

1108
00:58:05,140 --> 00:58:06,500
you would never want to mix them.

1109
00:58:06,500 --> 00:58:10,310
And I think most people, most people would say use the dot notation.

1110
00:58:10,310 --> 00:58:13,500
It makes it clearer, it's a little simpler, nicer,

1111
00:58:13,500 --> 00:58:15,290
but, you know, you could.

1112
00:58:15,290 --> 00:58:17,180
In this class, please use the dot notation

1113
00:58:17,180 --> 00:58:19,500
just so I know you know how to use dot notation.

1114
00:58:19,500 --> 00:58:20,420
Question?

1115
00:58:24,860 --> 00:58:26,500
OK, awesome question again.

1116
00:58:26,500 --> 00:58:28,120
Gosh, you guys are so good.

1117
00:58:28,140 --> 00:58:32,500
Can I use dot notation for a method that takes no arguments,

1118
00:58:32,500 --> 00:58:34,500
but is not a getter or a setter?

1119
00:58:34,500 --> 00:58:37,920
And the answer is objective-C will warn you about that,

1120
00:58:37,940 --> 00:58:39,830
not give you an error, but warn you,

1121
00:58:39,850 --> 00:58:41,880
and you should never do that in this class.

1122
00:58:41,900 --> 00:58:44,310
Okay? That is really not that good form,

1123
00:58:44,310 --> 00:58:46,880
whereas his question was kind of like you can argue,

1124
00:58:46,900 --> 00:58:48,750
that one, don't do it.

1125
00:58:48,770 --> 00:58:52,500
So. Use dot notations only for setters and getters.

1126
00:58:52,500 --> 00:58:53,500
Other questions?

1127
00:58:55,070 --> 00:58:56,050
Yeah?

1128
00:58:59,500 --> 00:59:02,500
So, yeah, question is how do you use a setter with dot notation?

1129
00:59:02,500 --> 00:59:04,500
And it's exactly the same as a getter,

1130
00:59:04,500 --> 00:59:07,500
it's just that you're using it on the left-hand side of an equals.

1131
00:59:07,500 --> 00:59:12,160
So card.contents equals, you know, A of clubs,

1132
00:59:12,160 --> 00:59:15,500
that would call the setter of contents, whereas, you know,

1133
00:59:15,500 --> 00:59:19,840
this is calling the getter, because it's not on the left-hand side of the equal.

1134
00:59:21,470 --> 00:59:23,360
Excellent! That's all I had today, so

1135
00:59:23,360 --> 00:59:26,810
on Wednesday, we will do deck

1136
00:59:26,830 --> 00:59:29,530
and playing card and playing card

1137
00:59:29,530 --> 00:59:33,500
and I'm going to dive right into a big old demo of XCode 5

1138
00:59:33,500 --> 00:59:35,500
and show you how all this stuff is actually done,

1139
00:59:35,500 --> 00:59:38,500
and then next week we'll do, yet more objective-C.

1140
00:59:38,500 --> 00:59:40,400
Thank you very much!

1141
00:59:41,720 --> 00:59:45,660
> For more, please visit us at stanford.edu.

