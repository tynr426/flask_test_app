1
00:00:08,850 --> 00:00:11,550
Alright. So Welcome to Lecture Number 2

2
00:00:11,550 --> 00:00:14,910
of CS193P fall of 2011

3
00:00:14,910 --> 00:00:16,620
This is not even a real lecture

4
00:00:16,620 --> 00:00:18,130
It is just all demo

5
00:00:18,130 --> 00:00:19,960
OK. Promise... dive right in to this demo

6
00:00:19,960 --> 00:00:23,030
It's gonna take our entire time here

7
00:00:23,030 --> 00:00:29,640
What we gonna be talking about in the demo is model view controller

8
00:00:29,650 --> 00:00:31,750
OK. We're gonna do a simple model view controller

9
00:00:31,760 --> 00:00:33,450
but mostly what you're gonna see today

10
00:00:33,460 --> 00:00:35,690
is what Xcode 4 looks like

11
00:00:35,690 --> 00:00:38,840
and what writing objective-c program looks like

12
00:00:38,850 --> 00:00:41,250
including creating our model view and controller

13
00:00:41,250 --> 00:00:45,730
OK. So, here I am in Xcode

14
00:00:45,730 --> 00:00:48,340
When you run Xcode, you get this flash screen

15
00:00:48,340 --> 00:00:51,340
and you can see on the right hand side

16
00:00:51,340 --> 00:00:54,610
has the list of all your recent projects that you opened

17
00:00:54,620 --> 00:00:55,980
When you run Xcode

18
00:00:55,980 --> 00:00:58,040
it will be blank just like the blanks right here

19
00:00:58,040 --> 00:01:00,950
because we haven't even done our first program

20
00:01:00,950 --> 00:01:03,070
This is gonna be our first program today

21
00:01:03,070 --> 00:01:04,620
There are some other options here in which

22
00:01:04,620 --> 00:01:06,100
we gonna have time to go into today

23
00:01:06,100 --> 00:01:09,350
So I'm gonna start with this very important option here

24
00:01:09,350 --> 00:01:11,320
which is create a new project

25
00:01:11,330 --> 00:01:14,850
So if you click on this and immediate

26
00:01:14,850 --> 00:01:18,780
we're going to the project creation, screens of Xcode 4

27
00:01:18,780 --> 00:01:21,600
This thing the Xcode 4 is asking us is

28
00:01:21,600 --> 00:01:24,770
to choose a template for our application

29
00:01:24,770 --> 00:01:27,150
These templates don't have a lot of code in them

30
00:01:27,150 --> 00:01:28,920
There is just a little bit

31
00:01:28,930 --> 00:01:30,460
You can see that there is one

32
00:01:30,470 --> 00:01:32,700
for creating a document based application

33
00:01:32,700 --> 00:01:34,970
or open GL Game

34
00:01:34,980 --> 00:01:37,250
or a page based application

35
00:01:37,250 --> 00:01:40,280
like iBook like application

36
00:01:40,280 --> 00:01:43,440
and the one that were gonna pick today is really the basic one

37
00:01:43,440 --> 00:01:45,690
Probably the one you're gonna use most of the quarter

38
00:01:45,690 --> 00:01:47,510
which is Single View Application

39
00:01:47,510 --> 00:01:50,730
What a single view application template does is

40
00:01:50,730 --> 00:01:56,320
it's gonna create a controller for you and a blank view and that's it

41
00:01:56,320 --> 00:02:00,350
So basic single MVC application it's gonna create

42
00:02:00,350 --> 00:02:03,450
and the template controller for you and a blank view

43
00:02:03,460 --> 00:02:04,990
and you have to create your own...

44
00:02:04,990 --> 00:02:07,260
we'll create our own model

45
00:02:07,260 --> 00:02:09,130
Alright, so we just click next here

46
00:02:09,130 --> 00:02:12,700
and now it wants to know some details about the project

47
00:02:12,700 --> 00:02:13,870
like its name

48
00:02:13,870 --> 00:02:17,230
Today, what were gonna build is an RPN calculator

49
00:02:17,230 --> 00:02:20,460
as I said last time a reverse Polish notation calculator

50
00:02:20,460 --> 00:02:22,230
What's that is a calculator

51
00:02:22,230 --> 00:02:25,160
where you enter all your numbers using an enter key

52
00:02:25,170 --> 00:02:27,040
and then the operation pulls numbers

53
00:02:27,040 --> 00:02:29,190
back off of the stack of operation

54
00:02:29,190 --> 00:02:31,620
For example, if you wanna do 3 + 5

55
00:02:31,620 --> 00:02:34,470
So you would say 3 enter 5 enter plus

56
00:02:34,470 --> 00:02:36,300
and then pull the 3 and the 5 out

57
00:02:36,300 --> 00:02:37,680
add them make 8...

58
00:02:37,680 --> 00:02:39,200
put that back on the stack

59
00:02:39,200 --> 00:02:42,040
until you then said 6 plus then you get 14

60
00:02:42,040 --> 00:02:44,040
Right, so it just a stack of numbers

61
00:02:44,040 --> 00:02:45,990
And that's what were building

62
00:02:45,990 --> 00:02:49,130
so we are gonna call it calculator

63
00:02:49,130 --> 00:02:52,110
and this next field here company identifier

64
00:02:52,110 --> 00:02:55,750
that uniquely identifies your application

65
00:02:55,750 --> 00:03:00,470
And you have this kind of reverse DNS kind of structure

66
00:03:00,470 --> 00:03:05,050
So were gonna use edu.stanford.cs193p.your name

67
00:03:05,050 --> 00:03:06,180
OK. That's pretty unique

68
00:03:06,180 --> 00:03:08,930
No chances for that to conflict

69
00:03:08,930 --> 00:03:11,080
For example you want to use Stanford ID

70
00:03:11,080 --> 00:03:12,810
or something where I have instructor

71
00:03:12,810 --> 00:03:14,820
probably gonna be quite unique

72
00:03:14,820 --> 00:03:18,440
And the class prefix

73
00:03:18,450 --> 00:03:19,690
Remember this template is

74
00:03:19,700 --> 00:03:22,930
gonna generate controller class for you

75
00:03:22,930 --> 00:03:25,600
and it's gonna call that class view controller

76
00:03:25,600 --> 00:03:27,910
which is pretty generic name of a class

77
00:03:27,910 --> 00:03:30,880
So this is just a word that you can put in front of it

78
00:03:30,880 --> 00:03:32,830
You make it less generic of a name

79
00:03:32,840 --> 00:03:34,260
So, were gonna use calculator

80
00:03:34,260 --> 00:03:36,000
It used to be that Xcode will just always

81
00:03:36,010 --> 00:03:37,420
use the name of your apps for this

82
00:03:37,420 --> 00:03:38,410
but now it let you set it

83
00:03:38,420 --> 00:03:41,860
But now our controller is gonna be called calculator view controller

84
00:03:41,860 --> 00:03:44,460
Instead of view controller that's all it is

85
00:03:44,470 --> 00:03:48,260
We can build apps here for the iPhone or for the iPad

86
00:03:48,260 --> 00:03:51,700
or universal application that actually run on both

87
00:03:51,700 --> 00:03:55,290
So, there's mechanism in iOS and in Xcode

88
00:03:55,290 --> 00:03:58,980
for building a single application that has two different UIs

89
00:03:58,980 --> 00:04:00,870
one for the iPad and For the iPhone

90
00:04:00,870 --> 00:04:02,230
okay, which is kinda cool

91
00:04:02,240 --> 00:04:04,160
because you wanna to share a lot of your controllers

92
00:04:04,160 --> 00:04:06,100
all your models and that stuff

93
00:04:06,100 --> 00:04:09,180
But your views and maybe

94
00:04:09,180 --> 00:04:10,640
the way your controllers interact some

95
00:04:10,640 --> 00:04:11,700
of your views can be different

96
00:04:11,700 --> 00:04:12,950
if you have a lot of screen real state

97
00:04:12,950 --> 00:04:14,800
you can put a lot of things at the same time

98
00:04:14,800 --> 00:04:17,720
versus a smaller phone like interface

99
00:04:17,720 --> 00:04:19,440
so we'll see that later in the quarter

100
00:04:19,440 --> 00:04:20,420
But for simplicity

101
00:04:20,420 --> 00:04:23,200
we're gonna make this for iPhone only

102
00:04:23,200 --> 00:04:24,960
This use storyboard

103
00:04:24,960 --> 00:04:27,270
storyboard is the new mechanism in iOS5

104
00:04:27,270 --> 00:04:29,710
The basic it allows you put all your

105
00:04:29,710 --> 00:04:32,730
MVC's views on screen at the same time

106
00:04:32,730 --> 00:04:34,550
So, you can see how they interact with each other

107
00:04:34,560 --> 00:04:38,740
You remember in the last lecture I had that kinda big thing

108
00:04:38,740 --> 00:04:40,130
where I had a whole bunch of MVC's talking

109
00:04:40,130 --> 00:04:41,370
to each other in a good way

110
00:04:41,370 --> 00:04:42,950
Well, what the storyboard allows you to do is

111
00:04:42,950 --> 00:04:45,820
kinda see that on screen at the same time

112
00:04:45,820 --> 00:04:48,140
So, you can see how your MVC's are interacting

113
00:04:48,140 --> 00:04:49,660
It's really pretty cool

114
00:04:49,660 --> 00:04:52,720
And then automatic reference counting is even cooler

115
00:04:52,720 --> 00:04:55,580
Because in iOS4 you have to manage the memory

116
00:04:55,580 --> 00:04:58,700
for all of your objects yourself using reference counting

117
00:04:58,700 --> 00:04:59,990
and it was quite tedious

118
00:04:59,990 --> 00:05:02,990
And automatic reference counting the compiler does it for you

119
00:05:02,990 --> 00:05:05,810
OK. It manages all the memory... ah... you know

120
00:05:05,820 --> 00:05:08,550
When memory goes away, comes and goes

121
00:05:08,550 --> 00:05:11,050
just with that strong weak thing

122
00:05:11,050 --> 00:05:14,150
and it's quite remarkable, we'll always want this checked

123
00:05:14,150 --> 00:05:17,300
And then unit testing we might get to towards the end of quarter

124
00:05:17,300 --> 00:05:20,580
but we're not gonna be doing it right after that

125
00:05:20,580 --> 00:05:21,610
Right, so we click next

126
00:05:21,610 --> 00:05:24,900
now, it wants to know where you wanna store your project

127
00:05:24,900 --> 00:05:27,110
And I strongly recommend that

128
00:05:27,110 --> 00:05:28,920
you save it in a directory

129
00:05:28,920 --> 00:05:32,530
called developer inside you home directory

130
00:05:32,530 --> 00:05:34,430
So, here is my home directory, CS193P

131
00:05:34,430 --> 00:05:38,090
and here is the directory in it called developer

132
00:05:38,090 --> 00:05:41,060
and so you can use new folder to create that here

133
00:05:41,060 --> 00:05:43,860
if you don't already have it

134
00:05:43,860 --> 00:05:45,790
And so, when I click create here

135
00:05:45,790 --> 00:05:48,980
it's going to make the folder that contains my calculator

136
00:05:48,980 --> 00:05:50,480
that folder can be called calculator

137
00:05:50,480 --> 00:05:53,400
inside my home directory slash developer

138
00:05:53,400 --> 00:05:54,500
OK. This a great place

139
00:05:54,500 --> 00:05:56,730
highly recommended you put stuff here

140
00:05:56,730 --> 00:05:59,560
Down here you see source control

141
00:05:59,560 --> 00:06:01,960
We are definitely gonna talk about source control

142
00:06:01,960 --> 00:06:04,230
It is really well immigrated in the Xcode 4

143
00:06:04,230 --> 00:06:07,060
but we're not gonna do for this very first project

144
00:06:07,060 --> 00:06:09,140
so leave that unclicked

145
00:06:09,140 --> 00:06:12,160
So I'm clicking create here and uhm... boom

146
00:06:12,160 --> 00:06:13,270
It created our project

147
00:06:13,270 --> 00:06:16,170
Now, this first, this initial screen

148
00:06:16,180 --> 00:06:18,280
I'm gonna go full screen, I'm running Y in here

149
00:06:18,280 --> 00:06:19,810
So I'm gonna go full screen

150
00:06:19,810 --> 00:06:23,320
This a lot of stuff on screen right here, all icons and stuff

151
00:06:23,320 --> 00:06:24,670
but that's only half it

152
00:06:24,670 --> 00:06:27,600
There's all these settings, build rules, build phase all these

153
00:06:27,600 --> 00:06:28,870
We can't...

154
00:06:28,870 --> 00:06:30,670
we're gonna get into all these as the quarter is on

155
00:06:30,670 --> 00:06:34,010
but we are not gonna talk about any of these today

156
00:06:34,010 --> 00:06:36,930
We are gonna focus on though is on left

157
00:06:36,930 --> 00:06:40,240
If you look on the left of this area here called the navigator

158
00:06:40,240 --> 00:06:42,810
and it shows you all the files that are in your project

159
00:06:42,810 --> 00:06:45,050
and you can group them by folders and things like that

160
00:06:45,050 --> 00:06:46,630
We'll see that as the course goes on as well

161
00:06:46,630 --> 00:06:49,710
And we're not gonna look at any of these except

162
00:06:49,710 --> 00:06:51,250
for these three files right

163
00:06:51,250 --> 00:06:52,950
MainsStoryboard.storyboard

164
00:06:52,950 --> 00:06:53,590
You see that?

165
00:06:53,590 --> 00:06:55,570
And then Calculator.ViewController.m

166
00:06:55,570 --> 00:06:56,790
and Calculator.ViewController.h

167
00:06:56,790 --> 00:06:59,140
OK. So, MainsStoryboard.storyboard

168
00:06:59,140 --> 00:07:02,490
That's our view for our MVCs

169
00:07:02,490 --> 00:07:04,890
That can be in fact, all our views for all our MVCs are

170
00:07:04,890 --> 00:07:07,110
falling into our main board in this class

171
00:07:07,110 --> 00:07:08,810
You could have multiple storyboards and stuff

172
00:07:08,810 --> 00:07:11,760
right here in your MVC into group but that's gonna be

173
00:07:11,760 --> 00:07:13,610
you know, a pretty serious application to have that many

174
00:07:13,610 --> 00:07:16,320
So in our case our storyboard is gonna

175
00:07:16,320 --> 00:07:19,450
contain all the views for our controllers

176
00:07:19,450 --> 00:07:21,540
and then calculatorviewcontroller.m

177
00:07:21,540 --> 00:07:22,100
and Calculator.ViewController.h

178
00:07:22,100 --> 00:07:25,380
Do you remember from last lecture when we had the class

179
00:07:25,380 --> 00:07:27,940
and had a header file .h and it had implementation file .m

180
00:07:27,940 --> 00:07:30,160
so those are the two files

181
00:07:30,160 --> 00:07:32,450
So this is the controller, this is our view

182
00:07:32,450 --> 00:07:34,960
and we're going to create our model later

183
00:07:34,960 --> 00:07:37,740
It doesn't create model for you... you know where...

184
00:07:37,740 --> 00:07:39,150
what's you doing there

185
00:07:39,150 --> 00:07:41,120
So let's start with our storyboard

186
00:07:41,120 --> 00:07:47,760
Let's click on the storyboard and this view, this comes up

187
00:07:47,760 --> 00:07:50,240
You're gonna see here is blank

188
00:07:50,240 --> 00:07:52,520
So this is the view for our controller

189
00:07:52,520 --> 00:07:54,930
and it's blank so you can see it kinda iPhone size

190
00:07:54,940 --> 00:07:56,250
We'll do a lot of talking

191
00:07:56,250 --> 00:07:57,670
about sizing

192
00:07:57,670 --> 00:08:00,230
and stuff like later in the quarter

193
00:08:00,230 --> 00:08:02,810
but for now it kinda picking up a nice size

194
00:08:02,810 --> 00:08:04,370
An iPhone size

195
00:08:04,370 --> 00:08:08,440
This little area here is for browsing all the objects in the view

196
00:08:08,440 --> 00:08:10,060
looking them by name

197
00:08:10,060 --> 00:08:12,270
essentially it's just the top level view right here

198
00:08:12,280 --> 00:08:14,580
We're not going to look at that in the class today

199
00:08:14,580 --> 00:08:15,770
But when you're doing your walk through

200
00:08:15,770 --> 00:08:19,120
you can certainly pay attention to that

201
00:08:19,120 --> 00:08:21,350
Slide that close up button to make it go away

202
00:08:21,350 --> 00:08:25,040
I also don't need this navigator up here all the time

203
00:08:25,040 --> 00:08:27,850
It's wasting valuable screen real state here

204
00:08:27,850 --> 00:08:29,960
So I'm gonna start using these buttons in the upper right

205
00:08:29,960 --> 00:08:31,810
You see it here with an editor and view

206
00:08:31,820 --> 00:08:34,750
These are for managing what's on screen

207
00:08:34,750 --> 00:08:37,930
OK. And so by clicking this one right here

208
00:08:37,930 --> 00:08:39,650
it says hide and show navigator

209
00:08:39,650 --> 00:08:42,750
I get a lot more screen state back

210
00:08:42,750 --> 00:08:44,820
Now, what I really like is

211
00:08:44,820 --> 00:08:47,920
in addition to having my view on screen right here

212
00:08:47,920 --> 00:08:51,330
I like to have my controllers code on screen at same time

213
00:08:51,330 --> 00:08:53,540
side by side so I can work with them together

214
00:08:53,540 --> 00:08:54,740
because they go together

215
00:08:54,740 --> 00:08:56,560
The view is the controller's minion. Right?

216
00:08:56,560 --> 00:08:59,140
And I can do that with this icon right here

217
00:08:59,140 --> 00:09:01,640
It looks a little bit like a tuxedo

218
00:09:01,640 --> 00:09:02,910
It looks like a butler or something

219
00:09:02,910 --> 00:09:06,170
This is you assistant editor, and if you click that

220
00:09:06,170 --> 00:09:09,090
it's gonna have two places on screen

221
00:09:09,090 --> 00:09:11,120
To view two related things

222
00:09:11,130 --> 00:09:12,790
It's important to realize that

223
00:09:12,790 --> 00:09:15,160
it's trying to Xcode as you move around

224
00:09:15,160 --> 00:09:17,190
It's trying to keep these two things being related

225
00:09:17,190 --> 00:09:20,680
We'll see that a little bit as we go along

226
00:09:20,680 --> 00:09:22,970
and this bar in the middle can be moved

227
00:09:22,970 --> 00:09:25,110
Right, so you can make more space

228
00:09:25,110 --> 00:09:26,720
Move your view all to the sides

229
00:09:26,720 --> 00:09:28,360
to get as much room for the codes

230
00:09:28,360 --> 00:09:29,800
I've got very large font here

231
00:09:29,800 --> 00:09:31,290
So you can all see it

232
00:09:31,290 --> 00:09:35,230
So I'm gonna make much space as possible there

233
00:09:35,230 --> 00:09:38,640
Now, you should recognize this view controller.h

234
00:09:38,640 --> 00:09:41,640
from our last lecture

235
00:09:41,640 --> 00:09:43,260
Here is that interface

236
00:09:43,260 --> 00:09:45,680
Here's our superclass. Our super class

237
00:09:45,680 --> 00:09:48,110
imported from this framework UIkit file like

238
00:09:48,110 --> 00:09:49,400
talk about UIkit

239
00:09:49,400 --> 00:09:53,200
And we current don't have any public API here. Right?

240
00:09:53,200 --> 00:09:55,600
And we'll look at our implementation file in a moment

241
00:09:55,600 --> 00:09:58,490
So we're gonna dive right into building our user interface

242
00:09:58,490 --> 00:09:59,580
for our calculator

243
00:09:59,580 --> 00:10:00,690
To do that

244
00:10:00,690 --> 00:10:04,380
we obviously need some bottons, tags, label areas

245
00:10:04,380 --> 00:10:06,380
so that we can display them on our calculator

246
00:10:06,380 --> 00:10:11,240
and all of that comes from this little bottom on the right

247
00:10:11,240 --> 00:10:12,720
in upper right corner here

248
00:10:12,720 --> 00:10:14,090
when you click on that

249
00:10:14,090 --> 00:10:16,540
it will bring another little space

250
00:10:16,540 --> 00:10:19,910
and this space again has top part and a bottom part

251
00:10:19,920 --> 00:10:23,340
This top part is... is called inspector

252
00:10:23,340 --> 00:10:27,270
and it's for finding out all information about what's selected

253
00:10:27,270 --> 00:10:28,980
So if I select on my view here

254
00:10:28,980 --> 00:10:30,670
I am gonna get information about my view...

255
00:10:30,670 --> 00:10:32,240
these are view attributes

256
00:10:32,240 --> 00:10:35,280
We have no time to go in what all these are today

257
00:10:35,280 --> 00:10:36,400
but... as the course go on

258
00:10:37,420 --> 00:10:38,910
and in the bottom is...

259
00:10:38,910 --> 00:10:40,800
you can think it's like a pallet, OK

260
00:10:40,810 --> 00:10:44,900
A pallet of things that you gonna paint your view with... even as...

261
00:10:44,900 --> 00:10:46,390
it's a pallet that has things like codes

262
00:10:46,390 --> 00:10:48,570
snippets, things like that... as well

263
00:10:48,570 --> 00:10:50,740
and down here were gonna want this...

264
00:10:50,740 --> 00:10:53,820
you can see these different pallet things are here

265
00:10:53,820 --> 00:10:56,100
we're gonna want this one, the one looks like an object

266
00:10:56,100 --> 00:10:59,440
Cause we want an object library here to choose from

267
00:10:59,440 --> 00:11:01,090
Cause we want get our buttons and stuff like that

268
00:11:01,090 --> 00:11:02,970
so if you look at this object library

269
00:11:02,980 --> 00:11:04,460
there is quite big bunch of stuff in here

270
00:11:04,460 --> 00:11:07,840
so sliders and switches and web views and table views and all that...

271
00:11:07,840 --> 00:11:10,880
we will cover it all... in this quarter before were done

272
00:11:10,880 --> 00:11:14,320
But the one we want here is just called label, right?

273
00:11:14,320 --> 00:11:17,110
Label is... a static, read only text field

274
00:11:17,110 --> 00:11:19,440
and if you wanna pop one into your view

275
00:11:19,440 --> 00:11:20,640
your controllers view

276
00:11:20,650 --> 00:11:24,340
you just pick the mouse and when you start to drag it

277
00:11:24,340 --> 00:11:27,560
you can see its kind... a... getting faded and a...

278
00:11:27,560 --> 00:11:30,200
and try drag it all way towards my view

279
00:11:30,200 --> 00:11:34,510
you can see there is actually little dash blue lines to

280
00:11:34,510 --> 00:11:36,370
help you line things up, right?

281
00:11:36,370 --> 00:11:38,330
so make sure not too close to an edge

282
00:11:38,330 --> 00:11:40,920
or if you wanna right in the middle, things like that

283
00:11:40,920 --> 00:11:44,410
so we use the blue lines and put it right here

284
00:11:44,410 --> 00:11:46,800
this label is a good start

285
00:11:46,810 --> 00:11:49,590
but doesn't look much like a calculator display to me

286
00:11:49,590 --> 00:11:52,190
so we have some work to do on this thing

287
00:11:52,190 --> 00:11:53,680
First, its format is to small

288
00:11:53,680 --> 00:11:56,760
we don't wanna it in this upper left corner like that

289
00:11:56,770 --> 00:11:59,170
so do you see little handles around the edges?

290
00:11:59,170 --> 00:12:03,200
I can pick these up and move it, resize it

291
00:12:03,200 --> 00:12:05,010
and so I can even use these blue lines here

292
00:12:05,010 --> 00:12:08,200
to get this to be some sizes that I want

293
00:12:08,210 --> 00:12:11,060
till maybe I don't know, 40 pixels high or something like that

294
00:12:11,060 --> 00:12:13,560
We also don't want this to be left aligned

295
00:12:13,560 --> 00:12:15,470
In any calculators you ever seen, right

296
00:12:15,470 --> 00:12:16,860
the numbers are right aligned

297
00:12:16,860 --> 00:12:19,200
they came up in right side of the screen

298
00:12:19,200 --> 00:12:20,050
so how do we do that?

299
00:12:20,050 --> 00:12:23,150
Well, now we are looking at the inspector over here on the right

300
00:12:23,150 --> 00:12:24,390
the attributes inspector

301
00:12:24,390 --> 00:12:26,550
and you can see all kinds of things we can set

302
00:12:26,550 --> 00:12:28,850
including the alignment of the text

303
00:12:28,860 --> 00:12:31,080
so I'm just gonna click on this to right align it

304
00:12:31,080 --> 00:12:33,010
I also see the font right here

305
00:12:33,020 --> 00:12:34,550
so I use that to make this little bigger

306
00:12:34,550 --> 00:12:37,590
maybe 24 point or so I can see it better...

307
00:12:37,600 --> 00:12:38,680
and I certainly don't wanna

308
00:12:38,680 --> 00:12:40,680
the word label coming up in my calculator

309
00:12:40,680 --> 00:12:42,830
so I can just double click directly on it

310
00:12:42,830 --> 00:12:45,100
change it to a zero, that might be good

311
00:12:45,100 --> 00:12:47,230
that's probably good starting value

312
00:12:47,230 --> 00:12:48,920
and, so just like that

313
00:12:48,920 --> 00:12:53,060
I have a text label that is going to be used for my display

314
00:12:53,060 --> 00:12:56,810
And now, I need to be able to talk to this thing though, all right?

315
00:12:56,810 --> 00:13:01,700
And in fact if you remember from the MVC picture we had before

316
00:13:01,700 --> 00:13:04,090
the green outlet is the arrow

317
00:13:04,090 --> 00:13:07,170
which has our controller talking to objects in the view

318
00:13:07,170 --> 00:13:10,120
and our controller definitely needs to talk to this display

319
00:13:10,120 --> 00:13:12,770
It needs to tell it what to display, right?

320
00:13:12,770 --> 00:13:14,330
Tell the results of calculations

321
00:13:14,330 --> 00:13:15,750
and also add your typing numbers

322
00:13:15,750 --> 00:13:17,730
it needs to be updating, all right?

323
00:13:17,730 --> 00:13:22,840
So we're creating an outlet from our controller into our view

324
00:13:22,840 --> 00:13:24,710
so let's go do that

325
00:13:24,710 --> 00:13:29,330
The way you do this is not by typing codes and all that stuff

326
00:13:29,330 --> 00:13:31,030
you actually do this with the mouse

327
00:13:31,030 --> 00:13:33,250
So the magic thing here with this finger is

328
00:13:33,250 --> 00:13:35,520
I'm holding down the control key on my keyboard

329
00:13:35,520 --> 00:13:37,030
don't forget to do this, OK?

330
00:13:37,030 --> 00:13:38,230
Gotta hold down the control key

331
00:13:38,240 --> 00:13:40,250
and then you just control

332
00:13:40,250 --> 00:13:46,020
and drag a line from the display into your code

333
00:13:46,020 --> 00:13:47,180
I know this seems weird

334
00:13:47,180 --> 00:13:49,780
I am mixing graphical with the code

335
00:13:49,780 --> 00:13:52,000
but it's really pretty cool actually, when you used to it

336
00:13:52,000 --> 00:13:54,430
So were gonna drag it in here and let it go

337
00:13:54,430 --> 00:13:57,590
and it's gonna say oh, your wanna create an outlet

338
00:13:57,600 --> 00:13:59,310
you see, right there the connection is Outlet

339
00:13:59,310 --> 00:14:02,640
and it noticed that you wanna create it to your controller of course

340
00:14:02,640 --> 00:14:05,860
and you noticed that UILabel

341
00:14:05,860 --> 00:14:08,560
this is connection from your UILabel to a controller

342
00:14:08,560 --> 00:14:11,020
and the storage here is strong

343
00:14:11,020 --> 00:14:13,460
but actually I am gonna make this storage...

344
00:14:13,460 --> 00:14:16,080
this is the property thing we talking about...

345
00:14:16,080 --> 00:14:17,770
I'm gonna make the storage, this pointer

346
00:14:17,770 --> 00:14:19,490
Cause it's gonna be a pointer to an object

347
00:14:19,490 --> 00:14:21,370
the pointer to UIlabel, I'm gonna make it weak

348
00:14:21,370 --> 00:14:23,930
And why I'm gonna make it weak here?

349
00:14:23,930 --> 00:14:27,390
Because this label already has strong pointers to it

350
00:14:27,390 --> 00:14:29,450
because it's in that window, OK?

351
00:14:29,450 --> 00:14:35,590
That window, which is the super view basically of that label

352
00:14:35,590 --> 00:14:37,020
already has a strong pointer to it

353
00:14:37,020 --> 00:14:38,890
and if it doesn't have one strong pointer to it

354
00:14:38,890 --> 00:14:41,130
then I don't need one update to display

355
00:14:41,130 --> 00:14:44,680
because, you know, if it's in the window I mean running around

356
00:14:44,680 --> 00:14:47,080
so I only need weak pointer to this

357
00:14:47,080 --> 00:14:50,620
I don't need that label stay around unless it's in the view, right?

358
00:14:50,620 --> 00:14:52,010
So I make that weak

359
00:14:52,010 --> 00:14:53,850
and usually outlets were gonna make weak

360
00:14:53,850 --> 00:14:55,510
they are... almost always weak

361
00:14:55,520 --> 00:14:58,530
And it also wants know the name for this outlet

362
00:14:58,530 --> 00:15:00,230
and since it's display of my calculator

363
00:15:00,230 --> 00:15:02,270
I'm just gonna call it display

364
00:15:02,270 --> 00:15:03,730
All right, so I click connect

365
00:15:03,730 --> 00:15:06,520
and you can see that it has made a property

366
00:15:06,520 --> 00:15:11,610
Hopefully, you recognize this syntax from last time, right?

367
00:15:11,610 --> 00:15:13,010
Here is property... it's a property

368
00:15:13,010 --> 00:15:15,380
it's weak, not strong, but weak

369
00:15:15,380 --> 00:15:16,490
Nonatomic

370
00:15:16,490 --> 00:15:19,180
It is just not thread safe, we don't care

371
00:15:19,180 --> 00:15:22,130
We do have this little word right here, IBOutlet

372
00:15:22,130 --> 00:15:26,980
This is typed out to nothing, all this is an exposure in there

373
00:15:26,980 --> 00:15:29,440
so it can keep track of which properties are outlets

374
00:15:29,440 --> 00:15:32,410
but in this part even don't look at this OK?

375
00:15:32,410 --> 00:15:35,530
This is typed out to nothingness, so we don't worry about that

376
00:15:35,530 --> 00:15:39,950
And then here is the type of this property, its UI label *, right?

377
00:15:39,950 --> 00:15:41,430
The pointer to UIlabel

378
00:15:41,430 --> 00:15:43,070
which is exactly what is this

379
00:15:43,070 --> 00:15:46,110
And this is the name of the property, which is display

380
00:15:46,120 --> 00:15:48,090
Now what's really cool here is

381
00:15:48,090 --> 00:15:51,120
you noticed this round circle to the left

382
00:15:51,120 --> 00:15:53,040
and if you mouse over

383
00:15:53,040 --> 00:15:55,540
you don't need to click on it, just mouse over it

384
00:15:55,540 --> 00:15:56,450
it will show you

385
00:15:56,450 --> 00:16:01,250
what view this display property is hooked up to, OK?

386
00:16:01,250 --> 00:16:04,180
So that's a cool way, in flash you get bunch of properties

387
00:16:04,180 --> 00:16:07,410
It's really cool to see which ones are connected to what

388
00:16:07,410 --> 00:16:10,880
All right, so this is the declaration of this property

389
00:16:10,880 --> 00:16:13,830
Let's go look at the implementation of this property

390
00:16:13,840 --> 00:16:16,160
To do that, we are gonna switch over

391
00:16:16,160 --> 00:16:18,590
from CalculatorViewerControler.H

392
00:16:18,590 --> 00:16:20,240
to CalculatorViewerControler.M

393
00:16:20,240 --> 00:16:22,670
I'm doing this just by going to this top bar viewer here

394
00:16:22,670 --> 00:16:25,970
clicking on the name and switching it to the .M

395
00:16:25,970 --> 00:16:29,780
I will make a little more space here, this over again

396
00:16:29,780 --> 00:16:32,080
and you can see that the template

397
00:16:32,080 --> 00:16:35,290
for our view controller is put bunch of stuff in here

398
00:16:35,290 --> 00:16:38,500
We don't wanna any of this, OK? So we are gonna get rid of all of that

399
00:16:38,510 --> 00:16:40,100
We do want this though

400
00:16:40,100 --> 00:16:41,280
You see that it added

401
00:16:41,280 --> 00:16:45,570
the implementation of our property as a synthesized display

402
00:16:45,570 --> 00:16:48,860
Didn't quite do it the way we want, but it's a good start

403
00:16:48,860 --> 00:16:51,940
but everything else in this file I'm just gonna delete, all right

404
00:16:51,940 --> 00:16:54,340
cause none of it... we're not gonna use any of it...

405
00:16:54,340 --> 00:16:58,210
in our first application here. So I'm deleting that...

406
00:16:58,210 --> 00:17:00,420
The space is very...

407
00:17:00,420 --> 00:17:04,450
This is clear now, what has Xcode not done here though

408
00:17:04,450 --> 00:17:07,670
It hasn't done what I say you always need to do

409
00:17:07,670 --> 00:17:09,730
which is to use the equal sign

410
00:17:09,730 --> 00:17:12,930
to specify a name for the instance variable

411
00:17:12,930 --> 00:17:14,820
that is gonna be used to store that pointer

412
00:17:14,820 --> 00:17:18,230
to be something else besides the name of the instance variable

413
00:17:18,230 --> 00:17:21,330
Student: (INAUDIBLE)

414
00:17:21,330 --> 00:17:22,360
The question is

415
00:17:22,360 --> 00:17:24,890
do I wanna delete that stuff from the template all the time?

416
00:17:24,890 --> 00:17:25,780
It depends

417
00:17:25,780 --> 00:17:27,120
Your gonna find later in the quarter

418
00:17:27,130 --> 00:17:28,890
You are gonna use some of it, you know

419
00:17:28,890 --> 00:17:31,000
It all step down. It actually doesn't really do anything

420
00:17:31,000 --> 00:17:33,120
just like those methods that are for you to fill in

421
00:17:33,120 --> 00:17:34,960
So it can be up to you

422
00:17:34,960 --> 00:17:36,110
If you would left them in there

423
00:17:36,110 --> 00:17:37,250
it would not done any damage

424
00:17:37,260 --> 00:17:39,590
it would not hurt anything, but I just want you to be clear codes

425
00:17:39,590 --> 00:17:42,300
you can see what's going on

426
00:17:42,300 --> 00:17:46,140
so we, since we start our display, that's awesome, OK?

427
00:17:46,140 --> 00:17:48,740
So our controllers ready to talk now

428
00:17:48,740 --> 00:17:51,910
to our label here anytime it wants to

429
00:17:51,910 --> 00:17:55,670
and remember, that synthesize creates the setter and the getter

430
00:17:55,670 --> 00:17:58,330
Now, when is the setter gonna be used for

431
00:17:58,340 --> 00:18:00,740
this property and when is the gatter. OK

432
00:18:00,740 --> 00:18:04,590
The setter is gonna be used by iOS to set this pointer

433
00:18:04,590 --> 00:18:06,630
when the storyboard gets loaded up

434
00:18:06,630 --> 00:18:08,160
this thing appears on the screen

435
00:18:08,160 --> 00:18:12,430
it's gonna call the setter to create that connection to that label

436
00:18:12,430 --> 00:18:15,090
The getter we're going to call in our code

437
00:18:15,100 --> 00:18:16,850
anytime we wanna talk to that label

438
00:18:16,850 --> 00:18:20,080
Call the gather, get the pointer to it, send the messages

439
00:18:20,090 --> 00:18:22,260
and you guys see that

440
00:18:22,260 --> 00:18:25,390
All right, what else do we need in our UI here besides the...

441
00:18:25,390 --> 00:18:28,780
this label? We also could really use some buttons, OK

442
00:18:28,780 --> 00:18:29,900
For example we need some buttons

443
00:18:29,900 --> 00:18:31,320
to be the keypad for our calculator

444
00:18:31,320 --> 00:18:33,370
from 0 to 9 buttons

445
00:18:33,370 --> 00:18:35,320
So I'm gonna go back over here

446
00:18:35,320 --> 00:18:40,000
get eh, my pallet of objects back and simple drag another label

447
00:18:40,000 --> 00:18:43,840
This time I'm gonna drag out this round rect button, OK?

448
00:18:43,840 --> 00:18:46,020
So I'm gonna drag this over here

449
00:18:46,020 --> 00:18:48,160
you can see the blue lines are opening up again

450
00:18:48,160 --> 00:18:50,620
I'm gonna listen to the blue lines

451
00:18:50,620 --> 00:18:53,760
And I'm gonna resize this to be 64 pixel wide

452
00:18:53,760 --> 00:18:56,690
turns out to be very good size, turns out

453
00:18:56,690 --> 00:18:58,640
And aah

454
00:18:58,640 --> 00:19:00,130
so this would be the digit button

455
00:19:00,140 --> 00:19:02,440
this might be the 7 button, OK?

456
00:19:02,440 --> 00:19:05,800
In the upper left corner of a keypad, right here

457
00:19:05,800 --> 00:19:09,590
And now we need to think about a different kind of connection

458
00:19:09,590 --> 00:19:11,500
between our controller and our view

459
00:19:11,500 --> 00:19:13,120
which is this target action thing

460
00:19:13,120 --> 00:19:15,920
So we need kinda hang a target on our controller

461
00:19:15,920 --> 00:19:19,930
so that the buttons, these keypad buttons can send an action to it

462
00:19:19,930 --> 00:19:24,110
to get to do things. As... as... the user... oops

463
00:19:24,110 --> 00:19:28,870
As the user is... sorry... touching the... ah... the buttons

464
00:19:28,870 --> 00:19:31,150
So how do we do that? Same way as the outlet

465
00:19:31,150 --> 00:19:33,310
I'm gonna hold down control, right?

466
00:19:33,310 --> 00:19:36,270
And drag out... and this time

467
00:19:36,270 --> 00:19:38,050
it notices all what we're dragging to

468
00:19:38,050 --> 00:19:40,370
the implementation were probably gonna insert in action here

469
00:19:40,370 --> 00:19:41,730
and its right, we do

470
00:19:41,730 --> 00:19:44,830
And... So it notices it's now action

471
00:19:44,830 --> 00:19:47,360
We are not going to talk about the button stuff here yet

472
00:19:47,360 --> 00:19:49,290
but we do need to give this action a name

473
00:19:49,290 --> 00:19:52,290
and I'm gonna call this thing digitPressed

474
00:19:52,290 --> 00:19:53,780
because that's what it is

475
00:19:53,780 --> 00:19:57,850
after touching this button and its digit, a digit button

476
00:19:57,860 --> 00:20:01,490
So click connects here, and when we get this code

477
00:20:01,490 --> 00:20:05,220
We're gonna look at this code, to see what is all about

478
00:20:05,220 --> 00:20:08,720
This is the message declaration similar

479
00:20:08,720 --> 00:20:10,870
to what you saw on Tuesday's lecture

480
00:20:10,870 --> 00:20:14,200
This return type like need somewhat like disconcerting

481
00:20:14,200 --> 00:20:16,720
you might say IBAction what kind of type is that?

482
00:20:16,720 --> 00:20:20,710
Well, actually that type depth to void Alright

483
00:20:20,710 --> 00:20:23,240
Target and action just do not return any value

484
00:20:23,240 --> 00:20:27,730
The reason this is type IBaction instead of void is again

485
00:20:27,730 --> 00:20:30,250
just like the IBOutlet. It's just in there so that the Xcode remember

486
00:20:30,250 --> 00:20:33,900
oh yeah, yeah this is an action or it is just a random message

487
00:20:33,900 --> 00:20:37,020
with that kind of arrangement of argument

488
00:20:37,020 --> 00:20:39,880
This is the name of the action digitPressed, colon

489
00:20:39,880 --> 00:20:44,860
this is the type of its argument OK

490
00:20:44,860 --> 00:20:46,500
So, this is very important what's going on here

491
00:20:46,500 --> 00:20:49,700
This target action message when the button gets touched

492
00:20:49,700 --> 00:20:54,250
and it sents this message to our controller along with an argument

493
00:20:54,250 --> 00:20:57,650
and the argument is the object sending us the message

494
00:20:57,650 --> 00:21:00,440
the sender, a button in this case

495
00:21:00,440 --> 00:21:04,590
So you might be saying what is that id in there, OK

496
00:21:04,590 --> 00:21:10,010
What is id and in objective C id is a very important type

497
00:21:10,010 --> 00:21:11,860
OK to type...

498
00:21:11,860 --> 00:21:16,560
primitive type essentially but built in type to objective C

499
00:21:16,560 --> 00:21:21,110
And what id is pointer to any kind of object

500
00:21:21,110 --> 00:21:25,940
or you can make it to pointer to unknown class of object OK

501
00:21:25,940 --> 00:21:29,060
So, any object could be passed on here

502
00:21:29,060 --> 00:21:32,170
Now, that can be a good thing

503
00:21:32,170 --> 00:21:34,260
as we'll see next week in you homework assignment

504
00:21:34,270 --> 00:21:37,210
or it can some time not be a good thing

505
00:21:37,210 --> 00:21:39,640
Today, I'm gonna leave that id right now

506
00:21:39,640 --> 00:21:41,580
but I'm gonna change it and you're gonna see

507
00:21:41,580 --> 00:21:44,900
why it was good and why it was bad. Alright

508
00:21:44,900 --> 00:21:46,890
So, I need more of these keypad buttons

509
00:21:46,890 --> 00:21:48,790
Actually, I'm gonna copy and paste

510
00:21:48,790 --> 00:21:53,170
Copy and paste, copy paste

511
00:21:53,170 --> 00:21:56,720
We use the blue lines. I can actually copy three at a time

512
00:21:56,720 --> 00:22:01,200
Paste those. OK. Paste another three

513
00:22:01,210 --> 00:22:08,100
Quickly build up, ooops, my keypad. Alright

514
00:22:08,100 --> 00:22:11,360
And then change the title just by directly double click on them

515
00:22:11,360 --> 00:22:29,790
8 this one is 9, 4, 5, 6, 1, 2, 3 and 0 OK

516
00:22:29,790 --> 00:22:33,940
Now, one thing that is interesting to note here

517
00:22:34,360 --> 00:22:35,920
one thing that is interesting to note

518
00:22:35,920 --> 00:22:39,080
what's going on here is that all of these buttons are gonna send

519
00:22:39,080 --> 00:22:41,680
the same target action message

520
00:22:41,680 --> 00:22:44,930
When you copy and paste the button

521
00:22:44,930 --> 00:22:50,500
it copies and pastes its, its, copies and pastes its target action

522
00:22:50,500 --> 00:22:53,510
So, if I put my mouse over this @property

523
00:22:53,510 --> 00:22:57,790
remember we saw the label and it I go into the implementation file

524
00:22:57,790 --> 00:23:03,270
and put it over this, all the buttons are sending this message

525
00:23:03,270 --> 00:23:04,170
Makes sense

526
00:23:04,170 --> 00:23:06,630
That is because I copied and pasted them

527
00:23:06,630 --> 00:23:09,230
So, when we have operation buttons and the enter button

528
00:23:09,230 --> 00:23:11,600
we don't want to copy the digit button

529
00:23:11,600 --> 00:23:12,500
or we'll be sending that

530
00:23:12,500 --> 00:23:15,150
and yes a button can send multiple messages here

531
00:23:15,150 --> 00:23:16,890
So you certainly wouldn't want your operation button

532
00:23:16,890 --> 00:23:20,120
sending digitPressed and operationPress at the same time

533
00:23:20,120 --> 00:23:21,810
OK So, we're gonna be careful

534
00:23:21,810 --> 00:23:23,330
not to copy and paste digit buttons

535
00:23:23,340 --> 00:23:25,660
to make operation button OK

536
00:23:25,660 --> 00:23:28,580
So, let's start with our implementation of digitPressed

537
00:23:28,580 --> 00:23:31,580
OK So, we're gonna start here some objective C type here

538
00:23:31,580 --> 00:23:33,610
So, I'm gonna create a local variable

539
00:23:33,610 --> 00:23:38,780
which is a pointer to a string object

540
00:23:38,780 --> 00:23:43,570
OK So, NSString* means pointer to an NSString

541
00:23:43,570 --> 00:23:46,420
digit is the name of the local variable. By the way

542
00:23:46,420 --> 00:23:49,520
obviously, arguments are show of like, they look like the

543
00:23:49,520 --> 00:23:51,310
local variable inside your implementation

544
00:23:51,310 --> 00:23:52,720
just like in any other language

545
00:23:52,720 --> 00:23:54,110
So, we have local variable

546
00:23:54,110 --> 00:23:57,800
called sender which is object that sends this message

547
00:23:57,810 --> 00:24:00,240
Now, what I'm gonna do here to get the digit

548
00:24:00,240 --> 00:24:02,260
so I know which digit was pressed

549
00:24:02,260 --> 00:24:04,040
that I'm gonna send a message back to the sender

550
00:24:04,040 --> 00:24:07,110
and I'm gonna ask you what's its current title is

551
00:24:07,110 --> 00:24:09,320
That time I'm gonna know what button was pressed

552
00:24:09,320 --> 00:24:12,560
so [ to send the message in objective-C

553
00:24:12,560 --> 00:24:14,960
Sender is the pointer to the object

554
00:24:14,960 --> 00:24:16,360
that I wanna send the message to

555
00:24:16,360 --> 00:24:18,260
which is the object that sends me this

556
00:24:18,260 --> 00:24:21,920
And now, as I start typing, look what happens

557
00:24:21,920 --> 00:24:24,770
OK So, I typed C, U

558
00:24:24,770 --> 00:24:28,180
and I start objective C with the Xcode

559
00:24:28,180 --> 00:24:30,280
It showing me all the messages

560
00:24:30,290 --> 00:24:33,660
that I know about that start with CU and there's quite a few

561
00:24:33,660 --> 00:24:36,810
But most of these are not button messages

562
00:24:36,810 --> 00:24:39,700
I cannot send this my currencySymbol

563
00:24:39,700 --> 00:24:42,010
that's not a button, message

564
00:24:42,010 --> 00:24:47,400
or a currentRequest, currentMinimumTrackImage

565
00:24:47,400 --> 00:24:49,730
these are not UI button message

566
00:24:49,730 --> 00:24:52,220
So, these are a lot of junk right here

567
00:24:52,220 --> 00:24:53,640
and if I type one of these

568
00:24:53,640 --> 00:24:55,800
I wouldn't get an error but it would be wrong

569
00:24:55,800 --> 00:25:01,220
So, this is where id can be a problem as a type, right?

570
00:25:01,220 --> 00:25:03,490
We know that we only

571
00:25:03,490 --> 00:25:06,380
this code only work if a button sends it to us

572
00:25:06,380 --> 00:25:08,680
Like the slider sends it to us its not gonna work

573
00:25:08,680 --> 00:25:10,070
cause we're gonna ask for a thing for its current title

574
00:25:10,080 --> 00:25:11,670
and the slider doesn't have a current title

575
00:25:11,670 --> 00:25:14,320
So that's gonna crash, all crash my apps even

576
00:25:14,320 --> 00:25:17,420
So, I can change the id here to be

577
00:25:17,420 --> 00:25:20,420
UIButton*, pointer to a button

578
00:25:20,420 --> 00:25:23,870
When I do that and I go back here and I type CU

579
00:25:23,870 --> 00:25:28,670
now I'm only seeing message here that button response to

580
00:25:28,670 --> 00:25:32,190
these five... Alright, currentTitle, currentImage etc

581
00:25:32,190 --> 00:25:33,680
And in fact, I can pick one of them

582
00:25:33,680 --> 00:25:35,300
like the currentTitle which is the one I want

583
00:25:35,300 --> 00:25:36,450
And then use the tab key

584
00:25:36,450 --> 00:25:37,550
I'm using the tab key

585
00:25:37,550 --> 00:25:41,800
now to finish these messages completion based with a tab completion

586
00:25:41,800 --> 00:25:43,760
and ]

587
00:25:43,770 --> 00:25:47,120
Alright So, now I got the title of the button

588
00:25:47,120 --> 00:25:52,350
and I copied it into this local variable, digit

589
00:25:52,360 --> 00:25:55,140
and what I'm gonna do here

590
00:25:55,140 --> 00:25:58,120
real quick to show you a little debugging tip is

591
00:25:58,120 --> 00:26:02,190
I'm gonna output I'm gonna send this digit to the console

592
00:26:02,200 --> 00:26:05,450
OK, cause that's a really easy way to debug

593
00:26:05,450 --> 00:26:09,820
Most languages maybe have done this way of debugging

594
00:26:09,820 --> 00:26:11,920
It's little easier than setting Boolean, break point

595
00:26:11,920 --> 00:26:13,640
and setting through and looking at variables

596
00:26:13,640 --> 00:26:15,090
This way you can just print things

597
00:26:15,090 --> 00:26:16,400
So, I'm just gonna do that

598
00:26:16,400 --> 00:26:18,790
and the way you do that is with the function

599
00:26:18,790 --> 00:26:19,590
This not message

600
00:26:19,600 --> 00:26:21,290
This function is called NSLog

601
00:26:21,290 --> 00:26:23,660
NSLog is just like printf...

602
00:26:23,660 --> 00:26:25,600
you all know printf is?

603
00:26:25,600 --> 00:26:26,860
Except for that

604
00:26:26,860 --> 00:26:27,820
instead of taking a

605
00:26:27,820 --> 00:26:30,710
a const char * string which is a formatting string

606
00:26:30,710 --> 00:26:32,570
it takes an NSString

607
00:26:32,570 --> 00:26:38,600
and the way we specify a constant NSString is @"

608
00:26:38,600 --> 00:26:42,620
OK So @" this is a constant NSString

609
00:26:42,630 --> 00:26:46,760
and we can put inside something like digitPressed =

610
00:26:46,760 --> 00:26:49,350
and then we can put a percent format

611
00:26:49,350 --> 00:26:52,890
like %d for interger, %g for floating point

612
00:26:52,890 --> 00:26:55,170
We never use %s

613
00:26:55,180 --> 00:26:58,040
cause %s is const char * or char

614
00:26:58,040 --> 00:27:02,550
OK But we do use a very special new one called %@ sign

615
00:27:02,550 --> 00:27:04,840
Now, %@ sign means the argument

616
00:27:04,840 --> 00:27:08,660
that corresponds to this print out formatting thing is an object

617
00:27:08,660 --> 00:27:11,520
Alright And what NSLog is gonna do is

618
00:27:11,520 --> 00:27:14,640
it's gonna send the message description, very special message

619
00:27:14,640 --> 00:27:16,650
it's gonna send the message description to that object

620
00:27:16,650 --> 00:27:19,650
That description message has to return an NSString

621
00:27:19,650 --> 00:27:21,190
and is gonna use that NSString

622
00:27:21,190 --> 00:27:25,950
to display this particular %@ sign right here

623
00:27:25,950 --> 00:27:30,930
Now, NSString returns itself from the description message

624
00:27:30,930 --> 00:27:33,360
That makes sense to everybody? Why it does that?

625
00:27:33,360 --> 00:27:35,630
Cause it supposed to return a string describing itself

626
00:27:35,630 --> 00:27:37,590
and it is a string so it returns itself

627
00:27:37,590 --> 00:27:40,270
So here we can just say digit

628
00:27:40,270 --> 00:27:43,430
and we'll get whatever string is in the digit

629
00:27:43,430 --> 00:27:44,470
which will be the currentTitle of the button

630
00:27:44,470 --> 00:27:46,990
So, let's gonna run our program for the first time

631
00:27:46,990 --> 00:27:50,710
And see if it is working. So, to run our program

632
00:27:50,710 --> 00:27:53,680
we go to this button to the upper left hand corner called run

633
00:27:53,690 --> 00:27:56,460
And it looks like a play button and we hit play

634
00:27:56,460 --> 00:27:58,420
And the first time we run it

635
00:27:58,420 --> 00:28:02,240
so its gonna be pre-compiling some headers

636
00:28:02,240 --> 00:28:04,800
and loading the framework and all that stuff

637
00:28:04,800 --> 00:28:07,640
So, you can see up there, it tells you what its doing up on the top

638
00:28:07,640 --> 00:28:11,780
It's pre-compiling one of prefix headers

639
00:28:11,780 --> 00:28:16,830
Xcode is really great about pre-compiling and caching things so there

640
00:28:16,830 --> 00:28:18,640
When you do something the second time

641
00:28:18,640 --> 00:28:20,910
its all as much, much quicker

642
00:28:20,910 --> 00:28:25,330
And here is linking, now its copying resources like our storyboard

643
00:28:25,330 --> 00:28:27,290
and any images stuff like that

644
00:28:27,290 --> 00:28:30,940
And it succeeded... now, we're gonna run this

645
00:28:30,940 --> 00:28:32,470
You can run this on the device

646
00:28:32,470 --> 00:28:33,400
If you look at this

647
00:28:33,400 --> 00:28:36,600
you see up here the calculator iPhone simulator 5.0

648
00:28:36,600 --> 00:28:40,390
you can run it on a simulator which is fine

649
00:28:40,390 --> 00:28:43,190
for your first five four five

650
00:28:43,190 --> 00:28:44,430
homework project

651
00:28:44,430 --> 00:28:47,730
or you can actually from this pop up pic to run on a device

652
00:28:47,730 --> 00:28:49,110
but if you run on a device

653
00:28:49,120 --> 00:28:52,960
you will need to join the developer program

654
00:28:52,960 --> 00:28:56,560
like the Apple developer or the University developer program

655
00:28:56,560 --> 00:29:02,130
So, actually I'm gonna go back and go into non full screen mode here

656
00:29:02,130 --> 00:29:04,920
so we can see both the code on the screen

657
00:29:04,920 --> 00:29:11,070
at the same time as the simulator

658
00:29:13,260 --> 00:29:22,080
And sorry right So here is our simulator

659
00:29:22,080 --> 00:29:25,300
So, the simulator, you know

660
00:29:25,300 --> 00:29:27,920
It's not exactly the same that runs something in the simulator

661
00:29:27,930 --> 00:29:29,400
as it is to run it on device

662
00:29:29,410 --> 00:29:32,970
but it's pretty darn close. So, here is that simulator

663
00:29:32,970 --> 00:29:36,720
It's going to load that storyboard up

664
00:29:36,720 --> 00:29:40,110
and run the application so here it is

665
00:29:40,110 --> 00:29:42,400
Now, before we start touching any of these buttons here

666
00:29:42,400 --> 00:29:44,500
in the simulator with a mouse

667
00:29:44,500 --> 00:29:46,470
I'm going to show you the console

668
00:29:46,470 --> 00:29:47,610
because the whole point here

669
00:29:47,610 --> 00:29:48,960
is we're got the NSLog in here

670
00:29:48,960 --> 00:29:50,290
This gonna place the console

671
00:29:50,290 --> 00:29:51,180
Where is the console?

672
00:29:51,180 --> 00:29:54,790
Well, when you look down here the very bottom of the screen

673
00:29:54,790 --> 00:29:58,160
this bar down here is the combination

674
00:29:58,160 --> 00:29:59,990
of the debugger and the console

675
00:29:59,990 --> 00:30:02,430
and when you run, it appears

676
00:30:02,430 --> 00:30:04,390
and when you stop, it disappears

677
00:30:04,390 --> 00:30:06,180
And if you wanna see more of it

678
00:30:06,180 --> 00:30:08,890
you can use this little button right here

679
00:30:08,890 --> 00:30:11,640
OK. You can also use this little button in lower left

680
00:30:11,640 --> 00:30:13,030
or we can use the one up here

681
00:30:13,030 --> 00:30:16,330
So we click that and it appears

682
00:30:16,330 --> 00:30:19,670
This is showing right now all the variables in the debugger

683
00:30:19,670 --> 00:30:22,050
local variables in this case, none

684
00:30:22,060 --> 00:30:23,580
You can have this little button right here

685
00:30:23,580 --> 00:30:26,020
to show that variables and the console

686
00:30:26,020 --> 00:30:27,640
Right. So you can move this thing

687
00:30:27,650 --> 00:30:29,280
or you can just say console only

688
00:30:29,280 --> 00:30:31,050
Like this, so here is the console

689
00:30:31,050 --> 00:30:32,750
Nothing has come out in the console

690
00:30:32,750 --> 00:30:35,450
Things that you generate will be bold in the console

691
00:30:35,450 --> 00:30:37,520
So let's go ahead and go to the simulator

692
00:30:37,520 --> 00:30:38,700
and type something here

693
00:30:38,700 --> 00:30:40,340
and see what happens in the console

694
00:30:40,340 --> 00:30:41,310
So, let's try 5

695
00:30:41,310 --> 00:30:43,720
and you can see digit pressed equals 5

696
00:30:43,720 --> 00:30:44,880
and every output

697
00:30:44,880 --> 00:30:46,020
every log time is here

698
00:30:46,020 --> 00:30:48,860
so the milliseconds there

699
00:30:48,860 --> 00:30:51,570
So you can see what's happening. Okay?

700
00:30:51,570 --> 00:30:52,290
So well we are going

701
00:30:52,300 --> 00:30:56,290
We ran our first app, very simple, very straight forward

702
00:30:56,290 --> 00:30:57,760
Alright. So let's stop that

703
00:30:57,760 --> 00:31:00,750
Let's go back to full screen mode

704
00:31:00,750 --> 00:31:03,420
Now, what we're gonna do is get rid of this thing NSLog

705
00:31:03,420 --> 00:31:06,620
and put the actual implementation of digit pressed

706
00:31:06,620 --> 00:31:09,390
Now, I'm gonna... we're a little behind on time

707
00:31:09,390 --> 00:31:10,860
so I'm gonna go to this pretty quickly

708
00:31:10,860 --> 00:31:12,910
This is really just one line of code

709
00:31:12,910 --> 00:31:14,640
is all we need for this digits pressed

710
00:31:14,640 --> 00:31:16,810
but I'm gonna break it up into two or three lines of code

711
00:31:16,820 --> 00:31:19,130
then we'll combine them and we'll see what's going on

712
00:31:19,130 --> 00:31:24,250
So first I'm gonna create a local variable UILabel

713
00:31:24,260 --> 00:31:25,810
called myLabel

714
00:31:25,810 --> 00:31:29,840
or maybe better call myDisplay possibly

715
00:31:29,840 --> 00:31:33,680
And the way I'm gonna get the value and put into this pointer is

716
00:31:33,680 --> 00:31:41,220
I'm going to send the getter for the outlet

717
00:31:41,220 --> 00:31:42,860
Alright. We have this outlet to the label

718
00:31:42,860 --> 00:31:44,740
I'm gonna send the getter message to self

719
00:31:44,740 --> 00:31:46,770
That's how I get the label

720
00:31:46,770 --> 00:31:48,550
to be able to send a message to it

721
00:31:48,560 --> 00:31:51,990
Now, I don't really need to create a local variable here

722
00:31:51,990 --> 00:31:53,330
and put it in, but I just want to show you

723
00:31:53,340 --> 00:31:54,790
how it looks like to call the getter

724
00:31:54,790 --> 00:31:58,170
And in fact I told you there was the special syntax

725
00:31:58,170 --> 00:32:00,280
for calling the getter which was that dot notation

726
00:32:00,280 --> 00:32:01,960
Remember that? It's very end of last lecture

727
00:32:01,960 --> 00:32:04,570
Well, use dot notation that looks like this

728
00:32:04,570 --> 00:32:07,910
OK. So, the self dot display is exactly the same

729
00:32:07,910 --> 00:32:10,980
as the open square bracket self display calling the getter

730
00:32:10,980 --> 00:32:13,490
that's getting the pointer to the UILabel

731
00:32:13,490 --> 00:32:16,210
So now that I have the pointer to the UILabel

732
00:32:16,210 --> 00:32:17,990
I'm gonna get the text out of it

733
00:32:18,000 --> 00:32:21,710
because when we press digit buttons like 5, 6, 8, 9

734
00:32:21,710 --> 00:32:24,570
we really what I want is I want those digits to be appended

735
00:32:24,570 --> 00:32:25,960
to what is already in the display

736
00:32:25,960 --> 00:32:29,410
If I typed 56 so far in the display and I type 2

737
00:32:29,410 --> 00:32:31,280
I wanna it to be 562

738
00:32:31,280 --> 00:32:32,830
So, I'm gonna get the text out

739
00:32:32,840 --> 00:32:36,110
append the digits they just type and put that back

740
00:32:36,110 --> 00:32:38,690
That's what this... that's all this message needs to do

741
00:32:38,690 --> 00:32:42,560
Alright. So, let's have another local variable, NSString

742
00:32:42,560 --> 00:32:46,520
how about call it currentText

743
00:32:46,520 --> 00:32:48,290
Alright. To get the current text

744
00:32:48,290 --> 00:32:51,070
I'm just gonna send the message to myDisplay

745
00:32:51,070 --> 00:32:52,650
called text

746
00:32:52,650 --> 00:32:57,390
Text is the message that is understood by UILabel

747
00:32:57,390 --> 00:33:00,120
It says give me the text in yourself

748
00:33:00,130 --> 00:33:02,140
Now, this might be a good time for us

749
00:33:02,140 --> 00:33:04,160
to take a really quick aside

750
00:33:04,160 --> 00:33:05,560
and talk about the documentation

751
00:33:05,570 --> 00:33:09,480
OK. The documentation is very easy to access

752
00:33:09,480 --> 00:33:12,210
the magic here is the option key

753
00:33:12,210 --> 00:33:14,250
So, I'm holding down the option key

754
00:33:14,250 --> 00:33:16,160
and when I do that if you notice

755
00:33:16,160 --> 00:33:17,750
when I mouse over message

756
00:33:17,750 --> 00:33:19,120
look what happens

757
00:33:19,120 --> 00:33:20,180
They turn into links

758
00:33:20,180 --> 00:33:22,480
See how there little links, and I don't know how

759
00:33:22,480 --> 00:33:23,210
well you can see that

760
00:33:23,210 --> 00:33:25,190
but there turn blue with little dash underline

761
00:33:25,190 --> 00:33:27,930
And if I click on one like text

762
00:33:27,930 --> 00:33:30,010
then I get a little pop out window

763
00:33:30,010 --> 00:33:34,710
with kinda mini quick help on this particular guide

764
00:33:34,710 --> 00:33:35,960
so here is text

765
00:33:35,960 --> 00:33:38,120
Notice that property

766
00:33:38,120 --> 00:33:40,640
So, this is actually the getter of a property

767
00:33:40,640 --> 00:33:42,780
so we probably gonna use dot notation here

768
00:33:42,780 --> 00:33:43,800
which we will in a moment

769
00:33:43,800 --> 00:33:46,320
But also notice everything in the quick help

770
00:33:46,320 --> 00:33:49,350
this little description of it, it's a link as well

771
00:33:49,360 --> 00:33:52,770
So, if I wanted to find out more about the NSString class for example

772
00:33:52,770 --> 00:33:54,320
I'll just click on it here

773
00:33:54,320 --> 00:33:56,810
Now, you can read all the full documentation

774
00:33:56,810 --> 00:33:58,350
OK. So, here it is loading up

775
00:33:58,350 --> 00:34:00,770
the full documentation on NSString

776
00:34:00,770 --> 00:34:05,460
the full class reference and these references are awesome

777
00:34:05,460 --> 00:34:08,470
This is really you wanna spent lot time studying this guide

778
00:34:08,480 --> 00:34:11,500
OK. So here is NSString

779
00:34:11,500 --> 00:34:13,860
Note it tells you what the superclass of NSString is

780
00:34:13,860 --> 00:34:16,000
and shows you much of sample code here

781
00:34:16,000 --> 00:34:19,280
which is really great and various companion guides

782
00:34:19,280 --> 00:34:22,190
like the string programming guide, how to program a string

783
00:34:22,190 --> 00:34:24,250
Here's the overview of the class

784
00:34:24,250 --> 00:34:28,480
Here is all the methodes that NSString implements... a lot

785
00:34:28,480 --> 00:34:31,570
OK. NSString a lot of cool methodes in here

786
00:34:31,570 --> 00:34:34,500
If you familiarize yourself of what these things are

787
00:34:34,500 --> 00:34:36,800
so you can save yourself a lot of lines of code

788
00:34:36,800 --> 00:34:38,790
because NSString will just do things for you

789
00:34:38,790 --> 00:34:42,400
That's a lot. And then each of the methodes has very

790
00:34:42,400 --> 00:34:46,600
you know, detailed description about what return values are

791
00:34:46,600 --> 00:34:48,630
and what the paths and then and all that stuff

792
00:34:48,630 --> 00:34:52,520
Obviously, you can search the documentation

793
00:34:52,520 --> 00:34:54,150
Get use to the documentation

794
00:34:54,150 --> 00:34:55,510
Definitely it's your bestfriend

795
00:34:55,510 --> 00:34:57,540
you really, really want spend time with that

796
00:34:57,540 --> 00:35:00,050
as you learned iOS5

797
00:35:00,060 --> 00:35:03,210
So, again we notice that this was the property

798
00:35:03,220 --> 00:35:05,990
so I'm gonna change this to be dot notation as well

799
00:35:05,990 --> 00:35:10,370
myDisplay.text. OK

800
00:35:10,370 --> 00:35:12,350
I'm also going to...

801
00:35:12,350 --> 00:35:13,510
at this point notice

802
00:35:13,510 --> 00:35:16,600
that I don't really need this local variable right here

803
00:35:16,610 --> 00:35:20,020
Well, we'll go one more line first and then we get rid of that but...

804
00:35:20,020 --> 00:35:21,390
So now I have the text

805
00:35:21,390 --> 00:35:23,160
now I need a new string

806
00:35:23,160 --> 00:35:26,780
which is what is currently in the display with this digit

807
00:35:26,780 --> 00:35:27,670
appended on the end

808
00:35:27,670 --> 00:35:32,940
so I'm gonna say NSString *newText to make it short

809
00:35:32,940 --> 00:35:36,040
and I'm just gonna do this using a method

810
00:35:36,040 --> 00:35:39,090
in the string object called append string

811
00:35:39,090 --> 00:35:39,820
So watch this

812
00:35:39,820 --> 00:35:46,000
currentText stringByAppendingString: digit

813
00:35:46,000 --> 00:35:49,170
OK. So, that stringByAppendingString

814
00:35:49,170 --> 00:35:50,810
is a method in string

815
00:35:50,810 --> 00:35:52,160
You send it to the string

816
00:35:52,160 --> 00:35:53,650
with an argument of another string

817
00:35:53,650 --> 00:35:57,770
and it returns you itself with that thing appended on the end

818
00:35:57,780 --> 00:35:59,660
Right. Exactly as we want

819
00:35:59,660 --> 00:36:01,210
And now we have the newText

820
00:36:01,210 --> 00:36:09,610
we can say current mydisplay setText to be the newText

821
00:36:09,610 --> 00:36:12,370
Alright, now what is this setText method?

822
00:36:12,370 --> 00:36:17,570
That is the setter that this is the getter for

823
00:36:17,570 --> 00:36:19,940
So, you see I'm doing myDisplay.text

824
00:36:19,950 --> 00:36:21,770
and myDisplay setText

825
00:36:21,770 --> 00:36:23,800
So, I use dot notation here

826
00:36:23,800 --> 00:36:26,730
so I'm gonna use dot notation here as well

827
00:36:26,730 --> 00:36:29,370
Alright. So this will look like dot notation for setter

828
00:36:29,370 --> 00:36:35,920
So I say myDisplay.text=newText

829
00:36:35,920 --> 00:36:38,980
and you can see that the dot notation is exactly the same

830
00:36:38,990 --> 00:36:41,510
as what you do as a setter or the getter

831
00:36:41,510 --> 00:36:43,950
It's just matter which side is the equal side is on

832
00:36:43,950 --> 00:36:45,520
That is only difference

833
00:36:45,520 --> 00:36:48,610
OK. Now, let get rid of these whole bunch of this lines of code

834
00:36:48,610 --> 00:36:52,360
For example, myDisplay, we don't need a local variable for that

835
00:36:52,360 --> 00:36:55,430
we'll just take this little guy right here which is its value

836
00:36:55,440 --> 00:36:56,730
and we'll put it where we have myDisplay

837
00:36:56,730 --> 00:36:58,280
Right here and here

838
00:36:58,280 --> 00:36:59,620
Now, you might be a little freaked out

839
00:36:59,620 --> 00:37:01,680
Hear you saying whoah, two dots

840
00:37:01,680 --> 00:37:03,800
but that's perfectly legal and very common

841
00:37:03,800 --> 00:37:07,310
Two or three and four dots in a row

842
00:37:07,310 --> 00:37:08,810
where you are accessing a property

843
00:37:08,810 --> 00:37:10,060
and then accessing a property of that property

844
00:37:10,060 --> 00:37:10,800
and a property of that property, okey?

845
00:37:10,800 --> 00:37:13,980
OK. So, that's perfectly fine, so we don't need this anymore

846
00:37:13,980 --> 00:37:17,110
Also, newText, we don't need that local variable either

847
00:37:17,110 --> 00:37:21,630
We'll just take it contents put that right here

848
00:37:22,020 --> 00:37:27,220
Get rid of that and we don't need currentText which is here

849
00:37:27,220 --> 00:37:32,920
We'll just drag this, cut, paste, get rid of that...

850
00:37:32,920 --> 00:37:35,720
so I told there is one line of code and there is it, one line of code

851
00:37:35,720 --> 00:37:37,240
and you see how this dot notation

852
00:37:37,240 --> 00:37:40,680
combines with the way Objective-C interlace

853
00:37:40,680 --> 00:37:43,410
its arguments with the keywords

854
00:37:43,420 --> 00:37:46,570
so this reads somewhat pseudo English

855
00:37:46,570 --> 00:37:53,110
like in saying my display's text is equal to my display's text

856
00:37:53,110 --> 00:37:56,260
by appending on this digit

857
00:37:56,260 --> 00:37:58,840
So it kinda has a little bit read there

858
00:37:58,840 --> 00:38:03,750
and you know Objective-C really tries in its syntax to be readable

859
00:38:03,750 --> 00:38:06,700
Readability is really really important in any kind of good code

860
00:38:06,700 --> 00:38:09,850
Self-document readable code is really important

861
00:38:09,850 --> 00:38:11,270
Alright, that's it for digit pressed

862
00:38:11,270 --> 00:38:12,250
that is all we need to do

863
00:38:12,250 --> 00:38:17,300
So let's go ahead and run again and let's see if it works

864
00:38:21,860 --> 00:38:24,860
So, let's try it, 5, 8

865
00:38:24,860 --> 00:38:26,790
oh... it seems its working kind of...

866
00:38:26,790 --> 00:38:28,760
but I don't really like this zero at the beginning...

867
00:38:28,760 --> 00:38:29,860
You see that zero at the beginning?

868
00:38:29,860 --> 00:38:31,600
That's kinda... that's kinda yucky

869
00:38:31,600 --> 00:38:32,640
Why does that happen?

870
00:38:32,640 --> 00:38:35,220
Well, that happens because we really only want to do

871
00:38:35,220 --> 00:38:36,700
this appending the digit thing

872
00:38:36,710 --> 00:38:39,250
when we're in the middle of typing a number

873
00:38:39,250 --> 00:38:40,590
If we are in the middle of entering a number

874
00:38:40,590 --> 00:38:41,450
we want to keep appending

875
00:38:41,450 --> 00:38:42,720
but if we are not in the middle of entering number

876
00:38:42,730 --> 00:38:44,050
we want to start off a new number

877
00:38:44,050 --> 00:38:48,550
OK. So, let's do that. Ah... Stop

878
00:38:48,550 --> 00:38:51,260
So, we need some private data now

879
00:38:51,260 --> 00:38:53,790
private property which keeps track of

880
00:38:53,790 --> 00:38:55,460
whether we're in the middle of entering a number

881
00:38:55,460 --> 00:38:57,640
So, remember that I told you

882
00:38:57,640 --> 00:39:02,150
you can add private properties by doing this @interface

883
00:39:02,150 --> 00:39:05,210
name of your class, name of your class

884
00:39:05,210 --> 00:39:06,960
calculatorViewController

885
00:39:06,960 --> 00:39:09,880
and then these two parentheses. Right?

886
00:39:09,880 --> 00:39:13,480
So, this is the space to create some private interface

887
00:39:13,480 --> 00:39:16,550
and then I'm gonna create a property, nonatomic

888
00:39:16,560 --> 00:39:18,580
it's gonna be a BOOL... BOOL

889
00:39:18,580 --> 00:39:20,870
it's the Boolean typedef in Objective-C

890
00:39:20,870 --> 00:39:23,370
Its value is either yes or no

891
00:39:23,370 --> 00:39:25,500
No is zero. Yes is anything but not zero

892
00:39:25,500 --> 00:39:29,680
Capital Y, capital E, capital S, or capital N, capital O. OK

893
00:39:29,680 --> 00:39:31,360
And I'm gonna call this variable

894
00:39:31,360 --> 00:39:37,190
userIsInTheMiddleOfEnteringANumber

895
00:39:37,190 --> 00:39:39,920
Now you all laugh and understandably so

896
00:39:39,920 --> 00:39:43,960
but having a long variable names like this is really encourage

897
00:39:43,960 --> 00:39:44,490
and you're gonna see why

898
00:39:44,490 --> 00:39:46,380
because once I type that once

899
00:39:46,380 --> 00:39:48,260
now I go to synthesize it

900
00:39:48,260 --> 00:39:50,790
Synthesize user all I have to

901
00:39:50,790 --> 00:39:52,710
type the first three things, hit tab

902
00:39:52,710 --> 00:39:55,640
Equals, under bar, user, tab

903
00:39:55,640 --> 00:40:00,140
OK. So, I am quickly entering this thing

904
00:40:00,140 --> 00:40:02,450
without having too much typing

905
00:40:02,450 --> 00:40:03,790
And then how we gonna use this?

906
00:40:03,790 --> 00:40:06,430
userIsInTheMiddleOfEnteringANumber

907
00:40:06,430 --> 00:40:09,290
Well, we'll just gonna do this line of code

908
00:40:09,300 --> 00:40:11,160
this self.display.text

909
00:40:11,160 --> 00:40:15,240
if self.userIsInTheMiddleOfEnteringANumber

910
00:40:15,240 --> 00:40:18,530
OK. We'll only gonna do it in that case

911
00:40:18,530 --> 00:40:21,500
Sorry for the big font graphing here...

912
00:40:21,500 --> 00:40:25,500
And if not then we're just gonna

913
00:40:25,500 --> 00:40:28,540
set our display's text equal to the digits

914
00:40:28,540 --> 00:40:29,900
We're gonna start off a new number

915
00:40:29,900 --> 00:40:31,620
Of course, if we start off a new number

916
00:40:31,620 --> 00:40:32,570
then we are definitely

917
00:40:32,570 --> 00:40:34,090
in the middle of typing a number

918
00:40:34,100 --> 00:40:38,330
Alright. We'll have to set userIsInTheMiddleOfEnteringANumber=YES

919
00:40:38,330 --> 00:40:43,540
OK. So, we need some more UI in here though

920
00:40:43,540 --> 00:40:45,550
we need operation buttons

921
00:40:45,550 --> 00:40:49,260
So, let's put those in here real quick...

922
00:40:49,260 --> 00:40:52,210
lets go up here...

923
00:40:52,210 --> 00:40:53,220
Drag out a new one

924
00:40:53,220 --> 00:40:56,650
because I don't want to copy and paste that same target action

925
00:40:56,650 --> 00:40:58,550
Again, I'm gonna hold down the control key

926
00:40:58,550 --> 00:41:01,720
Drag out. Right. And insert a new action

927
00:41:01,720 --> 00:41:04,300
I'm gonna call this one operationPressed

928
00:41:04,300 --> 00:41:06,300
I need the sender for this one too

929
00:41:06,300 --> 00:41:10,190
cause I need to see what kind of operation we're talking about here

930
00:41:10,190 --> 00:41:16,070
I'll copy and paste to make four of these, alright

931
00:41:16,070 --> 00:41:17,820
And we also need an Enter button

932
00:41:17,820 --> 00:41:19,100
which also I'm gonna drag out

933
00:41:19,100 --> 00:41:22,050
because I don't want it to send digit or operation pressed

934
00:41:22,050 --> 00:41:26,010
OK. So, put enter in there. Oooops

935
00:41:26,010 --> 00:41:34,800
Star, divide, plus, minus, minus. OK

936
00:41:34,800 --> 00:41:37,660
So that's how we know what operation we're talking about too

937
00:41:37,660 --> 00:41:40,670
So, I'm gonna drag Enter out as well, we put that in here

938
00:41:40,670 --> 00:41:43,350
Well, I told you, I tell you about these things at the bottom

939
00:41:43,350 --> 00:41:45,440
Actually, I'm only gonna tell you about one which is arguments

940
00:41:45,440 --> 00:41:48,170
You notice that the arguments to our target action have

941
00:41:48,170 --> 00:41:49,220
always been the sender

942
00:41:49,220 --> 00:41:52,070
but it's possible to actually get the sender and the touch event

943
00:41:52,080 --> 00:41:55,070
that cause the action be sent or to sent nothing

944
00:41:55,070 --> 00:41:56,470
which is what I want for Enter

945
00:41:56,470 --> 00:41:58,570
because there is only one Enter button

946
00:41:58,570 --> 00:42:00,640
I don't need to have the sender to know what's going on

947
00:42:00,640 --> 00:42:02,810
And then we call it EnterPressed

948
00:42:02,810 --> 00:42:05,770
and you can see no sender argument

949
00:42:05,770 --> 00:42:08,600
You see. Like that. Alright

950
00:42:08,600 --> 00:42:13,320
So, we wanna implement enterPressed and operationPressed

951
00:42:13,320 --> 00:42:15,670
but actually we can't do that yet

952
00:42:15,670 --> 00:42:16,960
Well, actually, before you do that

953
00:42:16,960 --> 00:42:17,900
Let's take a second here

954
00:42:17,910 --> 00:42:19,160
Just to make sure that our user in

955
00:42:19,160 --> 00:42:21,040
the middle of entering a number worked

956
00:42:21,040 --> 00:42:23,280
So here is our 0, we press 5

957
00:42:23,280 --> 00:42:25,470
and it starts off a new number

958
00:42:25,470 --> 00:42:26,690
That's good. It's working

959
00:42:26,690 --> 00:42:31,150
(What happens if you press zero twice for example?)

960
00:42:31,150 --> 00:42:34,480
Yes. Yeah, You know pressing zero is like any other digit

961
00:42:34,480 --> 00:42:35,940
But you started off with it

962
00:42:35,940 --> 00:42:37,700
Then they will start... pressing zero

963
00:42:37,700 --> 00:42:39,700
You start putting a zero then press another zero

964
00:42:39,700 --> 00:42:40,840
it would append another zero on

965
00:42:40,840 --> 00:42:42,290
Zero is no difference than any other number

966
00:42:42,290 --> 00:42:45,280
Uhm... you can argue that might be worth a little

967
00:42:45,280 --> 00:42:47,470
if in there to present, prevent leading zeros

968
00:42:47,470 --> 00:42:48,660
but its kinda up to you

969
00:42:48,670 --> 00:42:50,200
This is a very simple calculator

970
00:42:50,200 --> 00:42:52,110
We're not gonna deal with a lot of corner cases

971
00:42:52,110 --> 00:42:56,070
Right. We're just gonna, you know... In the back

972
00:42:56,070 --> 00:43:00,290
Student: (INAUDIBLE)

973
00:43:00,290 --> 00:43:01,120
That's a very good question

974
00:43:01,120 --> 00:43:02,560
So he says right here

975
00:43:02,560 --> 00:43:05,350
where I'm saying digit = sender currentTitle

976
00:43:05,350 --> 00:43:08,200
Is that making a copy of that NSString

977
00:43:08,200 --> 00:43:11,460
or is it like give me a pointer of that NSString

978
00:43:11,460 --> 00:43:14,160
OK. And that depends on how that properties is declared

979
00:43:14,170 --> 00:43:18,200
There is actually another thing like weak and strong which is copy

980
00:43:18,200 --> 00:43:19,950
Copy is basically strong

981
00:43:19,950 --> 00:43:23,180
except when you're getting a strong pointer to a copy of it

982
00:43:23,180 --> 00:43:25,070
You keep looking on the documentation

983
00:43:25,070 --> 00:43:26,530
I think currentTitle is probably copies

984
00:43:26,530 --> 00:43:29,110
but it's kinda up to its property

985
00:43:29,110 --> 00:43:31,900
Other questions... back here

986
00:43:31,910 --> 00:43:34,450
Student: (Could we do dot notation for all of this?)

987
00:43:34,450 --> 00:43:35,650
Yeah. Absolutely. That's a good question

988
00:43:35,650 --> 00:43:38,900
Like currentTitle that is also a property on button

989
00:43:38,910 --> 00:43:42,240
so we say sender.currentTitle right here

990
00:43:42,240 --> 00:43:44,310
Yeah. We could. And we should

991
00:43:44,310 --> 00:43:45,430
Not only we could, and we should

992
00:43:45,430 --> 00:43:47,360
Any other question?

993
00:43:47,360 --> 00:43:52,210
So, now we need to do our model. Yes

994
00:43:52,210 --> 00:43:54,270
Student: All these buttons you have dragged them in

995
00:43:54,280 --> 00:43:56,270
is there another way to do this without dragging?

996
00:43:57,990 --> 00:43:59,030
You mean like in code?

997
00:43:59,030 --> 00:44:00,180
So, the question is

998
00:44:00,180 --> 00:44:01,970
is there any way to do all these buttons and stuff

999
00:44:01,970 --> 00:44:03,300
without doing it graphically

1000
00:44:03,310 --> 00:44:04,850
Sure. It's obviously code

1001
00:44:04,850 --> 00:44:05,950
You create UI button

1002
00:44:05,950 --> 00:44:06,620
Its got, you know

1003
00:44:06,620 --> 00:44:09,040
its allocation and initialization method blah blah blah

1004
00:44:09,040 --> 00:44:10,590
but you almost never do it

1005
00:44:10,590 --> 00:44:12,890
We always do it graphically

1006
00:44:12,890 --> 00:44:15,910
because you want to be able to see what your UI looks like

1007
00:44:15,910 --> 00:44:19,360
Student: (Can we see what is being generated?)

1008
00:44:19,360 --> 00:44:19,930
Good question

1009
00:44:19,930 --> 00:44:21,970
Can you see what's being generated by these

1010
00:44:21,970 --> 00:44:23,320
The answer is not really

1011
00:44:23,320 --> 00:44:25,180
because this is a not a code generator

1012
00:44:25,180 --> 00:44:27,740
These objects are actually archived off to disk

1013
00:44:27,740 --> 00:44:29,790
when it runs, they're unarchived

1014
00:44:29,790 --> 00:44:30,530
OK. They're brought in here

1015
00:44:30,530 --> 00:44:32,620
There is no code being generated here

1016
00:44:32,620 --> 00:44:34,960
OK. Buttons just know how to, you know

1017
00:44:34,960 --> 00:44:37,390
save all of its attributes off on the disk

1018
00:44:37,400 --> 00:44:39,330
And then when you load this storyboard up

1019
00:44:39,330 --> 00:44:41,040
the button pulls all those attributes out

1020
00:44:41,040 --> 00:44:42,320
We're going to talk about that later

1021
00:44:42,320 --> 00:44:44,540
So, let's talk about how... Yeah. Quickly

1022
00:44:44,550 --> 00:44:45,020
Yeah

1023
00:44:45,020 --> 00:44:52,680
Student: (INAUDIBLE)

1024
00:44:52,680 --> 00:44:55,670
Ah. Let's do that question afterwards

1025
00:44:55,670 --> 00:44:58,250
We're really short on time here

1026
00:44:58,250 --> 00:44:59,580
And I don't want to hold you guys too long extra

1027
00:44:59,580 --> 00:45:01,040
But I'm gonna hold you extra

1028
00:45:01,040 --> 00:45:06,910
I'm sorry. Let's quickly go and create our model

1029
00:45:06,910 --> 00:45:07,940
OK. So, we have our controller here

1030
00:45:07,940 --> 00:45:09,860
We have our view. That's great

1031
00:45:09,860 --> 00:45:11,240
So let's go quickly create our model

1032
00:45:11,240 --> 00:45:13,620
The way we create our...

1033
00:45:13,620 --> 00:45:14,770
I'm stopping the simulator there

1034
00:45:14,770 --> 00:45:17,360
The way we create our model is very straight forward

1035
00:45:17,360 --> 00:45:20,720
We go to the file menu and we just say New File

1036
00:45:20,720 --> 00:45:22,410
OK. The New File is the gateway to

1037
00:45:22,410 --> 00:45:25,080
creating a lot of stuff in X-Code

1038
00:45:25,090 --> 00:45:26,870
Not just new class like objective-C class

1039
00:45:26,880 --> 00:45:29,050
or a new controller which is what this is

1040
00:45:29,050 --> 00:45:29,930
But, for example

1041
00:45:29,930 --> 00:45:32,030
you can create a new database images description

1042
00:45:32,030 --> 00:45:33,550
right, with this data model thing

1043
00:45:33,550 --> 00:45:34,860
So, there's a lot in here

1044
00:45:34,860 --> 00:45:37,450
but today we're just going to talk about creating a new class

1045
00:45:37,460 --> 00:45:39,930
And we click... we just click that new class

1046
00:45:39,930 --> 00:45:43,320
and we're gonna call our model CalculatorBrain

1047
00:45:43,320 --> 00:45:46,200
We can call it CalculatorModel possibly

1048
00:45:46,200 --> 00:45:49,800
but I like CalculatorBrain... Little more spicy

1049
00:45:49,800 --> 00:45:51,990
And we just want to make sure

1050
00:45:51,990 --> 00:45:55,640
we put it in the same place that all our other files are

1051
00:45:55,640 --> 00:45:59,080
And here it is. It created it again

1052
00:45:59,080 --> 00:46:01,600
Now, you can see that in this controller

1053
00:46:01,600 --> 00:46:03,690
we have our CalculatorBrain.m and .h

1054
00:46:03,690 --> 00:46:05,390
I'm gonna close that. I'm gonna close this as well

1055
00:46:05,390 --> 00:46:09,530
Here you can see on the left is our implementation

1056
00:46:09,540 --> 00:46:12,480
and on the right is our header file

1057
00:46:12,480 --> 00:46:15,540
I'm gonna start by adding a public method

1058
00:46:15,540 --> 00:46:17,680
Now, this is our RPN calculatorbrain

1059
00:46:17,680 --> 00:46:18,720
which is blank

1060
00:46:18,720 --> 00:46:20,150
so it only knows how to do two things publicly

1061
00:46:20,150 --> 00:46:22,480
which is to push an operand on its stack

1062
00:46:22,490 --> 00:46:23,800
and perform an operation

1063
00:46:23,800 --> 00:46:25,920
on those when whatever is on its stack

1064
00:46:25,920 --> 00:46:30,290
So, the two public methods would be pushOperand

1065
00:46:30,290 --> 00:46:37,250
which will take a double and double performOperation

1066
00:46:37,250 --> 00:46:42,580
and we're gonna use NSString to specify our operation

1067
00:46:42,580 --> 00:46:45,490
I push it on the side so you can see it

1068
00:46:45,490 --> 00:46:47,970
These strings are gonna be the same strings as that are on the button

1069
00:46:47,970 --> 00:46:50,030
which is probably really bad design

1070
00:46:50,030 --> 00:46:52,580
but we made it simple for this demo

1071
00:46:52,590 --> 00:46:55,120
But it's not so bad to have your operation be a string

1072
00:46:55,120 --> 00:46:57,370
but to have them be strings that are directly in the UI...

1073
00:46:57,370 --> 00:46:58,570
For localization or another reason

1074
00:46:58,570 --> 00:47:00,650
You probably don't wanna do that

1075
00:47:00,650 --> 00:47:01,810
but we're gonna do that

1076
00:47:01,810 --> 00:47:04,270
So then, this is our entire public API

1077
00:47:04,270 --> 00:47:05,990
Just these two methods

1078
00:47:05,990 --> 00:47:09,060
Notice that by adding these to my header file the public API

1079
00:47:09,060 --> 00:47:10,640
I actually get a warning here

1080
00:47:10,640 --> 00:47:12,210
See these little yellow triangles

1081
00:47:12,210 --> 00:47:14,490
We didn't take time out talk about those in...

1082
00:47:14,490 --> 00:47:17,510
when we're... these are warnings if you click on them

1083
00:47:17,510 --> 00:47:19,140
it will tell you what the problem is

1084
00:47:19,140 --> 00:47:20,570
And it's doing this as you type

1085
00:47:20,570 --> 00:47:23,450
so basically X-Code is constantly compiling

1086
00:47:23,450 --> 00:47:25,190
parsing really, your code

1087
00:47:25,200 --> 00:47:28,970
And here it's correct that we have an incomplete implementation

1088
00:47:28,970 --> 00:47:30,250
cause we have these two public methods

1089
00:47:30,250 --> 00:47:31,480
and we haven't implemented of them

1090
00:47:31,480 --> 00:47:32,740
Right. So let's fix that

1091
00:47:32,740 --> 00:47:36,980
I'm just gonna copy and paste them all over here

1092
00:47:36,980 --> 00:47:40,410
And then I'm gonna put some stub implementation

1093
00:47:40,410 --> 00:47:42,070
and do nothing there

1094
00:47:42,070 --> 00:47:45,930
And here I'm gonna create a little local variable

1095
00:47:45,930 --> 00:47:51,290
and return it and like in between, we would

1096
00:47:51,290 --> 00:47:55,000
ooops. ooops. Sorry. Alright

1097
00:47:55,000 --> 00:48:01,010
Calculate results... oops... calculator result... calculator, right

1098
00:48:01,010 --> 00:48:04,750
OK. So, there are our two public methods

1099
00:48:04,750 --> 00:48:05,690
That's great

1100
00:48:05,690 --> 00:48:07,250
Now to implement our brain

1101
00:48:07,250 --> 00:48:09,560
we're gonna need that stack

1102
00:48:09,560 --> 00:48:11,750
Remember we're keeping a stack of operations

1103
00:48:11,750 --> 00:48:13,260
and every time we press an operation

1104
00:48:13,260 --> 00:48:14,900
we pull out all the operations we need

1105
00:48:14,910 --> 00:48:16,850
Well, how are we gonna implement the stack

1106
00:48:16,850 --> 00:48:21,150
A really easy way to implement a stack is using an array

1107
00:48:21,150 --> 00:48:24,540
because an array of objects in most languages

1108
00:48:24,540 --> 00:48:25,970
and certainly in objective-C

1109
00:48:25,970 --> 00:48:28,110
when you add an object to the end of it

1110
00:48:28,110 --> 00:48:29,280
it makes itself a little bigger

1111
00:48:29,280 --> 00:48:31,160
and then when you pull an object off the end

1112
00:48:31,160 --> 00:48:32,290
it makes itself a little smaller

1113
00:48:32,290 --> 00:48:33,730
and that's exactly what stack does

1114
00:48:33,730 --> 00:48:37,060
OK. So, to push we're gonna add an object to an array

1115
00:48:37,060 --> 00:48:37,640
and to pop

1116
00:48:37,640 --> 00:48:39,600
we're gonna remove the last object in the array

1117
00:48:39,610 --> 00:48:43,510
Right. Easiest stack implementation in the world in array

1118
00:48:43,510 --> 00:48:44,950
So, to do that again

1119
00:48:44,950 --> 00:48:47,390
we need a private interface

1120
00:48:47,390 --> 00:48:48,810
cause we're in a private property

1121
00:48:48,810 --> 00:48:50,400
cause that stack is not public

1122
00:48:50,400 --> 00:48:52,970
You... when you push an operation and perform

1123
00:48:52,970 --> 00:48:55,920
the internal implementation of that is totally in our model

1124
00:48:55,920 --> 00:48:56,810
It's not public

1125
00:48:56,810 --> 00:48:58,830
So, it's gonna be nonatomic

1126
00:48:58,830 --> 00:49:04,760
Oooops. Sorry. That's Calculatorbrain()

1127
00:49:04,760 --> 00:49:08,030
and OK. So, this our private interface space

1128
00:49:08,030 --> 00:49:10,310
then property nonatomic

1129
00:49:10,310 --> 00:49:12,060
Definitely gonna be strong

1130
00:49:12,060 --> 00:49:14,680
because we're the only ones who are interested in this pointer

1131
00:49:14,680 --> 00:49:16,880
So, it will have... we have to keep this strong pointer to it

1132
00:49:16,880 --> 00:49:21,140
And its gonna be an NSMutableArray

1133
00:49:21,140 --> 00:49:23,330
I'm gonna call it operandStack

1134
00:49:23,330 --> 00:49:28,740
I'm going to squish our public API way down

1135
00:49:28,740 --> 00:49:30,660
OK. So here it is our property

1136
00:49:30,660 --> 00:49:33,570
Now, MutableArray, there is an NSArray

1137
00:49:33,580 --> 00:49:35,910
in objective C, that's an immutable array

1138
00:49:35,910 --> 00:49:38,170
Now, when you create array with a certain amount of objects in it

1139
00:49:38,170 --> 00:49:40,530
you can't change it. You can't add or remove any

1140
00:49:40,530 --> 00:49:43,170
And then, a subclass of NSArray is MutableArray

1141
00:49:43,170 --> 00:49:44,680
which let you add and remove

1142
00:49:44,680 --> 00:49:46,130
Add a bunch of methods for adding and remove

1143
00:49:46,140 --> 00:49:48,330
And that's clearly what we want here

1144
00:49:48,330 --> 00:49:50,230
What do you think this yellow thing is here

1145
00:49:50,230 --> 00:49:52,810
Anybody knows

1146
00:49:53,820 --> 00:49:54,930
Cause we're not using it

1147
00:49:54,930 --> 00:49:57,250
Not quite. It's... Yeah

1148
00:49:57,250 --> 00:49:58,330
because we didn't synthesize it

1149
00:49:58,330 --> 00:50:01,130
Right. It's just to say you have no getter. In fact, there is two errors here...

1150
00:50:01,130 --> 00:50:02,750
We press this two, we'll see them both

1151
00:50:02,750 --> 00:50:05,030
It is saying, hey you get no setter and you get no getter

1152
00:50:05,030 --> 00:50:07,140
so put those in there, so we will go on here

1153
00:50:07,140 --> 00:50:12,210
@ synthesize operandStack = _operandStack

1154
00:50:12,210 --> 00:50:15,200
Now, I'm gonna show you what synthesize would create

1155
00:50:15,200 --> 00:50:17,730
This is what synthesize is gonna create for us

1156
00:50:17,730 --> 00:50:20,680
(NSMutableArray * ) operand stack

1157
00:50:20,680 --> 00:50:23,090
return _ operandStack

1158
00:50:23,090 --> 00:50:27,570
and then (void)setOperandStack

1159
00:50:27,570 --> 00:50:30,230
_operandStack =

1160
00:50:30,230 --> 00:50:33,130
this argument right here... operandStack

1161
00:50:33,130 --> 00:50:36,750
OK. So, for nonatomic properties

1162
00:50:36,750 --> 00:50:38,350
this is what synthesize, this is the code of

1163
00:50:38,350 --> 00:50:40,920
synthesize would generate, these two things

1164
00:50:40,920 --> 00:50:43,040
Now, we don't need to put these in here

1165
00:50:43,040 --> 00:50:44,640
because we have the synthesize

1166
00:50:44,640 --> 00:50:46,090
but I'm gonna leave them here

1167
00:50:46,090 --> 00:50:46,910
so you'll see why in a moment

1168
00:50:46,910 --> 00:50:51,250
Student: (INAUDIBLE)

1169
00:50:51,250 --> 00:50:54,230
Ah. Yes. Strong matters

1170
00:50:54,230 --> 00:50:55,760
Whether you implement it or not

1171
00:50:55,760 --> 00:50:58,750
strong is telling the compiler what to do with the memory

1172
00:50:58,750 --> 00:51:01,640
that these, that this pointer right here points to

1173
00:51:01,640 --> 00:51:04,200
Student: (INAUDIBLE)

1174
00:51:04,200 --> 00:51:06,600
No. Yes. Strong is more than generating the code for you

1175
00:51:06,600 --> 00:51:08,680
It's the hint of the compiler to help you manage the memory

1176
00:51:08,680 --> 00:51:12,070
or not to help you manage it, to manage the memory for you

1177
00:51:12,080 --> 00:51:14,730
OK. So, pushOperand, let's do that one

1178
00:51:14,730 --> 00:51:16,460
That's what can be super simple

1179
00:51:16,460 --> 00:51:19,070
We just get our operandStack

1180
00:51:19,070 --> 00:51:21,300
Oh, One thing I forgot to mention on Tuesday, very important

1181
00:51:21,300 --> 00:51:24,200
accessing the instance variable, the _operandStack

1182
00:51:24,200 --> 00:51:27,240
you should only ever do in your setter and getter

1183
00:51:27,240 --> 00:51:29,300
Do not do it anywhere else in your code

1184
00:51:29,300 --> 00:51:31,340
If you need to get that thing anywhere else

1185
00:51:31,340 --> 00:51:32,980
use the setter and getter

1186
00:51:32,980 --> 00:51:33,790
that's what they are for

1187
00:51:33,800 --> 00:51:36,100
So, here I am getting the operandStack

1188
00:51:36,100 --> 00:51:40,120
and I'm gonna call a NSMutableArray method called addObject

1189
00:51:40,120 --> 00:51:43,030
cause I wanna to add an object on the end of my array

1190
00:51:43,030 --> 00:51:43,890
That's I'm gonna start

1191
00:51:43,890 --> 00:51:46,660
I'm gonna try to just add the operand

1192
00:51:46,660 --> 00:51:48,060
but of course that's not gonna work

1193
00:51:48,060 --> 00:51:48,770
Can you see it here

1194
00:51:48,770 --> 00:51:51,430
Now, we have a red thing here. A red error

1195
00:51:51,430 --> 00:51:53,360
and what it's saying is

1196
00:51:53,360 --> 00:51:54,130
sending a double

1197
00:51:54,140 --> 00:51:56,480
to a parameter of incompatible type id is no good

1198
00:51:56,480 --> 00:51:57,780
This is not an object

1199
00:51:57,780 --> 00:52:01,420
and MutableArray only let you add object to it

1200
00:52:01,420 --> 00:52:03,390
not primitive type like operand

1201
00:52:03,400 --> 00:52:06,270
which is for double

1202
00:52:06,270 --> 00:52:10,670
So, we need to wrap that double in an object

1203
00:52:10,670 --> 00:52:12,440
and so we're gonna do that

1204
00:52:12,440 --> 00:52:14,160
by creating an operandObject

1205
00:52:14,160 --> 00:52:16,370
using this class NSNumber

1206
00:52:16,380 --> 00:52:18,020
So, all NSNumber does is

1207
00:52:18,020 --> 00:52:20,900
wrap primitive numbers in an object, OK

1208
00:52:20,910 --> 00:52:24,590
So, let's say [numberWithDouble : operand]

1209
00:52:24,590 --> 00:52:27,350
OK. So, now we have an operandObject

1210
00:52:27,360 --> 00:52:30,440
and we can add that in, and our error is gone

1211
00:52:30,440 --> 00:52:32,760
And if fact we don't really need this local variable

1212
00:52:32,760 --> 00:52:36,470
We can juts grab this and put it right here

1213
00:52:36,470 --> 00:52:37,840
OK. So, one line of code

1214
00:52:37,840 --> 00:52:39,790
we push something on our operandStack

1215
00:52:39,790 --> 00:52:43,430
Now, this line of code has a subtle problem

1216
00:52:43,430 --> 00:52:45,290
OK. Here's the problem

1217
00:52:45,290 --> 00:52:48,590
What did I tell you that properties start out as

1218
00:52:48,590 --> 00:52:50,530
when your object just created

1219
00:52:50,530 --> 00:52:54,100
Zero or Nil in the case of the pointer

1220
00:52:54,100 --> 00:52:57,930
And what happens when you send the message to Nil

1221
00:52:57,930 --> 00:52:59,960
Nothing. Right? Nothing happens

1222
00:52:59,960 --> 00:53:03,020
So, this line of code, this starts out as Nil

1223
00:53:03,020 --> 00:53:04,690
so this line of code does nothing

1224
00:53:04,690 --> 00:53:07,490
sending addObject to Nil does nothing

1225
00:53:07,490 --> 00:53:09,730
So, this is gonna do nothing. That's bad

1226
00:53:09,730 --> 00:53:11,270
We don't want it do nothing. OK

1227
00:53:11,270 --> 00:53:12,710
So, now you're probably thinking

1228
00:53:12,710 --> 00:53:14,100
Oh. I need a constructor

1229
00:53:14,100 --> 00:53:16,660
so that I can set that property to something

1230
00:53:16,660 --> 00:53:19,970
And yeah. We do have constructors in objective-C

1231
00:53:19,970 --> 00:53:21,670
initializers we call them

1232
00:53:21,670 --> 00:53:26,170
but that's not actually the best place to construct this thing OK

1233
00:53:26,170 --> 00:53:29,960
The best place to make sure the operandStack is never Nil

1234
00:53:29,960 --> 00:53:33,400
is in its getter OK

1235
00:53:33,400 --> 00:53:35,040
We're gonna go up to its getter

1236
00:53:35,040 --> 00:53:36,830
This is it right here

1237
00:53:36,840 --> 00:53:38,490
Immediately I showed you what it looks like

1238
00:53:38,490 --> 00:53:40,120
And we're gonna implement our getter

1239
00:53:40,120 --> 00:53:40,580
so we're just gonna say

1240
00:53:40,580 --> 00:53:46,030
if (_operandStack = nil) then operandStack =...

1241
00:53:46,030 --> 00:53:47,300
I'm gonna allocate

1242
00:53:47,300 --> 00:53:51,550
We're gonna talk about how to do allocation in array

1243
00:53:51,550 --> 00:53:55,610
So, there is no way to get operandStack and have it be Nil

1244
00:53:55,610 --> 00:53:58,970
because if it is NilI, I allocate it

1245
00:53:58,970 --> 00:54:01,240
But I'm also only ever gonna allocate it once

1246
00:54:01,250 --> 00:54:03,880
because the once I've allocated it, it cannot be Nil anymore

1247
00:54:03,880 --> 00:54:07,240
Everyone got this. This is called lazy instantiation

1248
00:54:07,240 --> 00:54:10,670
Waiting until the last second to instantiate something that you need

1249
00:54:10,670 --> 00:54:12,350
Very common in iOS

1250
00:54:12,350 --> 00:54:14,120
So, now I don't need the setter here

1251
00:54:14,120 --> 00:54:15,690
cause we're not gonna do anything special in the setter

1252
00:54:15,690 --> 00:54:16,760
but we're gonna leave the getter

1253
00:54:16,760 --> 00:54:19,530
Synthesize is not gonna synthesize the getter

1254
00:54:19,530 --> 00:54:22,170
because we're doing it. OK

1255
00:54:22,170 --> 00:54:23,820
This is fine. So, now we do operandStack

1256
00:54:23,820 --> 00:54:24,910
This will never be Nil

1257
00:54:24,910 --> 00:54:27,400
This getter will never return Nil. Make sense?

1258
00:54:27,400 --> 00:54:27,930
Yeah. Question

1259
00:54:27,930 --> 00:54:30,720
Student: (INAUDIBLE)

1260
00:54:30,720 --> 00:54:33,580
No. Synthesize never allocate something, that's a great question

1261
00:54:33,580 --> 00:54:35,340
Does synthesize allocate? No

1262
00:54:35,340 --> 00:54:39,580
All the synthesize does is make the instance variable for the pointer

1263
00:54:39,580 --> 00:54:42,120
but the things it points to you gotta allocate

1264
00:54:42,120 --> 00:54:42,950
Yeah. Question

1265
00:54:42,950 --> 00:54:49,750
Student: (INAUDIBLE)

1266
00:54:49,750 --> 00:54:51,730
Correct. The question is, If I don't use nonatomic

1267
00:54:51,730 --> 00:54:52,970
what's gonna happen

1268
00:54:52,970 --> 00:54:55,680
And the answer is, It's gonna get a warning here

1269
00:54:55,680 --> 00:54:58,320
It's gonna say. Oh, you overwrote the getter

1270
00:54:58,320 --> 00:55:00,160
but you didn't overwrite the setter

1271
00:55:00,160 --> 00:55:02,510
and you're saying that you're doing locking for multiple threads...

1272
00:55:02,510 --> 00:55:04,640
EEEEEhhh... So, its gonna actually give you a warning

1273
00:55:04,640 --> 00:55:05,920
It lets you do it but it's gonna warn

1274
00:55:05,920 --> 00:55:08,270
It'll give you a warning

1275
00:55:08,270 --> 00:55:10,280
So, OK so by the way we're gonna run over here

1276
00:55:10,280 --> 00:55:14,270
If you have to go, go ahead quietly. Sneak out

1277
00:55:14,270 --> 00:55:18,840
I have posted online this is what I'm gonna do here

1278
00:55:18,840 --> 00:55:20,250
So, you have to do it on your own

1279
00:55:20,250 --> 00:55:22,140
if you want stay and watch me do it

1280
00:55:22,140 --> 00:55:23,920
That's cool too

1281
00:55:23,920 --> 00:55:25,320
But please be quiet on your way out

1282
00:55:25,320 --> 00:55:27,150
for the people who do want to stay and watch it

1283
00:55:27,160 --> 00:55:28,890
OK. So now, we can do our perform result

1284
00:55:28,890 --> 00:55:32,630
performOperation here, very straight forward

1285
00:55:32,630 --> 00:55:36,060
I'm gonna make this a little higher on the screen so you can see it

1286
00:55:36,060 --> 00:55:38,560
All we need to do to perform the operation is

1287
00:55:38,560 --> 00:55:40,580
depending on what the operation is

1288
00:55:40,580 --> 00:55:43,550
We gotta pop operand off the stack and do the operation

1289
00:55:43,550 --> 00:55:46,950
I'm gonna say if operation is EqualToString

1290
00:55:46,950 --> 00:55:49,750
that the string method, and I'm gonna use a constant string here

1291
00:55:49,750 --> 00:55:53,280
just like I did I do with NSLog, then I wanna say

1292
00:55:53,280 --> 00:56:00,720
the result =[ self popOperand] + [self popOperand]

1293
00:56:00,720 --> 00:56:03,240
And of course we're gonna get an error here

1294
00:56:03,250 --> 00:56:05,630
because we haven't implement popOperand

1295
00:56:05,630 --> 00:56:08,200
but that's easy to fix. Let's go implement it

1296
00:56:08,210 --> 00:56:12,090
(double) popOperand and all we gonna do here

1297
00:56:12,090 --> 00:56:16,450
get the number off the stack, NSnumber *operandObject

1298
00:56:16,460 --> 00:56:21,450
=[ self.operandStack lastObject]

1299
00:56:21,450 --> 00:56:23,600
Okay, the lastObject is a method in NSArray

1300
00:56:23,600 --> 00:56:25,670
that returns the pointer to the last object

1301
00:56:25,670 --> 00:56:27,850
not a copy of it , but just a pointer to it

1302
00:56:27,850 --> 00:56:29,870
But now we have the last object. That's awesome

1303
00:56:29,880 --> 00:56:33,240
and now we can return the double value of that

1304
00:56:33,240 --> 00:56:38,080
by sending operandObject, which is NSnumber, doubleValue

1305
00:56:38,090 --> 00:56:40,530
OK. That's number response to this method doubleValue

1306
00:56:40,530 --> 00:56:41,030
Doesn't it

1307
00:56:41,030 --> 00:56:42,960
Now, this is not gonna be quite right

1308
00:56:42,960 --> 00:56:45,660
because this is suppose to be popOperand

1309
00:56:45,660 --> 00:56:48,310
This is really more like peek Operand

1310
00:56:48,310 --> 00:56:50,330
Cause it only looking at the end of the array

1311
00:56:50,330 --> 00:56:54,650
We need actually remove the last object which we do with

1312
00:56:54,650 --> 00:56:59,760
this NSMutableArray method called removeLastObject

1313
00:56:59,760 --> 00:57:02,430
but it's a little more careful about that

1314
00:57:02,430 --> 00:57:06,110
because if we try to remove an object from an empty array

1315
00:57:06,110 --> 00:57:08,330
Not Nil but an empty array, right

1316
00:57:08,330 --> 00:57:09,470
We haven't put anything in yet

1317
00:57:09,470 --> 00:57:12,750
Its gonna crash our program with an array index out of bounds

1318
00:57:12,750 --> 00:57:14,960
OK. lastObject doesn't do that

1319
00:57:14,960 --> 00:57:16,170
Cause It just peek in there

1320
00:57:16,170 --> 00:57:19,000
But removeLastObject will crash the program

1321
00:57:19,000 --> 00:57:25,740
So, we need to say if (operandObject )

1322
00:57:25,740 --> 00:57:28,490
we could say if (operandObject != Nil)

1323
00:57:28,500 --> 00:57:32,190
or we can just say if (operandObject ),OK

1324
00:57:32,190 --> 00:57:34,620
Normally we just say operandObject

1325
00:57:34,620 --> 00:57:37,470
OK. See why we have to protect our self a little bit there

1326
00:57:37,470 --> 00:57:38,830
against the crash

1327
00:57:38,830 --> 00:57:40,180
So, here we pop it. OK

1328
00:57:40,180 --> 00:57:43,420
So now since we are limited on time

1329
00:57:43,420 --> 00:57:46,080
I'm not gonna put the rest of the operations in

1330
00:57:46,080 --> 00:57:47,440
How are we gonna imagine them?

1331
00:57:47,440 --> 00:57:48,290
Actually we do one more

1332
00:57:48,290 --> 00:57:50,770
because I wanna show you another interesting thing here

1333
00:57:50,770 --> 00:57:53,940
What about this?

1334
00:58:02,520 --> 00:58:07,760
OK. Notice that I'm sending a message to a constant string

1335
00:58:07,760 --> 00:58:10,290
Is that OK? Absolutely it's OK

1336
00:58:10,290 --> 00:58:13,560
Constant strings are just much string with anything else

1337
00:58:13,560 --> 00:58:15,600
This is the string, cause it's an argument here

1338
00:58:15,610 --> 00:58:17,010
and this a string

1339
00:58:17,010 --> 00:58:19,510
The constant string generated by a compiler. OK

1340
00:58:19,520 --> 00:58:23,770
So, so don't worry about that, perfectly fine

1341
00:58:23,770 --> 00:58:25,220
And then the last thing we need to...

1342
00:58:25,220 --> 00:58:27,320
we do the other operations and the other operations

1343
00:58:27,320 --> 00:58:29,360
and you homework is to add some operations here

1344
00:58:29,360 --> 00:58:32,210
So hopefully you can intuit how to do that

1345
00:58:32,210 --> 00:58:34,820
But one thing we need to do is to make sure that

1346
00:58:34,820 --> 00:58:39,250
we push these results back on the stack

1347
00:58:39,250 --> 00:58:41,330
cause we wanna be able to continue operating on it

1348
00:58:41,330 --> 00:58:43,360
and next operation that comes in

1349
00:58:43,360 --> 00:58:44,740
OK. Then, makes sense?

1350
00:58:44,740 --> 00:58:46,350
Everyone understand the model?

1351
00:58:46,350 --> 00:58:48,260
That's it for our model. It's all it does

1352
00:58:48,260 --> 00:58:51,660
Well, if you push operands on and then perform operations

1353
00:58:51,660 --> 00:58:52,940
it pops off the ones you need

1354
00:58:52,940 --> 00:58:54,770
Some operations might need one

1355
00:58:54,770 --> 00:58:57,440
one like a square root which you have to do in your homework

1356
00:58:57,440 --> 00:58:58,740
It only needs one operand

1357
00:58:58,740 --> 00:59:01,140
so it's only pop one off the stack

1358
00:59:01,140 --> 00:59:03,790
One operation I'm gonna ask you do is pi

1359
00:59:03,790 --> 00:59:06,270
takes no operands

1360
00:59:06,270 --> 00:59:10,140
To turn as Pi it doesn't need operand to do what it does

1361
00:59:10,140 --> 00:59:13,330
so this perform operation can take as many operands off the stack

1362
00:59:13,330 --> 00:59:14,440
as it needs to do its job

1363
00:59:14,440 --> 00:59:15,900
depending on what you are asking it to do

1364
00:59:15,900 --> 00:59:18,380
Right. These two need two operands

1365
00:59:18,380 --> 00:59:19,670
so it pops in two. OK

1366
00:59:19,670 --> 00:59:22,760
and so that's it for that

1367
00:59:22,760 --> 00:59:26,390
Now we're gonna go back to our controller and finish that all

1368
00:59:26,390 --> 00:59:28,350
which is gonna a be pretty straight forward one

1369
00:59:28,350 --> 00:59:29,480
since we have our model

1370
00:59:29,480 --> 00:59:32,490
So, I'm gonna go back to that by going up to the top here

1371
00:59:32,490 --> 00:59:34,040
This bar at the top

1372
00:59:34,040 --> 00:59:36,980
and go from CalculatorBrain over to ViewController

1373
00:59:36,980 --> 00:59:39,520
Uhm. First thing that I need to do

1374
00:59:39,520 --> 00:59:42,040
is import my brain into my controller

1375
00:59:42,040 --> 00:59:45,230
So, this is my CalculatorViewController's implementation

1376
00:59:45,230 --> 00:59:48,540
I'm importing my model. OK so I can use it

1377
00:59:48,540 --> 00:59:51,530
On the right hand side here, it's automatically

1378
00:59:51,530 --> 00:59:54,210
the assistant, the butler guy, has automatically decide

1379
00:59:54,210 --> 00:59:56,580
that it wants to put the header file for my controller here

1380
00:59:56,580 --> 00:59:58,000
but actually I don't want that

1381
00:59:58,000 --> 01:00:01,080
What I want is my CalculatorBrain

1382
01:00:01,080 --> 01:00:02,640
My model's header file

1383
01:00:02,650 --> 01:00:04,280
cause I wanna use its public API

1384
01:00:04,280 --> 01:00:06,110
So if you do that, you can look up here

1385
01:00:06,110 --> 01:00:07,680
in all kind of assistant thing

1386
01:00:07,680 --> 01:00:08,570
you can get here

1387
01:00:08,570 --> 01:00:12,210
And one of the assistant thing is show me something I include

1388
01:00:12,210 --> 01:00:14,850
And since I added my CalculatorBrain on the left

1389
01:00:14,850 --> 01:00:16,130
And I can go over here

1390
01:00:16,130 --> 01:00:19,000
and say show me my CalculatorBrain on the right

1391
01:00:19,000 --> 01:00:21,210
And now I can see the public API from my model

1392
01:00:21,210 --> 01:00:22,780
while I am working in my controller

1393
01:00:22,780 --> 01:00:25,670
This is kinda of convenient. Okay

1394
01:00:25,670 --> 01:00:29,770
So, what we have left to do in the controller is these two guys

1395
01:00:29,770 --> 01:00:31,350
enterPressed and operationPressed

1396
01:00:31,350 --> 01:00:34,150
Now we have this powerful model of ours

1397
01:00:34,150 --> 01:00:36,820
it is actually quite easy to implement these

1398
01:00:36,820 --> 01:00:39,980
so enterPressed is just gonna push the thing

1399
01:00:39,980 --> 01:00:41,420
Right? Which is just to push the...

1400
01:00:41,420 --> 01:00:44,270
eh, whatever digits in the display

1401
01:00:44,270 --> 01:00:46,020
push that into the model

1402
01:00:46,020 --> 01:00:49,170
Eh, one thing we need to do that thought is

1403
01:00:49,170 --> 01:00:51,350
we need a pointer to our model

1404
01:00:51,350 --> 01:00:53,950
Okay, so almost all controllers are going to

1405
01:00:53,950 --> 01:00:56,770
have a almost always private property

1406
01:00:56,770 --> 01:01:00,290
Not always but mostly always

1407
01:01:00,290 --> 01:01:04,810
it's gonna be strong, and it's a CalculatorBrain

1408
01:01:04,810 --> 01:01:07,760
And I am gonna call it barin, okay

1409
01:01:07,760 --> 01:01:13,060
And of course I need to synthesize it , it goes on the bar brain

1410
01:01:13,060 --> 01:01:17,350
And you know what, I am gonna do lazy instantiation on it , right after that, okay

1411
01:01:17,360 --> 01:01:20,040
(CaclulatorBrain * ) barin

1412
01:01:20,040 --> 01:01:23,290
if not brain if I don't have my brain yet

1413
01:01:23,290 --> 01:01:28,690
Then brain = [[CaclulatorBrain alloc] init]

1414
01:01:28,690 --> 01:01:32,040
Okay , we will talk about the allocation initialization next week

1415
01:01:32,040 --> 01:01:36,080
And then I am gonna result... return my brain

1416
01:01:36,080 --> 01:01:42,390
So now whenever I call the getter self, what the hell it is

1417
01:01:42,780 --> 01:01:44,050
Anytime I call my getter

1418
01:01:44,050 --> 01:01:46,110
the brain will always be instantiated

1419
01:01:46,120 --> 01:01:47,560
Because I am gonna lazily instantiate it

1420
01:01:47,560 --> 01:01:48,900
anytime anyone wants it

1421
01:01:48,900 --> 01:01:53,240
That is great way to have your code pretty bulletproof

1422
01:01:53,240 --> 01:01:55,610
because you can protect in your getter

1423
01:01:55,610 --> 01:01:59,230
against in case you don't want of various properties

1424
01:01:59,230 --> 01:02:01,250
and it is also easy for me to understand

1425
01:02:01,250 --> 01:02:03,090
usually people are going to looking in your getter

1426
01:02:03,090 --> 01:02:06,370
to find out where things are instantiated for most properties

1427
01:02:06,370 --> 01:02:08,480
If there is no getter, then they going to be like searching around

1428
01:02:08,480 --> 01:02:10,760
where is this thing, initializer... or something

1429
01:02:10,760 --> 01:02:12,940
so it is better to put it in the getter first

1430
01:02:12,940 --> 01:02:14,730
Alright , so in entrePressed

1431
01:02:14,730 --> 01:02:18,040
we are just gonna say self.brain pushOperand

1432
01:02:18,040 --> 01:02:19,230
we need to push our Operand

1433
01:02:19,230 --> 01:02:21,170
well it turns out an easy way to do that

1434
01:02:21,170 --> 01:02:23,280
we gonna get our display's text

1435
01:02:23,280 --> 01:02:25,200
Everyone understood what I just did there

1436
01:02:25,200 --> 01:02:26,550
self. display.text

1437
01:02:26,550 --> 01:02:29,620
same thing we did aboved, right

1438
01:02:29,620 --> 01:02:33,130
and I am gonna send that string, the method doubleValue

1439
01:02:33,130 --> 01:02:34,380
just like I send the NSNumber

1440
01:02:34,380 --> 01:02:37,770
so it turns out not only this NSnumber implement doublevalue

1441
01:02:37,770 --> 01:02:38,540
so does NSString

1442
01:02:38,540 --> 01:02:40,910
and NSString just tries to look inside of itself

1443
01:02:40,910 --> 01:02:42,810
and if it, if hello is in there

1444
01:02:42,810 --> 01:02:43,670
it is gonna be zero

1445
01:02:43,670 --> 01:02:45,360
but if you get a number in there

1446
01:02:45,360 --> 01:02:46,840
It will try to turn it into a double

1447
01:02:46,840 --> 01:02:48,470
so that is convinent

1448
01:02:48,470 --> 01:02:50,230
The only other thing I want to do here though is

1449
01:02:50,230 --> 01:02:51,230
if I press enter

1450
01:02:51,230 --> 01:02:53,690
I am not in the middle of entering number anymore

1451
01:02:53,690 --> 01:02:55,440
By definition, I just enter it

1452
01:02:55,440 --> 01:02:59,530
So I am gonna say self.userIsInTheMiddleOfEnteringNumber=

1453
01:02:59,530 --> 01:03:02,290
Okay, that is it for enter. Enter is an easy one

1454
01:03:02,290 --> 01:03:04,910
OperationPressed, also easy. Okay

1455
01:03:04,910 --> 01:03:07,030
all I gonna do on operationPressed is

1456
01:03:07,030 --> 01:03:10,260
We gonna perform operation , so I am gonna say

1457
01:03:10,260 --> 01:03:15,770
double result = [self.brain performOperation:

1458
01:03:15,770 --> 01:03:19,130
and I need... give it to operation, okay

1459
01:03:19,130 --> 01:03:21,930
Now, I am going to the same thing here

1460
01:03:21,930 --> 01:03:24,090
I know the button sending me this

1461
01:03:24,090 --> 01:03:25,950
so I am gonna changing this (UIButton

1462
01:03:25,950 --> 01:03:27,470
Does everyone understand what I am doing there

1463
01:03:27,470 --> 01:03:29,440
Same exactly thing what I did up here

1464
01:03:29,440 --> 01:03:32,220
Okay I just letting the compiler to help me more

1465
01:03:32,220 --> 01:03:33,660
so It's only the compiler thing

1466
01:03:33,660 --> 01:03:36,010
so now I need the string that is the operation

1467
01:03:36,010 --> 01:03:37,500
The string that is the operation is

1468
01:03:37,500 --> 01:03:41,800
I know bad design, the title of our operation button

1469
01:03:41,800 --> 01:03:47,490
Okay, so I am just gonna say sender.currentTitle

1470
01:03:47,670 --> 01:03:48,270
Everybody understand that?

1471
01:03:48,270 --> 01:03:51,680
Okay, now I got the result, but it is double

1472
01:03:51,680 --> 01:03:54,000
And I need to turn that double into a string

1473
01:03:54,000 --> 01:03:55,410
so I can put it into display

1474
01:03:55,410 --> 01:03:57,950
Cause when I perform operation, I need a display

1475
01:03:57,950 --> 01:04:04,160
So I am going to create this string, called resultString

1476
01:04:04,160 --> 01:04:07,130
And I am going to use a class method in the NSString

1477
01:04:07,130 --> 01:04:10,370
We are going to talk about the class method next week

1478
01:04:10,370 --> 01:04:13,730
Called stringWithFormat

1479
01:04:13,730 --> 01:04:17,190
and it takes a printf like format

1480
01:04:17,200 --> 01:04:18,330
And now I am gonna use %g

1481
01:04:18,330 --> 01:04:20,750
which is a floating point number, okay

1482
01:04:20,750 --> 01:04:24,010
And, put the result there

1483
01:04:24,020 --> 01:04:25,860
So now I have the string, resultString

1484
01:04:25,860 --> 01:04:27,680
which is the result as a string

1485
01:04:27,680 --> 01:04:32,330
I use this string... eh, method to do that

1486
01:04:32,330 --> 01:04:33,800
Don't worry too much about this

1487
01:04:33,810 --> 01:04:35,770
This kinda strange receiver here

1488
01:04:35,770 --> 01:04:37,440
cause this is not an instance, right

1489
01:04:37,440 --> 01:04:40,300
This is the class itself, and then I am turning it to

1490
01:04:40,300 --> 01:04:46,140
But now I just need to say self.display.text = resultString

1491
01:04:46,140 --> 01:04:48,020
Okay, this is the only one other thing

1492
01:04:48,020 --> 01:04:49,650
I am going to do in the operationPressed

1493
01:04:49,650 --> 01:04:51,460
is I am going to be nice to be user

1494
01:04:51,460 --> 01:04:54,240
if they type 6 enter three times

1495
01:04:54,240 --> 01:04:55,930
I am gonna press enter for them

1496
01:04:55,930 --> 01:04:59,190
So they don't have to go 6 enter 3 enter times

1497
01:04:59,190 --> 01:05:00,940
OK. I'm gonna save them and enter

1498
01:05:00,940 --> 01:05:03,640
They're in the middle of typing a number

1499
01:05:03,640 --> 01:05:08,190
If (self.userIsInTheMiddleofTypingANumber)

1500
01:05:08,190 --> 01:05:11,800
then I'm gonna press enter

1501
01:05:11,800 --> 01:05:13,800
Everyone understand what I'm talking about there

1502
01:05:13,800 --> 01:05:17,630
6 enter 3 enter plus versus 6 enter 3 plus

1503
01:05:17,630 --> 01:05:19,090
And when I press that plus

1504
01:05:19,090 --> 01:05:21,640
it's gonna enter that there that I'm in the middle of typing

1505
01:05:21,640 --> 01:05:24,650
Just convenient, really convenient for the user

1506
01:05:24,650 --> 01:05:26,140
OK. That's it

1507
01:05:26,140 --> 01:05:27,290
So let's run

1508
01:05:27,290 --> 01:05:31,430
and I hope I haven't made some mistake here somewhere

1509
01:05:31,430 --> 01:05:32,580
Here's our calculator

1510
01:05:32,580 --> 01:05:37,270
now so let's try 56 enter 3 times

1511
01:05:37,270 --> 01:05:41,130
I hope that's 56 times 3.7 divide

1512
01:05:41,130 --> 01:05:43,510
Oops... I didn't implement divide, so I got a zero

1513
01:05:43,510 --> 01:05:44,900
OK. So that's the right thing

1514
01:05:44,900 --> 01:05:49,600
So, 36 enter 2 plus, 3 plus

1515
01:05:49,600 --> 01:05:52,090
so it's working when I add things on

1516
01:05:52,100 --> 01:05:57,450
6 plus so that's working as well OK. OK. That's it

1517
01:05:57,460 --> 01:05:58,330
Everybody got it?

1518
01:05:58,340 --> 01:05:59,790
Any last minute, second question?

1519
01:05:59,790 --> 01:06:01,330
Well, I'm sorry we went over by 10 minutes

1520
01:06:01,340 --> 01:06:04,140
I hate that but hopefully you all got it

1521
01:06:04,140 --> 01:06:05,240
Thank you very much

1522
01:06:07,190 --> 01:06:09,690
For more please visit us at Stanford.edu

